<?xml version='1.0' encoding='utf-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://lyukidon.github.io/</id>
  <title><![CDATA[Home]]></title>
  <subtitle><![CDATA[Ryu Kidon Blog]]></subtitle>
  <icon>https://lyukidon.github.io/favicon.png</icon>
  <link href="https://lyukidon.github.io" />
  <link href="https://lyukidon.github.io/atom.xml" rel="self" type="application/atom+xml" />
  <updated>2024-02-06T17:02:17.882Z</updated>
  <author>
    <name><![CDATA[Ryu Kidon]]></name>
  </author>
  <category term="Error" scheme="https://lyukidon.github.io/?tags=Error" />
  <category term="Google Console" scheme="https://lyukidon.github.io/?tags=Google%20Console" />
  <category term="Firewall" scheme="https://lyukidon.github.io/?tags=Firewall" />
  <category term="docker" scheme="https://lyukidon.github.io/?tags=docker" />
  <category term="redis" scheme="https://lyukidon.github.io/?tags=redis" />
  <category term="express" scheme="https://lyukidon.github.io/?tags=express" />
  <category term="jwt" scheme="https://lyukidon.github.io/?tags=jwt" />
  <category term="token" scheme="https://lyukidon.github.io/?tags=token" />
  <category term="refresh token" scheme="https://lyukidon.github.io/?tags=refresh%20token" />
  <category term="http_status_code" scheme="https://lyukidon.github.io/?tags=http_status_code" />
  <category term="encryption" scheme="https://lyukidon.github.io/?tags=encryption" />
  <category term="null" scheme="https://lyukidon.github.io/?tags=null" />
  <category term="mysql" scheme="https://lyukidon.github.io/?tags=mysql" />
  <category term="prisma" scheme="https://lyukidon.github.io/?tags=prisma" />
  <category term="DDL" scheme="https://lyukidon.github.io/?tags=DDL" />
  <category term="bug_fix" scheme="https://lyukidon.github.io/?tags=bug_fix" />
  <category term="Introduction" scheme="https://lyukidon.github.io/?tags=Introduction" />
  <category term="mongodb" scheme="https://lyukidon.github.io/?tags=mongodb" />
  <category term="mongoose" scheme="https://lyukidon.github.io/?tags=mongoose" />
  <category term="Urara" scheme="https://lyukidon.github.io/?tags=Urara" />
  <category term="Elements" scheme="https://lyukidon.github.io/?tags=Elements" />
  <category term="Front-Matter" scheme="https://lyukidon.github.io/?tags=Front-Matter" />
  <category term="Hello World" scheme="https://lyukidon.github.io/?tags=Hello%20World" />
  <entry>
    <title type="html"><![CDATA[Error 메세지 작성방법]]></title>
    <link href="https://lyukidon.github.io/Javascript/TIL/error_handling" />
    <id>https://lyukidon.github.io/Javascript/TIL/error_handling</id>
    <published>2024-02-06T00:00:00.000Z</published>
    <updated>2024-02-06T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[<ul><li data-svelte-h="svelte-16t0uzc"><p>throw</p> <p><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Statements/throw" rel="nofollow noopener noreferrer external" target="_blank">https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Statements/throw</a></p> <p>throw 문을 사용하면 예외 처리를 할 수 있는데, throw 가 실행되면, 코드의 실행이 중지되고 catch 블록으로 전달되게 된다.</p></li> <li data-svelte-h="svelte-1ay1poj"><p>error</p> <p>Error 객체는 에러를 나타낼 때 사용하는 객체로 아래와 같은 속성을 가지고 있다.</p> <ul><li>name : 에러명</li> <li>message : 에러 설명</li> <li>stack : <code>${error.name}: ${error.message}</code></li> <li>cause : Error 객체를 생성할 때, 발생한 이유를 추가. 데이터 타입은 상관 없음</li></ul></li> <li><p data-svelte-h="svelte-1j0d301">에러 객체 생성하는 방법</p> <!-- HTML_TAG_START --><pre class="shiki material-default" js="true"><div class="language-id">js</div><div class='code-container'><code><div class='line'>throw new Error(MESSAGE, &#123; name: NAME, cause: &#123; CAUSE &#125; &#125;);</div><div class='line'>// error.stack -&gt; NAME: MESSAGE</div></code></div></pre><!-- HTML_TAG_END --></li> <li><p data-svelte-h="svelte-1l1mnkl">특정 데이터를 전달하고자 하는 경우, 에러 객체를 사용하지 않고 throw를 할 수도 있다.</p> <!-- HTML_TAG_START --><pre class="shiki material-default" js="true"><div class="language-id">js</div><div class='code-container'><code><div class='line'>throw &#123;</div><div class='line'>    name: NAME,</div><div class='line'>    message: MESSAGE</div><div class='line'>&#125;;</div></code></div></pre><!-- HTML_TAG_END --></li></ul>]]>
    </content>
    <category term="Error" scheme="https://lyukidon.github.io/?tags=Error" />
  </entry>
  <entry>
    <title type="html"><![CDATA[Google Console VM instance 포트 열기]]></title>
    <link href="https://lyukidon.github.io/Javascript/TIL/google_console/port" />
    <id>https://lyukidon.github.io/Javascript/TIL/google_console/port</id>
    <published>2024-02-06T00:00:00.000Z</published>
    <updated>2024-02-06T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[<p data-svelte-h="svelte-15f9ix0">Google Console은 AWS와 다르게 포트 여는 부분이 다른 곳에 있다.</p> <ol data-svelte-h="svelte-1k73q0h"><li>VPC 네트워크 들어가기</li> <li>방화벽</li> <li>방화벽 규칙 만들기</li> <li>TCP에서 포트 열기</li></ol> <p data-svelte-h="svelte-1nvgwq8">또는</p> <ol data-svelte-h="svelte-170mjx6"><li>인스턴스 메뉴</li> <li>하단 방화벽 규칙 설정</li></ol> <p data-svelte-h="svelte-1uv61kv">을 누르면 방화벽 설정에 들어갈 수 있다.</p>]]>
    </content>
    <category term="Google Console" scheme="https://lyukidon.github.io/?tags=Google%20Console" />
    <category term="Firewall" scheme="https://lyukidon.github.io/?tags=Firewall" />
  </entry>
  <entry>
    <title type="html"><![CDATA[redis 설치 및 연결]]></title>
    <link href="https://lyukidon.github.io/Javascript/TIL/redis/start" />
    <id>https://lyukidon.github.io/Javascript/TIL/redis/start</id>
    <published>2024-02-05T00:00:00.000Z</published>
    <updated>2024-02-05T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[<p data-svelte-h="svelte-tjnbp1">docker에 redis를 설치하는 방법</p> <ol><li><p data-svelte-h="svelte-etlrfi">redis 이미지 받아오기</p> <!-- HTML_TAG_START --><pre class="shiki material-default" bash="true"><div class="language-id">bash</div><div class='code-container'><code><div class='line'>docker pull redis</div></code></div></pre><!-- HTML_TAG_END --></li> <li><p data-svelte-h="svelte-cz7wcs">docker에 설치</p> <!-- HTML_TAG_START --><pre class="shiki material-default" bash="true"><div class="language-id">bash</div><div class='code-container'><code><div class='line'>docker run --name redisContainer -d -p 6379:6379 redis</div></code></div></pre><!-- HTML_TAG_END --></li> <li><p data-svelte-h="svelte-17ka62f">redis와 express 연결하기</p> <!-- HTML_TAG_START --><pre class="shiki material-default" bash="true"><div class="language-id">bash</div><div class='code-container'><code><div class='line'>npm i redis</div></code></div></pre><!-- HTML_TAG_END --> <!-- HTML_TAG_START --><pre class="shiki material-default" js="true"><div class="language-id">js</div><div class='code-container'><code><div class='line'>// redisClient.js</div><div class='line'>import Redis from "redis";</div><div class='line'></div><div class='line'>const redisClient = await Redis.createClient(process.env.PORT_REDIS)</div><div class='line'>    .on("error", err =&gt; console.log("Redis Client Error", err))</div><div class='line'>    .connect();</div><div class='line'></div><div class='line'>export default redisClient;</div></code></div></pre><!-- HTML_TAG_END --></li> <li><p data-svelte-h="svelte-1vxbpig">redis 데이터 읽기, 쓰기</p> <ol><li><p data-svelte-h="svelte-1obkz8b">읽기</p> <!-- HTML_TAG_START --><pre class="shiki material-default" js="true"><div class="language-id">js</div><div class='code-container'><code><div class='line'>import redisClient from "redisClient.js";</div><div class='line'></div><div class='line'>await redisClient.get(key);</div></code></div></pre><!-- HTML_TAG_END --></li> <li><p data-svelte-h="svelte-1yzjzni">쓰기 및 업데이트</p> <!-- HTML_TAG_START --><pre class="shiki material-default" js="true"><div class="language-id">js</div><div class='code-container'><code><div class='line'>import redisClient from "redisClient.js";</div><div class='line'></div><div class='line'>await redisClient.set(key, value);</div></code></div></pre><!-- HTML_TAG_END --></li></ol></li></ol>]]>
    </content>
    <category term="docker" scheme="https://lyukidon.github.io/?tags=docker" />
    <category term="redis" scheme="https://lyukidon.github.io/?tags=redis" />
    <category term="express" scheme="https://lyukidon.github.io/?tags=express" />
  </entry>
  <entry>
    <title type="html"><![CDATA[Refresh Token 사용 방법]]></title>
    <link href="https://lyukidon.github.io/Javascript/TIL/jwt/refresh_token" />
    <id>https://lyukidon.github.io/Javascript/TIL/jwt/refresh_token</id>
    <published>2024-02-02T00:00:00.000Z</published>
    <updated>2024-02-02T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[<p data-svelte-h="svelte-kxmjao">Access Token은 발급 받은 후, 인증을 위해 지속적으로 서버와 교환을 하게 된다. 통신을 자주 반복하게 된다는 것은, 그만큼 탈취될 가능성도 높다는 뜻이다.</p> <p data-svelte-h="svelte-160z862">Refresh Token은 이러한 Access Token의 단점을 보완해주는 역할을 한다.</p> <p data-svelte-h="svelte-1iifmc2">토큰을 발급받고 저장하는 순서는 다음과 같다.</p> <!-- HTML_TAG_START --><pre class="shiki material-default"><div class='code-container'><code><div class='line'>|        |        |          |</div><div class='line'>| Client | Server | Database |</div><div class='line'>|        |        |          |</div></code></div></pre><!-- HTML_TAG_END --> <ol data-svelte-h="svelte-m068na"><li>사용자가 로그인을 한다.</li> <li>서버에서 Access Token과 Refresh Token을 발급한다.<ul><li>클라이언트에 Access Token과 Refresh Token을 전달한다.</li> <li>Refresh Token은 데이터 베이스에 저장한다.</li></ul></li> <li>Access Token의 만료 기간이 지나면, Refresh Token을 이용한다.<ul><li>클라이언트의 Refresh Token과 데이터베이스의 Refresh Token을 비교한다.</li> <li>같다면 2번을 반복한다.</li></ul></li></ol>]]>
    </content>
    <category term="jwt" scheme="https://lyukidon.github.io/?tags=jwt" />
    <category term="token" scheme="https://lyukidon.github.io/?tags=token" />
    <category term="refresh token" scheme="https://lyukidon.github.io/?tags=refresh%20token" />
  </entry>
  <entry>
    <title type="html"><![CDATA[Jest Error - SyntaxError: Cannot use import statement outside a module]]></title>
    <link href="https://lyukidon.github.io/Javascript/TIL/jest/jest_es6" />
    <id>https://lyukidon.github.io/Javascript/TIL/jest/jest_es6</id>
    <published>2024-02-01T00:00:00.000Z</published>
    <updated>2024-02-01T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[<p data-svelte-h="svelte-1by5mpn">Jest 에서 ES6 Module Syntax 사용 시 에러가 발생한다.</p> <p data-svelte-h="svelte-1j3wt01">이 때는 package.json의 “script” 부분을 변경해주면 된다.</p> <!-- HTML_TAG_START --><pre class="shiki material-default" json="true"><div class="language-id">json</div><div class='code-container'><code><div class='line'>"script": &#123;</div><div class='line'>    "test": "node --experimental-vm-modules node_modules/jest/bin/jest.js"</div><div class='line'>&#125;</div><div class='line'>//npm run test</div></code></div></pre><!-- HTML_TAG_END --> <p data-svelte-h="svelte-370g1h">또는 아래 코드로 jest를 실행해주면 된다.</p> <!-- HTML_TAG_START --><pre class="shiki material-default" bash="true"><div class="language-id">bash</div><div class='code-container'><code><div class='line'>NODE_OPTIONS="$NODE_OPTIONS --experimental-vm-modules" npx jest</div></code></div></pre><!-- HTML_TAG_END -->]]>
    </content>
    <category term="http_status_code" scheme="https://lyukidon.github.io/?tags=http_status_code" />
  </entry>
  <entry>
    <title type="html"><![CDATA[JWT 사용방법]]></title>
    <link href="https://lyukidon.github.io/Javascript/TIL/jwt/usage" />
    <id>https://lyukidon.github.io/Javascript/TIL/jwt/usage</id>
    <published>2024-01-31T00:00:00.000Z</published>
    <updated>2024-01-31T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[<p data-svelte-h="svelte-ksgtza">JWT 사용방법</p> <p data-svelte-h="svelte-vaaiwa">npm: <a href="https://www.npmjs.com/package/jsonwebtoken" rel="nofollow noopener noreferrer external" target="_blank">https://www.npmjs.com/package/jsonwebtoken</a></p> <ol><li>설치하기<!-- HTML_TAG_START --><pre class="shiki material-default" bash="true"><div class="language-id">bash</div><div class='code-container'><code><div class='line'>npm i jsonwebtoken</div></code></div></pre><!-- HTML_TAG_END --></li> <li>모듈 불러오기<!-- HTML_TAG_START --><pre class="shiki material-default" js="true"><div class="language-id">js</div><div class='code-container'><code><div class='line'>import jwt from "jsonwebtoken";</div><div class='line'>// or</div><div class='line'>const jwt = require("jsonwebtoken");</div></code></div></pre><!-- HTML_TAG_END --></li> <li>Access Token 생성하기<!-- HTML_TAG_START --><pre class="shiki material-default" js="true"><div class="language-id">js</div><div class='code-container'><code><div class='line'>const accessToken = jwt.sign(payload, secretkey, options);</div><div class='line'>// example</div><div class='line'>const accessToken = jwt.sign(&#123; id: "lyu" &#125;, "randomSecretKey", &#123;</div><div class='line'>    algorithm: "HS256", // 암호화 방식</div><div class='line'>    expiresIn: "12h", // 만료 기간</div><div class='line'>    notBefore, // 설정한 시간 이전까지는 작동하지 않도록 하는 옵션</div><div class='line'>    audience,</div><div class='line'>    issuer,</div><div class='line'>    jwtid,</div><div class='line'>    subject,</div><div class='line'>    noTimestamp,</div><div class='line'>    header,</div><div class='line'>    keyid,</div><div class='line'>    mutatePayload: boolean, // 키가 생성되기 전에, payload 값을 변경</div><div class='line'>    allowInsecureKeySizes: boolean, // 2048 미만의 모듈러스 개인 키를 RSA에 사용할 수 있음</div><div class='line'>    allowInvalidAsymmetricKeyTypes: boolean // (이전 버전 호환용) 지정된 알고리즘과 다른 비대칭 키를 허용</div><div class='line'>&#125;);</div></code></div></pre><!-- HTML_TAG_END --></li> <li>Access Token 해석하기<!-- HTML_TAG_START --><pre class="shiki material-default" js="true"><div class="language-id">js</div><div class='code-container'><code><div class='line'>const decoded = jwt.verify(token, secretkey, options, callback);</div><div class='line'>// example</div><div class='line'>const decoded = jwt.verify(</div><div class='line'>    token,</div><div class='line'>    "secretkey",</div><div class='line'>    &#123;</div><div class='line'>        algorithm: "HS256", // 암호화 방식</div><div class='line'>        audience,</div><div class='line'>        complete, // 해석된 &#123; payload, header, signature &#125;를 반환 (기존은 payload만 반환)</div><div class='line'>        issuer,</div><div class='line'>        jwtid, // JWT ID를 확인할 때 사용</div><div class='line'>        ignoreExpiration, // 만료 기간을 확인하지 않고 인증</div><div class='line'>        subject,</div><div class='line'>        clockTolerance,</div><div class='line'>        maxAge, // 만료기간을 최대 기간으로 설정</div><div class='line'>        clockTimestamp,</div><div class='line'>        nonce,</div><div class='line'>        allowInvalidAsymmetricKeyTypes</div><div class='line'>    &#125;,</div><div class='line'>    (err, decoded) =&gt; &#123;&#125;</div><div class='line'>);</div></code></div></pre><!-- HTML_TAG_END --></li></ol> <ul><li>에러 확인하기<ul><li>토큰 만료 에러<!-- HTML_TAG_START --><pre class="shiki material-default" js="true"><div class="language-id">js</div><div class='code-container'><code><div class='line'>&#123;</div><div class='line'>    name: 'TokenExpiredError',</div><div class='line'>    message:'jwt expired',</div><div class='line'>    expiredAt</div><div class='line'>&#125;</div></code></div></pre><!-- HTML_TAG_END --></li> <li>토큰 에러<!-- HTML_TAG_START --><pre class="shiki material-default" js="true"><div class="language-id">js</div><div class='code-container'><code><div class='line'>&#123;</div><div class='line'>    name: "JsonWebTokenError",</div><div class='line'>    message:'invalid token',</div><div class='line'>    // 'invalid token' - the header or payload could not be parsed</div><div class='line'>    // 'jwt malformed' - the token does not have three components (delimited by a .)</div><div class='line'>    // 'jwt signature is required'</div><div class='line'>    // 'invalid signature'</div><div class='line'>    // 'jwt audience invalid. expected: [OPTIONS AUDIENCE]'</div><div class='line'>    // 'jwt issuer invalid. expected: [OPTIONS ISSUER]'</div><div class='line'>    // 'jwt id invalid. expected: [OPTIONS JWT ID]'</div><div class='line'>    // 'jwt subject invalid. expected: [OPTIONS SUBJECT]'</div><div class='line'>&#125;</div></code></div></pre><!-- HTML_TAG_END --></li> <li>NotBefore 에러<!-- HTML_TAG_START --><pre class="shiki material-default" js="true"><div class="language-id">js</div><div class='code-container'><code><div class='line'>&#123;</div><div class='line'>    name: 'NotBeforeError',</div><div class='line'>    message: 'jwt not active',</div><div class='line'>    date</div><div class='line'>&#125;</div></code></div></pre><!-- HTML_TAG_END --></li></ul></li></ul>]]>
    </content>
    <category term="jwt" scheme="https://lyukidon.github.io/?tags=jwt" />
    <category term="token" scheme="https://lyukidon.github.io/?tags=token" />
  </entry>
  <entry>
    <title type="html"><![CDATA[http 에러 코드 종류]]></title>
    <link href="https://lyukidon.github.io/Javascript/TIL/http_status_code" />
    <id>https://lyukidon.github.io/Javascript/TIL/http_status_code</id>
    <published>2024-01-30T00:00:00.000Z</published>
    <updated>2024-01-30T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[<ul data-svelte-h="svelte-11lxhkh"><li><p>100s : 정보 제공</p></li> <li><p>200s : 성공</p></li> <li><p>300s : 리다이렉션</p></li> <li><p>400s : 클라이언트 에러</p></li> <li><p>500s : 서버 에러</p></li> <li><p>100s</p> <ul><li>100 : Continue</li> <li>101 : Switching Protocol</li> <li>102 : Processing</li> <li>103 : Early Hints</li></ul></li> <li><p>200s</p> <ul><li>200 : OK</li> <li>201 : Created</li> <li>202 : Accepted</li> <li>203 : Non-Authoritative Information</li> <li>204 : No Content</li> <li>205 : Reset Content</li> <li>206 : Partial Content</li> <li>207 : Multi-Status</li> <li>208 : Multi-Status</li> <li>226 : IM Used</li></ul></li> <li><p>300s</p> <ul><li>300 : Multiple Choice</li> <li>301 : Moved Permanently</li> <li>302 : Found</li> <li>303 : See Other</li> <li>304 : Not Modified</li> <li>305 : Use Proxy</li> <li>306 : unused</li> <li>307 : Temporary Redirect</li> <li>308 : Permanent Redirect</li></ul></li> <li><p>400s</p> <ul><li>400 : Bad Request</li> <li>401 : Unauthorized</li> <li>402 : Payment Required</li> <li>403 : Forbidden</li> <li>404 : Not Found</li> <li>405 : Method Not Allowed</li> <li>406 : Not Acceptable</li> <li>407 : Proxy Authentication Required</li> <li>408 : Request Timeout</li> <li>409 : Conflict</li> <li>410 : Gone</li> <li>411 : Length Required</li> <li>412 : Precondition Failed</li> <li>413 : Payload Too Large</li> <li>414 : URI Too Long</li> <li>415 : Unsupported Media Type</li> <li>416 : Requested Range Not Satisfiable</li> <li>417 : Expectation Failed</li> <li>418 : I’m a teapot</li> <li>421 : Misdirected Request</li> <li>422 : Unprocessable Entity</li> <li>423 : Locked</li> <li>424 : Failed Dependency</li> <li>426 : Upgrade Required</li> <li>428 : Precondition Required</li> <li>429 : Too Many Requests</li> <li>431 : Request Header Fields Too Large</li> <li>451 : Unavailable For Legal Reasons</li></ul></li> <li><p>500s</p> <ul><li>500 : Internal Server Error</li> <li>501 : Not Implemented</li> <li>502 : Bad Gateway</li> <li>503 : Service Unavailable</li> <li>504 : Gateway Timeout</li> <li>505 : HTTP Version Not Supported</li> <li>506 : Variant Also Negotiates</li> <li>507 : Insufficient Storage</li> <li>508 : Loop Detected</li> <li>510 : Not Extended</li> <li>511 : Network Authentication Required</li></ul></li></ul>]]>
    </content>
    <category term="http_status_code" scheme="https://lyukidon.github.io/?tags=http_status_code" />
  </entry>
  <entry>
    <title type="html"><![CDATA[Docker MySQL Container 설치와 사용방법]]></title>
    <link href="https://lyukidon.github.io/Javascript/TIL/encryption" />
    <id>https://lyukidon.github.io/Javascript/TIL/encryption</id>
    <published>2024-01-29T00:00:00.000Z</published>
    <updated>2024-01-29T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[]]>
    </content>
    <category term="encryption" scheme="https://lyukidon.github.io/?tags=encryption" />
    <category term="null" scheme="https://lyukidon.github.io/?tags=null" />
  </entry>
  <entry>
    <title type="html"><![CDATA[Prisma 사용법]]></title>
    <link href="https://lyukidon.github.io/Javascript/TIL/prisma" />
    <id>https://lyukidon.github.io/Javascript/TIL/prisma</id>
    <published>2024-01-26T00:00:00.000Z</published>
    <updated>2024-01-26T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[<p data-svelte-h="svelte-19vn209">Javascript에서 MySQL을 사용하기 위해서, Prisma를 사용할 수 있다.</p> <ol><li><p data-svelte-h="svelte-1ws77og">설치하기</p> <!-- HTML_TAG_START --><pre class="shiki material-default" bash="true"><div class="language-id">bash</div><div class='code-container'><code><div class='line'>npm init -y</div><div class='line'>npm install prisma --save-dev</div></code></div></pre><!-- HTML_TAG_END --></li> <li><p data-svelte-h="svelte-rauwhm">prisma 기본 폴더 생성하기</p> <!-- HTML_TAG_START --><pre class="shiki material-default" bash="true"><div class="language-id">bash</div><div class='code-container'><code><div class='line'>npx prisma</div><div class='line'>npx prisma init</div></code></div></pre><!-- HTML_TAG_END --> <p data-svelte-h="svelte-nej5uc"><code>npx prisma init</code> : <code>prisma 폴더</code>와 <code>schema.prisma</code> 파일, <code>.env</code> 파일을 생성해준다.</p></li> <li><p data-svelte-h="svelte-1ydplnc">데이터 베이스 연결하기</p> <!-- HTML_TAG_START --><pre class="shiki material-default" js="true"><div class="language-id">js</div><div class='code-container'><code><div class='line'>/* prisma.schema */</div><div class='line'>datasource db &#123;</div><div class='line'>    provider = "mysql"</div><div class='line'>    url = env("DATABASE_URL")</div><div class='line'>&#125;</div></code></div></pre><!-- HTML_TAG_END --> <!-- HTML_TAG_START --><pre class="shiki material-default" js="true"><div class="language-id">js</div><div class='code-container'><code><div class='line'>/* .env */</div><div class='line'>DATABASE_URL = "DATABASE_TYPE://USER:PASSWORD@END_POINT:PORT_NUMBER/DATABASE_NAME";</div></code></div></pre><!-- HTML_TAG_END --> <ul data-svelte-h="svelte-15a27lv"><li><code>DATABASE_TYPE</code>사용하고자하는 데이터베이스.Postgres SQL, MySQL, SQLServer, PlantScale, Cockroach DB, MongoDB 지원</li> <li><code>USER</code> : 사용자 이름</li> <li><code>PASSWORD</code> : 설정한 비밀번호</li> <li><code>END_POINT</code> : url</li> <li><code>PORT_NUMBER</code> : 설정한 포트 번호</li> <li><code>DATABASE_NAME</code> : 데이터베이스의 이름</li></ul></li> <li><p data-svelte-h="svelte-1e205ry">테이블의 Schema 설정</p> <!-- HTML_TAG_START --><pre class="shiki material-default" prisma="true"><div class="language-id">prisma</div><div class='code-container'><code><div class='line'>model Products &#123;</div><div class='line'>    productId   Int      @id @default(autoincrement()) @map("productId")</div><div class='line'>    productName String   @unique @map("productName")</div><div class='line'>    price       Int      @default(1000) @map("price")</div><div class='line'>    info        String?  @map("info") @db.Text</div><div class='line'>    createdAt   DateTime @default(now()) @map("createdAt")</div><div class='line'>    updatedAt   DateTime @updatedAt @map("updatedAt")</div><div class='line'></div><div class='line'>    @@map("Products")</div><div class='line'>&#125;</div></code></div></pre><!-- HTML_TAG_END --> <ul data-svelte-h="svelte-1bz8voz"><li>@id : <code>PRIMARY KEY</code></li> <li>@default() : 기본 값</li> <li>autoincrement : <code>AUTO_INCREMENT</code> 레코드가 추가될 때마다 값이 1씩 증가</li> <li>@map : 실제 table에 저장되는 이름</li> <li>@unique : <code>UNIQUE</code> 값이 겹치면 안됌</li> <li>DATA_TYPE? : <code>NULL</code> 이 칼럼의 값은 없어도 됌</li> <li>@db.DATA_TYPE : 데이터 타입을 변경하고자 하는 경우 작성</li> <li>@updatedAt : 레코드가 변경되는 경우, 자동으로 시간을 변경</li></ul></li> <li><p data-svelte-h="svelte-jl74ub">Prisma Migrate</p> <!-- HTML_TAG_START --><pre class="shiki material-default" bash="true"><div class="language-id">bash</div><div class='code-container'><code><div class='line'>npx prisma migrate dev --name init</div></code></div></pre><!-- HTML_TAG_END --> <p data-svelte-h="svelte-86hr8u">위의 코드를 실행하면, prisma의 코드를, SQL의 RAW QUERY로 변경해준다.</p> <!-- HTML_TAG_START --><pre class="shiki material-default" sql="true"><div class="language-id">sql</div><div class='code-container'><code><div class='line'>CREATE TABLE Products(</div><div class='line'></div><div class='line'>    productId INTEGER NOT NULL AUTO_INCREMENT PRIMARY KEY</div><div class='line'>    productName TEXT NOT NULL UNIQUE,</div><div class='line'>    price INTEGER NOT NULL,</div><div class='line'>    info TEXT NULL,</div><div class='line'>    createdAt DATETIME DEFAULT CURRENT_TIMESTAMP</div><div class='line'>    -- CURRENT_TIMESTAMP == now()</div><div class='line'>    updatedAt DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP</div><div class='line'></div><div class='line'>)</div></code></div></pre><!-- HTML_TAG_END --></li> <li><p data-svelte-h="svelte-ayqk2j">Prisma Client 설치</p> <!-- HTML_TAG_START --><pre class="shiki material-default" bash="true"><div class="language-id">bash</div><div class='code-container'><code><div class='line'>npm i @prisma/client</div></code></div></pre><!-- HTML_TAG_END --> <p><img src="../../../assets/prisma.png" alt="Alt text" class="rounded-lg my-2" loading="lazy" decoding="async"></p> <p data-svelte-h="svelte-1u697ww">schema가 변경된 경우, <code>prisma migrate dev</code>나 <code>prisma db push</code>를 통해 데이터베이스에 데이터를 전달해야 하는데, <strong>Prisma Client를 통해 동기화를 유지시켜줄 수 있다.</strong></p></li></ol>]]>
    </content>
    <category term="mysql" scheme="https://lyukidon.github.io/?tags=mysql" />
    <category term="prisma" scheme="https://lyukidon.github.io/?tags=prisma" />
  </entry>
  <entry>
    <title type="html"><![CDATA[MySQL DDL]]></title>
    <link href="https://lyukidon.github.io/Javascript/TIL/mysql_DDL" />
    <id>https://lyukidon.github.io/Javascript/TIL/mysql_DDL</id>
    <published>2024-01-25T00:00:00.000Z</published>
    <updated>2024-01-25T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[<p data-svelte-h="svelte-1a3s4ly">DDL (Data Definition Language, 데이터 정의어)데이터의 생성, 수정, 삭제의 역할을 한다.</p> <ul><li><p data-svelte-h="svelte-vdeiy8">CREATE</p> <ul><li><p data-svelte-h="svelte-bg9qde">데이터 베이스 생성</p> <!-- HTML_TAG_START --><pre class="shiki material-default" sql="true"><div class="language-id">sql</div><div class='code-container'><code><div class='line'>CREATE DATABASE SQL_DB;</div></code></div></pre><!-- HTML_TAG_END --></li> <li><p data-svelte-h="svelte-1bi5s4y">테이블 생성</p> <!-- HTML_TAG_START --><pre class="shiki material-default" sql="true"><div class="language-id">sql</div><div class='code-container'><code><div class='line'>CREATE TABLE USERS(</div><div class='line'>    USERID INT(100) NOT NULL UNIQUE AUTO_INCREMENT PRIMARY KEY,</div><div class='line'>    NAME VARCHAR(10) NOT NULL</div><div class='line'>    GENDER ENUM("M","W");</div><div class='line'>);</div><div class='line'></div><div class='line'>CREATE TABLE ORDERS(</div><div class='line'>    ORDERID INT(100) NOT NULL UNIQUE AUTO_INCREMENT PRIMARY KEY,</div><div class='line'>    USERID INT(100) NOT NULL,</div><div class='line'>    PRODUCT VARCHAR(255) NOT NULL</div><div class='line'>    FOREIGN KEY (USERID) REFERENCE USERS (USERID)</div><div class='line'>);</div></code></div></pre><!-- HTML_TAG_END --></li> <li><p data-svelte-h="svelte-ba2wst">제약 조건</p> <ul data-svelte-h="svelte-ecexrr"><li>숫자 타입</li></ul> <div class="overflow-x-auto mb-4"><table class="table w-full"><thead data-svelte-h="svelte-1doflcb"><tr><th>타입</th> <th>범위</th> <th>범위 식</th> <th>용량</th></tr></thead> <tbody data-svelte-h="svelte-6103cx"><tr><td>TINYINT</td> <td>0 ~ 255</td> <td>2^0-1 ~ 2^8-1</td> <td>1 Byte</td></tr> <tr><td>SMALLINT</td> <td>-32,768 ~ 32,767</td> <td>-2^15 ~ 2^15-1</td> <td>2 Byte</td></tr> <tr><td>INT</td> <td>-2,147,483,648 ~ 2,147,483,647</td> <td>-2^31 ~ 2^31-1</td> <td>4 Byte</td></tr> <tr><td>BIGINT</td> <td>-9,223,372,036,854,775,808 ~ 9,223,372,036,854,775,807</td> <td>-2^63 ~ 2^63-1</td> <td>8 Byte</td></tr></tbody></table></div> <ul data-svelte-h="svelte-8ttw12"><li>NULL<ul><li>NULL : 데이터가 없는 경우, NULL로 저장</li> <li>NOT NULL : 데이터가 없는 경우, 에러</li></ul></li> <li>UNIQUE : 컬럼에 같은 데이터가 존재하면 안됌</li> <li>AUTO_INCREMENT : 레코드(튜플)가 추가될 경우, 1씩 증가</li> <li>ENUM : ENUM 내부에 있는 값만 추가 가능</li></ul></li></ul></li> <li data-svelte-h="svelte-64l6tj"><p>ALTER</p></li> <li><p data-svelte-h="svelte-1c677kv">DROP</p> <ul><li>데이터 베이스 삭제<!-- HTML_TAG_START --><pre class="shiki material-default" sql="true"><div class="language-id">sql</div><div class='code-container'><code><div class='line'>DROP DATABASE SQL_DB;</div></code></div></pre><!-- HTML_TAG_END --></li> <li>테이블 삭제<!-- HTML_TAG_START --><pre class="shiki material-default" sql="true"><div class="language-id">sql</div><div class='code-container'><code><div class='line'>DROP TABLE USERS;</div><div class='line'>DROP TABLE ORDERS;</div></code></div></pre><!-- HTML_TAG_END --></li></ul></li> <li data-svelte-h="svelte-1fkz3u9"><p>TRUNCATE</p></li></ul>]]>
    </content>
    <category term="mysql" scheme="https://lyukidon.github.io/?tags=mysql" />
    <category term="DDL" scheme="https://lyukidon.github.io/?tags=DDL" />
  </entry>
  <entry>
    <title type="html"><![CDATA[Docker MySQL Container 설치와 사용방법]]></title>
    <link href="https://lyukidon.github.io/Javascript/TIL/docker_start" />
    <id>https://lyukidon.github.io/Javascript/TIL/docker_start</id>
    <published>2024-01-24T00:00:00.000Z</published>
    <updated>2024-01-24T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[<ol><li><p data-svelte-h="svelte-25mlwg">Docker 설치</p> <ul><li data-svelte-h="svelte-4g3t0l"><p>Docker Desktop</p> <p><a href="https://www.docker.com/" rel="nofollow noopener noreferrer external" target="_blank">https://www.docker.com/</a></p></li> <li><p data-svelte-h="svelte-1hf8ffo">Docker Engine (Ubuntu) 설치</p> <ol><li><p data-svelte-h="svelte-1msjo4z">Add docker repo</p> <!-- HTML_TAG_START --><pre class="shiki material-default" bash="true"><div class="language-id">bash</div><div class='code-container'><code><div class='line'>    ##### Add Docker's official GPG key: #####</div><div class='line'>sudo apt-get update</div><div class='line'>sudo apt-get install ca-certificates curl gnupg</div><div class='line'>sudo install -m 0755 -d /etc/apt/keyrings</div><div class='line'>curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg</div><div class='line'>sudo chmod a+r /etc/apt/keyrings/docker.gpg</div><div class='line'>    ##### Add the repository to Apt sources: #####</div><div class='line'>echo </div><div class='line'>"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu </div><div class='line'>$(. /etc/os-release && echo "$VERSION_CODENAME") stable" | </div><div class='line'>sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null</div><div class='line'>sudo apt-get update</div></code></div></pre><!-- HTML_TAG_END --></li> <li><p data-svelte-h="svelte-1m2f4sv">Install Docker</p> <!-- HTML_TAG_START --><pre class="shiki material-default" bash="true"><div class="language-id">bash</div><div class='code-container'><code><div class='line'>sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</div></code></div></pre><!-- HTML_TAG_END --></li></ol></li></ul></li> <li><p data-svelte-h="svelte-64nlcm">mysql 이미지 다운로드</p> <!-- HTML_TAG_START --><pre class="shiki material-default" bash="true"><div class="language-id">bash</div><div class='code-container'><code><div class='line'>docker pull mysql</div></code></div></pre><!-- HTML_TAG_END --></li> <li><p data-svelte-h="svelte-hqe77g">다운로드 받은 이미지 확인</p> <!-- HTML_TAG_START --><pre class="shiki material-default" bash="true"><div class="language-id">bash</div><div class='code-container'><code><div class='line'>docker images</div></code></div></pre><!-- HTML_TAG_END --></li> <li><p data-svelte-h="svelte-1sds1i5">container 생성 및 구동</p> <!-- HTML_TAG_START --><pre class="shiki material-default" bash="true"><div class="language-id">bash</div><div class='code-container'><code><div class='line'>docker run --name mysqlContainer -d -p 3306:3306 -e MYSQL_ROOT_PASSWORD=비밀번호 mysql:latest</div></code></div></pre><!-- HTML_TAG_END --> <ul data-svelte-h="svelte-1ncoe8g"><li><p>run : 컨테이너를 생성하고 구동시키는 명령어</p></li> <li><p>–name : 컨테이너의 이름</p></li> <li><p>-d : 백그라운드에서 실행</p></li> <li><p>-p : <code>외부포트:내부포트</code> 연결 설정</p></li> <li><p>-e : 환경변수 설정</p> <p>MYSQL은 <code>MYSQL_ROOT_PASSWORD</code>, <code>MYSQL_DATABASE</code>, <code>MYSQL_USER</code>, <code>MYSQL_PASSWORD</code> 가 있다.</p></li> <li><p>mysql:latest : 구동하고자 하는 컨테이너(mysql)을 적는다.</p></li></ul></li> <li><p data-svelte-h="svelte-dnou2b">구동 중(run)인 컨테이너 확인</p> <!-- HTML_TAG_START --><pre class="shiki material-default" bash="true"><div class="language-id">bash</div><div class='code-container'><code><div class='line'>docker ps</div></code></div></pre><!-- HTML_TAG_END --> <ul data-svelte-h="svelte-zojl73"><li>-a : 전체 컨테이너를 확인하고자 하는 경우</li></ul></li> <li><p data-svelte-h="svelte-1e214ja">컨테이너 접속</p> <!-- HTML_TAG_START --><pre class="shiki material-default" bash="true"><div class="language-id">bash</div><div class='code-container'><code><div class='line'>docker exec -it mysqlContainer /bin/bash</div></code></div></pre><!-- HTML_TAG_END --> <ul data-svelte-h="svelte-y903zm"><li>-i : 사용자가 접근하지 않아도, 계속 입력을 받을 수 있는 상태를 유지</li> <li>-t : 터미널을 사용할 수 있도록 할당해놓음</li></ul></li> <li><p data-svelte-h="svelte-4yk309">컨테이너 종료</p> <!-- HTML_TAG_START --><pre class="shiki material-default" bash="true"><div class="language-id">bash</div><div class='code-container'><code><div class='line'>docker stop mysqlContainer</div></code></div></pre><!-- HTML_TAG_END --></li> <li><p data-svelte-h="svelte-ekgpt1">기존 컨테이너 시작</p> <!-- HTML_TAG_START --><pre class="shiki material-default" bash="true"><div class="language-id">bash</div><div class='code-container'><code><div class='line'>docker start mysqlContainer</div></code></div></pre><!-- HTML_TAG_END --></li> <li><p data-svelte-h="svelte-12nztp3">기존 컨테이너 재시작</p> <!-- HTML_TAG_START --><pre class="shiki material-default" bash="true"><div class="language-id">bash</div><div class='code-container'><code><div class='line'>docker restart mysqlContainer</div></code></div></pre><!-- HTML_TAG_END --></li></ol>]]>
    </content>
    <category term="docker" scheme="https://lyukidon.github.io/?tags=docker" />
    <category term="mysql" scheme="https://lyukidon.github.io/?tags=mysql" />
  </entry>
  <entry>
    <title type="html"><![CDATA[How to fix urara build bug while using gh-pages]]></title>
    <link href="https://lyukidon.github.io/Javascript/etc/urara_bug_fix" />
    <id>https://lyukidon.github.io/Javascript/etc/urara_bug_fix</id>
    <published>2024-01-24T00:00:00.000Z</published>
    <updated>2024-01-24T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[<p data-svelte-h="svelte-a3t8yi">After deploying, page could not be loaded css files. Like that.</p> <p><img src="https://github.com/lyukidon/lyukidon.github.io/assets/64675543/fefaa038-af7f-434b-9f69-7a59ae2a82eb" alt="image" class="rounded-lg my-2" loading="lazy" decoding="async"></p> <p data-svelte-h="svelte-39byky">I could access all the files in gh-pages branch, except ”_app” directory. So I wanted to change name of directory.</p> <ol><li data-svelte-h="svelte-q1pajt"><p><del>Modified Build File</del></p> <p>What I wanted is to rename ”_app” to “app”.</p> <p>This project has some build setting files</p> <ul><li><code>tsconfig.json</code></li> <li><code>svelte.config.js</code></li> <li><code>urara.ts</code></li></ul> <p>I modified build setting by changing those files, but couldn’t fix it.</p></li> <li><p data-svelte-h="svelte-1a95d3a">Make <code>.nojekyll</code> at root of build directory, and deploy.</p> <p data-svelte-h="svelte-aqezkj">I found that if <code>deploy</code> branch doesn’t have <code>.nojekyll</code>, then Github Page serves page as Jekyll build.</p> <p data-svelte-h="svelte-14k9tnh"><strong>gh-pages needs <code>.nojekyll</code> file</strong></p> <p data-svelte-h="svelte-jsc5t3">build script runs like <code>run-s tsc urara:build kit:build clean</code> that means</p> <ol data-svelte-h="svelte-1l2fyuc"><li><code>run-s</code> : run sequentially</li> <li><code>tsc</code> : <code>tsc -p tsconfig.node.json</code></li> <li><code>urara:build</code> : <code>node urara.js build</code></li> <li><code>kit:build</code> : <code>cross-env NODE_OPTIONS=--max_old_space_size=7680 vite build</code></li> <li><code>clean</code> : <code>node urara.js clean</code></li></ol> <p data-svelte-h="svelte-bnfhc2">Before cleaning directories, I add <code>.nojekyll</code> file in build directory.</p> <ol><li><p data-svelte-h="svelte-1vwzva0">make nojekyll function in <code>urara.ts</code></p> <!-- HTML_TAG_START --><pre class="shiki material-default" js="true"><div class="language-id">js</div><div class='code-container'><code><div class='line'>const nojekyll = () =&gt; &#123;</div><div class='line'>  fs.writeFile('build/.nojekyll', '')</div><div class='line'>&#125;</div></code></div></pre><!-- HTML_TAG_END --></li> <li><p data-svelte-h="svelte-aaqh5i">Add ‘nojekyll’ case in switch case syntax</p> <!-- HTML_TAG_START --><pre class="shiki material-default" js="true"><div class="language-id">js</div><div class='code-container'><code><div class='line'>case 'nojekyll':</div><div class='line'>  nojekyll();</div><div class='line'>  break;</div></code></div></pre><!-- HTML_TAG_END --></li> <li><p data-svelte-h="svelte-jfiugv">Add that code in <code>package.json</code></p> <!-- HTML_TAG_START --><pre class="shiki material-default" json="true"><div class="language-id">json</div><div class='code-container'><code><div class='line'>&#123;</div><div class='line'>  "script": &#123;</div><div class='line'>    "nojekyll": "node urara.js nojekyll",</div><div class='line'>    "gh-pages": "npm run build && npm run nojekyll && npx gh-pages -t -d build"</div><div class='line'>  &#125;</div><div class='line'>&#125;</div></code></div></pre><!-- HTML_TAG_END --> <p data-svelte-h="svelte-112nmh4"><em><code>gh-pages -t</code> means uploading files started with ’.’</em></p></li></ol></li></ol> <p data-svelte-h="svelte-vs34fx">After doing that, you can finally deploy the perfect Homepage. Enjoy :)</p>]]>
    </content>
    <category term="bug_fix" scheme="https://lyukidon.github.io/?tags=bug_fix" />
  </entry>
  <entry>
    <title type="html"><![CDATA[류기돈]]></title>
    <link href="https://lyukidon.github.io/Introduction" />
    <id>https://lyukidon.github.io/Introduction</id>
    <published>2024-01-23T00:00:00.000Z</published>
    <updated>2024-01-23T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[]]>
    </content>
    <category term="Introduction" scheme="https://lyukidon.github.io/?tags=Introduction" />
  </entry>
  <entry>
    <title type="html"><![CDATA[create()와 save()의 차이]]></title>
    <link href="https://lyukidon.github.io/Javascript/TIL/mongodb_difference_between_create_and_save" />
    <id>https://lyukidon.github.io/Javascript/TIL/mongodb_difference_between_create_and_save</id>
    <published>2024-01-23T00:00:00.000Z</published>
    <updated>2024-01-23T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[<p data-svelte-h="svelte-13nfyut">POST를 사용하여 데이터를 추가할 때, create()와 save() API를 사용하게 된다. 다른 기능을 사용해도 같은 결과가 나와서 궁금해서 찾아보았다.</p> <p data-svelte-h="svelte-1hi7jk3"><a href="https://stackoverflow.com/questions/38290684/mongoose-save-vs-insert-vs-create" rel="nofollow noopener noreferrer external" target="_blank">https://stackoverflow.com/questions/38290684/mongoose-save-vs-insert-vs-create</a></p> <p data-svelte-h="svelte-g6dbk6"><code>The .save() is an instance method of the model, while the .create() is called directly from the Model as a method call, being static in nature, and takes the object as a first parameter.</code></p> <ul><li><p data-svelte-h="svelte-14nfs66">save()</p> <ul data-svelte-h="svelte-1z0pjig"><li>save는 instance 메서드로, 객체를 직접 형성해준 후 몽고디비에 저장하는 형식이다.</li></ul> <!-- HTML_TAG_START --><pre class="shiki material-default" js="true"><div class="language-id">js</div><div class='code-container'><code><div class='line'>const Person = mongoose.model(</div><div class='line'>  'Person',</div><div class='line'>  Schema(&#123;</div><div class='line'>    name: String,</div><div class='line'>    age: Number</div><div class='line'>  &#125;)</div><div class='line'>)</div><div class='line'></div><div class='line'>let newPerson = new Person(&#123;</div><div class='line'>  name: 'jack',</div><div class='line'>  age: 30</div><div class='line'>&#125;)</div><div class='line'></div><div class='line'>await newPerson.save()</div></code></div></pre><!-- HTML_TAG_END --></li> <li><p data-svelte-h="svelte-k8y2d1">create()</p> <ul data-svelte-h="svelte-1ykxwpy"><li>create는 static 메서드로, 객체를 따로 생성하지 않아도 호출을 할 수 있다. create 내부에 생성하고자 하는 데이터를 넣어주면, mongodb에 저장이 된다.</li></ul> <!-- HTML_TAG_START --><pre class="shiki material-default" js="true"><div class="language-id">js</div><div class='code-container'><code><div class='line'>const Person = mongoose.model(</div><div class='line'>  'Person',</div><div class='line'>  Schema(&#123;</div><div class='line'>    name: String,</div><div class='line'>    age: Number</div><div class='line'>  &#125;)</div><div class='line'>)</div><div class='line'></div><div class='line'>await Person.create(&#123; name: 'jack', age: 30 &#125;)</div></code></div></pre><!-- HTML_TAG_END --></li></ul>]]>
    </content>
    <category term="mongodb" scheme="https://lyukidon.github.io/?tags=mongodb" />
    <category term="mongoose" scheme="https://lyukidon.github.io/?tags=mongoose" />
  </entry>
  <entry>
    <title type="html"><![CDATA[Elements]]></title>
    <link href="https://lyukidon.github.io/hello-world/elements" />
    <id>https://lyukidon.github.io/hello-world/elements</id>
    <published>2021-12-12T00:00:00.000Z</published>
    <updated>2024-01-23T08:11:13.250Z</updated>
    <content type="html">
      <![CDATA[<h2 id="headings" data-svelte-h="svelte-17ezzq3"><a href="#headings">Headings</a></h2> <h3 id="heading" data-svelte-h="svelte-1lz1oii"><a href="#heading">Heading</a></h3> <h4 id="heading-1" data-svelte-h="svelte-18swq4u"><a href="#heading-1">Heading</a></h4> <h5 id="heading-2" data-svelte-h="svelte-seo8oo"><a href="#heading-2">Heading</a></h5> <h6 id="heading-3" data-svelte-h="svelte-11zzhhm"><a href="#heading-3">Heading</a></h6> <hr> <h2 id="paragraphs" data-svelte-h="svelte-1jrm51r"><a href="#paragraphs">Paragraphs</a></h2> <p data-svelte-h="svelte-1cwujs"><span class="spoiler">spoiler</span></p> <p data-svelte-h="svelte-1smaymh"><strong><em>The</em></strong> <em>quick</em> <u>brown</u> <a href="https://www.foxnews.com/" rel="nofollow noopener noreferrer external" target="_blank">fox</a> <code>jumps</code> <del>over</del> the lazy <strong>dog</strong>.</p> <p data-svelte-h="svelte-rzm3sy">Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p> <p data-svelte-h="svelte-1rcwbbl">建格的何另始養離腳合兒現各談花車是都無處與費別、信善行修覺自！壓總談下市率應次司公母兒用什一線送用標地倒直作任老數年白安足個後引使名隊懷持日落異今特族？</p> <p data-svelte-h="svelte-19ezoke">一士我像衣買了人義，計念？</p> <p data-svelte-h="svelte-k1vvek">期老外並中般灣作各現初知強車我的品式企國立市它北待不型師文人注信方，各成能久，然的孩界，他事應在創灣字母寫麼，會不作散際，學節水……全當名己會天還著行多是生如內他道了家至種樣見景時一……區行水影。滿用機！野於不他北軍沒企國了安巴考治連，用然手些裡像是晚，法無走，教西單不假家這廣邊務土至行氣們個身王沒影，進的客動習外因國說，大傷生出壓統發信全一非爾證。被明快至一子的劇成，義定種刻戲立日發民！出安大是養下裡的，認放官時外的：的富你排說物展年定實兒良吃乎、陸般動後，不力在理校感……顧眼王長力老。</p> <p data-svelte-h="svelte-5q7uy2">重多一？生光聯……動說麼了：起形市般我題臉事級。</p> <blockquote data-svelte-h="svelte-1t277r2"><p>In solitude, where we are least alone.</p></blockquote> <p data-svelte-h="svelte-dbq3jo">私は絶対いよいよ漠然たる相当心に対してはずの他にできるならな。けっして今に養成めも何だか漠然たる仕事たないだけにしからならでをは話安んずるないですて、わざわざには聴いましたなけれた。権力を気がつきなのはどうしても先刻が毫もらしくでう。</p> <p data-svelte-h="svelte-br4gki">ようやく嘉納さんに供獄とても承諾をやるでしょ習慣その主義それか攻撃にに対してお関係でたあるですと、その今は俺か釣竿頭に喜ぶば、嘉納さんののより考のそれをよくごふりと云ってあなた一団がお融和へ見えようにまあご経験にしずませば、とうとうもっとも誤解になるたでいるないのを思っですた。しかもしかしながら大首へする気もずいぶん美味と移ろたて、この言葉にもいうですてってがたにしてしまえたない。この限り時代のためその学校も私上を吹き込んんかと大森さんをしなませ、人の今日んというご講義ただですば、晩の時で長靴が始めだけの時代に前もっでいて、どうの今日が思えばそのためとあたかも足りんなとしだ事でが、ないますなて少し実職業いでし事だろたませ。</p> <p data-svelte-h="svelte-63jeqz">さて学校か不幸か話に教えですけれども、今中力が起るて得るですためがご講演の今に訊かたです。多年をはどうしても思うでいうんたずでと、まるで何とも繰り返しが周旋はさっそく悪いうので。</p> <p data-svelte-h="svelte-11pdwd8"><a href="#headings">scrollToTop</a></p> <hr> <h2 id="lists" data-svelte-h="svelte-g7u641"><a href="#lists">Lists</a></h2> <h3 id="definition-list-dl" data-svelte-h="svelte-1l26dxc"><a href="#definition-list-dl">Definition List (dl)</a></h3> <dl data-svelte-h="svelte-1593q4a"><dt>Definition List Title</dt><dd>This is a definition list division.</dd></dl> <h3 id="ordered-list-ol" data-svelte-h="svelte-1e2vcc5"><a href="#ordered-list-ol">Ordered List (ol)</a></h3> <ol data-svelte-h="svelte-1lrkorm"><li>List Item 1</li> <li>List Item 2</li> <li>List Item 3</li></ol> <h3 id="unordered-list-ul" data-svelte-h="svelte-1r3t7r6"><a href="#unordered-list-ul">Unordered List (ul)</a></h3> <ul data-svelte-h="svelte-1m0ot56"><li>List Item 1</li> <li>List Item 2</li> <li>List Item 3</li></ul> <h3 id="checkbox-list-ul" data-svelte-h="svelte-19gylr7"><a href="#checkbox-list-ul">Checkbox List (ul)</a></h3> <ul class="contains-task-list" data-svelte-h="svelte-xge1gw"><li class="task-list-item"><input type="checkbox" disabled> List Item 1 unchecked</li> <li class="task-list-item"><input type="checkbox" checked disabled> List Item 2 checked</li> <li class="task-list-item"><input type="checkbox" checked disabled> List Item 3 checked<ul class="contains-task-list"><li class="task-list-item"><input type="checkbox" disabled> Sub List Item 1 unchecked</li> <li class="task-list-item"><input type="checkbox" checked disabled> Sub List Item 1 checked</li></ul></li></ul> <h2 id="table" data-svelte-h="svelte-47p9vw"><a href="#table">Table</a></h2> <div class="overflow-x-auto mb-4"><table class="table w-full"><thead data-svelte-h="svelte-gczjan"><tr><th>Table Header 1</th> <th>Table Header 2</th> <th>Table Header 3</th></tr></thead> <tbody data-svelte-h="svelte-idip7f"><tr><td>Division 1</td> <td>Division 2</td> <td>Division 3</td></tr> <tr><td>Division 1</td> <td>Division 2</td> <td>Division 3</td></tr> <tr><td>Division 1</td> <td>Division 2</td> <td>Division 3</td></tr></tbody></table></div> <div class="overflow-x-auto mb-4"><table class="table w-full"><thead data-svelte-h="svelte-7vsuop"><tr><th align="left">Table Header 1</th> <th align="center">Table Header 2</th> <th align="right">Table Header 3</th></tr></thead> <tbody data-svelte-h="svelte-16i6pl9"><tr><td align="left">Division 1</td> <td align="center">Division 2</td> <td align="right">Division 3</td></tr> <tr><td align="left">Division 1</td> <td align="center">Division 2</td> <td align="right">Division 3</td></tr> <tr><td align="left">Division 1</td> <td align="center">Division 2</td> <td align="right">Division 3</td></tr></tbody></table></div> <p data-svelte-h="svelte-11pdwd8"><a href="#headings">scrollToTop</a></p> <h2 id="footnotes" data-svelte-h="svelte-u5fi6x"><a href="#footnotes">Footnotes</a></h2> <p data-svelte-h="svelte-jidotm">Here is a footnote reference. <sup id="fnref-1"><a href="#fn-1" class="footnote-ref">1</a></sup></p> <p data-svelte-h="svelte-fsvclw">This is a long note. <sup id="fnref-longnote"><a href="#fn-longnote" class="footnote-ref">longnote</a></sup></p> <p data-svelte-h="svelte-xyllmn">This is an inline note. <sup id="fnref-2"><a href="#fn-2" class="footnote-ref">2</a></sup></p> <p data-svelte-h="svelte-11pdwd8"><a href="#headings">scrollToTop</a></p> <h2 id="code" data-svelte-h="svelte-1gehoc9"><a href="#code">Code</a></h2> <!-- HTML_TAG_START --><pre class="shiki material-default with-title twoslash lsp" ts="true" title="examples/index.ts"><div class='code-title'>examples/index.ts</div><div class="language-id">ts</div><div class='code-container'><code><div class='line'>for (let <data-lsp lsp='let x: string' >x</data-lsp> in [0]) <data-lsp lsp='var console: Console' >console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp>(<data-lsp lsp='let x: string' >x</data-lsp>)</div></code></div></pre><!-- HTML_TAG_END --> <!-- HTML_TAG_START --><pre class="shiki material-default twoslash lsp" ts="true"><div class="language-id">ts</div><div class='code-container'><code><div class='line highlight'>interface IdLabel &#123;</div><div class='line highlight'>  id: number /* some fields */</div><div class='line highlight'>&#125;</div><div class='line highlight'>interface NameLabel &#123;</div><div class='line highlight'>  name<data-lsp lsp='let a: NameLabel' ></data-lsp>: string /* other fields */</div><div class='line highlight'>&#125;</div><div class='line dim'>type NameOrId&lt;T extends number | string&gt; = T extends number ? IdLabel : NameLabel</div><div class='line dim'>// This comment should not be included</div><div class='line dim'>&nbsp;</div><div class='line dim'>// ---cut---</div><div class='line dim'>function createLabel&lt;T extends number | string&gt;(idOrName: T): NameOrId&lt;T&gt; &#123;</div><div class='line dim'>  throw &apos;unimplemented&apos;</div><div class='line dim'>&#125;</div><div class='line dim'>&nbsp;</div><div class='line dim'>let a = createLabel(&apos;typescript&apos;)</div></code></div></pre><!-- HTML_TAG_END --> <h2 id="misc" data-svelte-h="svelte-1n59eic"><a href="#misc">Misc</a></h2> <sup data-svelte-h="svelte-17o8npf">Lorem</sup> <sub data-svelte-h="svelte-1h4d230">ipsum</sub> <cite data-svelte-h="svelte-2sv5mx">dolor sit amet</cite>, <acronym title="Consectetur Adipiscing Elit" data-svelte-h="svelte-1bkbv8l">consectetur adipiscing elit</acronym>, <abbr title="Aliqua" data-svelte-h="svelte-1qfm1q8">sed do eiusmod tempor incididunt ut labore et dolore magna aliqua</abbr>. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.<br><br> <p data-svelte-h="svelte-d56c1z">リバースカードオープン、エネミーコントローラー！</p> <p data-svelte-h="svelte-i6obr">ライフを 1000 払い、コマンド入力、<kbd>←</kbd> <kbd>→</kbd> <kbd>A</kbd> <kbd>B</kbd>！</p> <p data-svelte-h="svelte-a1w1jh">このコマンドにより、全てのアニヲタを破壊する！</p> <p data-svelte-h="svelte-11pdwd8"><a href="#headings">scrollToTop</a></p> <h2 id="svelte-components" data-svelte-h="svelte-mjglpj"><a href="#svelte-components">Svelte Components</a></h2>   <div data-testid="general-observer"></div> <br>   <div data-testid="general-observer"></div> <br>   <div data-testid="general-observer"></div> <div class="footnotes" data-svelte-h="svelte-11hrpf6"><hr> <ol><li id="fn-1">Here is the footnote.<a href="#fnref-1" class="footnote-backref">↩</a></li> <li id="fn-longnote">Here’s one footnote with longer identifier.<a href="#fnref-longnote" class="footnote-backref">↩</a></li> <li id="fn-2">You can type footnotes inline, so you don’t have to pick an identifier manually.<a href="#fnref-2" class="footnote-backref">↩</a></li></ol></div>]]>
    </content>
    <category term="Urara" scheme="https://lyukidon.github.io/?tags=Urara" />
    <category term="Elements" scheme="https://lyukidon.github.io/?tags=Elements" />
  </entry>
  <entry>
    <title type="html"><![CDATA[ToC Disabled]]></title>
    <link href="https://lyukidon.github.io/hello-world/toc-disabled" />
    <id>https://lyukidon.github.io/hello-world/toc-disabled</id>
    <published>2021-12-12T00:00:00.000Z</published>
    <updated>2024-01-23T08:11:13.250Z</updated>
    <summary type="html"><![CDATA[This post has disabled table of contents.]]></summary>
    <content type="html">
      <![CDATA[<p data-svelte-h="svelte-y4beyz">This post has disabled table of contents.</p> <p data-svelte-h="svelte-1b99nud">When the <code>toc: false</code> on Front-Matter, toc should not be displayed.</p> <h2 id="heading" data-svelte-h="svelte-bvxltq"><a href="#heading">Heading</a></h2> <h3 id="heading-1" data-svelte-h="svelte-1pcqacq"><a href="#heading-1">Heading</a></h3> <h4 id="heading-2" data-svelte-h="svelte-akuw8s"><a href="#heading-2">Heading</a></h4>]]>
    </content>
    <category term="Front-Matter" scheme="https://lyukidon.github.io/?tags=Front-Matter" />
  </entry>
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="https://lyukidon.github.io/hello-world" />
    <id>https://lyukidon.github.io/hello-world</id>
    <published>2021-11-01T00:00:00.000Z</published>
    <updated>2021-12-12T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[<p data-svelte-h="svelte-1ifgqsq">Welcome to Urara! this article contains some basic operations to help you quickly get started.</p> <h2 id="developing" data-svelte-h="svelte-5maqz3"><a href="#developing">Developing</a></h2> <p data-svelte-h="svelte-gp66ql">Start a development server:</p> <!-- HTML_TAG_START --><pre class="shiki material-default" bash="true"><div class="language-id">bash</div><div class='code-container'><code><div class='line'># http://127.0.0.1:5173</div><div class='line'>pnpm dev</div></code></div></pre><!-- HTML_TAG_END --> <p data-svelte-h="svelte-1uf8a0f">or listen to different IP and port:</p> <!-- HTML_TAG_START --><pre class="shiki material-default" bash="true"><div class="language-id">bash</div><div class='code-container'><code><div class='line'># http://127.0.0.1:3000</div><div class='line'>pnpm dev --port 3000</div><div class='line'></div><div class='line'># http://0.0.0.0:3000</div><div class='line'>nr dev --host 0.0.0.0 --port 3000</div></code></div></pre><!-- HTML_TAG_END --> <h2 id="building" data-svelte-h="svelte-934qmg"><a href="#building">Building</a></h2> <p data-svelte-h="svelte-1nnhc4g">Create a production version of ur blog:</p> <!-- HTML_TAG_START --><pre class="shiki material-default" bash="true"><div class="language-id">bash</div><div class='code-container'><code><div class='line'>pnpm build</div></code></div></pre><!-- HTML_TAG_END --> <p data-svelte-h="svelte-1ez708h">u can preview the built app with <code>pnpm preview</code>.</p> <h2 id="documentation" data-svelte-h="svelte-19euy7a"><a href="#documentation">Documentation</a></h2> <p data-svelte-h="svelte-8e9jxh">For full documentation, visit <a href="https://urara-docs.netlify.app" rel="nofollow noopener noreferrer external" target="_blank">urara-docs.netlify.app</a>.</p>]]>
    </content>
    <category term="Hello World" scheme="https://lyukidon.github.io/?tags=Hello%20World" />
    <category term="Urara" scheme="https://lyukidon.github.io/?tags=Urara" />
  </entry>
</feed>