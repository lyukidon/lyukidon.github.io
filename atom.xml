<?xml version='1.0' encoding='utf-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://lyukidon.github.io/</id>
  <title><![CDATA[Home]]></title>
  <subtitle><![CDATA[Ryu Kidon Blog]]></subtitle>
  <icon>https://lyukidon.github.io/favicon.png</icon>
  <link href="https://lyukidon.github.io" />
  <link href="https://lyukidon.github.io/atom.xml" rel="self" type="application/atom+xml" />
  <updated>2024-07-08T13:06:30.830Z</updated>
  <author>
    <name><![CDATA[Ryu Kidon]]></name>
  </author>
  <category term="cv" scheme="https://lyukidon.github.io/?tags=cv" />
  <category term="morphology" scheme="https://lyukidon.github.io/?tags=morphology" />
  <category term="python" scheme="https://lyukidon.github.io/?tags=python" />
  <category term="정렬" scheme="https://lyukidon.github.io/?tags=%EC%A0%95%EB%A0%AC" />
  <category term="array" scheme="https://lyukidon.github.io/?tags=array" />
  <category term="algorithm" scheme="https://lyukidon.github.io/?tags=algorithm" />
  <category term="prime" scheme="https://lyukidon.github.io/?tags=prime" />
  <category term="netlify" scheme="https://lyukidon.github.io/?tags=netlify" />
  <category term="date" scheme="https://lyukidon.github.io/?tags=date" />
  <category term="react" scheme="https://lyukidon.github.io/?tags=react" />
  <category term="typescript" scheme="https://lyukidon.github.io/?tags=typescript" />
  <category term="tailwind" scheme="https://lyukidon.github.io/?tags=tailwind" />
  <category term="error" scheme="https://lyukidon.github.io/?tags=error" />
  <category term="nestjs" scheme="https://lyukidon.github.io/?tags=nestjs" />
  <category term="cors" scheme="https://lyukidon.github.io/?tags=cors" />
  <category term="test" scheme="https://lyukidon.github.io/?tags=test" />
  <category term="redis" scheme="https://lyukidon.github.io/?tags=redis" />
  <category term="backend" scheme="https://lyukidon.github.io/?tags=backend" />
  <category term="sorting" scheme="https://lyukidon.github.io/?tags=sorting" />
  <category term="formData" scheme="https://lyukidon.github.io/?tags=formData" />
  <category term="docker" scheme="https://lyukidon.github.io/?tags=docker" />
  <category term="webrtc" scheme="https://lyukidon.github.io/?tags=webrtc" />
  <category term="KPT" scheme="https://lyukidon.github.io/?tags=KPT" />
  <category term="TypeORM" scheme="https://lyukidon.github.io/?tags=TypeORM" />
  <category term="typeorm" scheme="https://lyukidon.github.io/?tags=typeorm" />
  <category term="regexp" scheme="https://lyukidon.github.io/?tags=regexp" />
  <category term="실행 컨텍스트" scheme="https://lyukidon.github.io/?tags=%EC%8B%A4%ED%96%89%20%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8" />
  <category term="closure" scheme="https://lyukidon.github.io/?tags=closure" />
  <category term="Relation" scheme="https://lyukidon.github.io/?tags=Relation" />
  <category term="GraphQL" scheme="https://lyukidon.github.io/?tags=GraphQL" />
  <category term="this" scheme="https://lyukidon.github.io/?tags=this" />
  <category term="Dependency Injection" scheme="https://lyukidon.github.io/?tags=Dependency%20Injection" />
  <category term="jest" scheme="https://lyukidon.github.io/?tags=jest" />
  <category term="express-session" scheme="https://lyukidon.github.io/?tags=express-session" />
  <category term="3계층 아키텍처" scheme="https://lyukidon.github.io/?tags=3%EA%B3%84%EC%B8%B5%20%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98" />
  <category term="Getting Started" scheme="https://lyukidon.github.io/?tags=Getting%20Started" />
  <category term="webpack" scheme="https://lyukidon.github.io/?tags=webpack" />
  <category term="babel" scheme="https://lyukidon.github.io/?tags=babel" />
  <category term="module bundler" scheme="https://lyukidon.github.io/?tags=module%20bundler" />
  <category term="javascript compiler" scheme="https://lyukidon.github.io/?tags=javascript%20compiler" />
  <category term="ejs" scheme="https://lyukidon.github.io/?tags=ejs" />
  <category term="passport" scheme="https://lyukidon.github.io/?tags=passport" />
  <category term="passport-local" scheme="https://lyukidon.github.io/?tags=passport-local" />
  <category term="Error" scheme="https://lyukidon.github.io/?tags=Error" />
  <category term="Google Console" scheme="https://lyukidon.github.io/?tags=Google%20Console" />
  <category term="Firewall" scheme="https://lyukidon.github.io/?tags=Firewall" />
  <category term="express" scheme="https://lyukidon.github.io/?tags=express" />
  <category term="jwt" scheme="https://lyukidon.github.io/?tags=jwt" />
  <category term="token" scheme="https://lyukidon.github.io/?tags=token" />
  <category term="refresh token" scheme="https://lyukidon.github.io/?tags=refresh%20token" />
  <category term="http_status_code" scheme="https://lyukidon.github.io/?tags=http_status_code" />
  <category term="mysql" scheme="https://lyukidon.github.io/?tags=mysql" />
  <category term="prisma" scheme="https://lyukidon.github.io/?tags=prisma" />
  <category term="DDL" scheme="https://lyukidon.github.io/?tags=DDL" />
  <category term="bug_fix" scheme="https://lyukidon.github.io/?tags=bug_fix" />
  <category term="Introduction" scheme="https://lyukidon.github.io/?tags=Introduction" />
  <category term="mongodb" scheme="https://lyukidon.github.io/?tags=mongodb" />
  <category term="mongoose" scheme="https://lyukidon.github.io/?tags=mongoose" />
  <category term="Urara" scheme="https://lyukidon.github.io/?tags=Urara" />
  <category term="Elements" scheme="https://lyukidon.github.io/?tags=Elements" />
  <category term="Front-Matter" scheme="https://lyukidon.github.io/?tags=Front-Matter" />
  <category term="Hello World" scheme="https://lyukidon.github.io/?tags=Hello%20World" />
  <entry>
    <title type="html"><![CDATA[모폴로지(Morphology) 연산]]></title>
    <link href="https://lyukidon.github.io/Javascript/TIL/CV/morphology" />
    <id>https://lyukidon.github.io/Javascript/TIL/CV/morphology</id>
    <published>2024-06-05T00:00:00.000Z</published>
    <updated>2024-06-05T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[<p data-svelte-h="svelte-8awkk1">참고: <a href="https://velog.io/@kansun12/%EC%BB%B4%ED%93%A8%ED%84%B0%EB%B9%84%EC%A0%84-%EC%B9%A8%EC%8B%9D%EA%B3%BC-%ED%8C%BD%EC%B0%BD%EC%9D%98-%EB%AA%A8%ED%8F%B4%EB%A1%9C%EC%A7%80-%EC%98%81%EC%83%81%EC%B2%98%EB%A6%AC" rel="nofollow noopener noreferrer external" target="_blank">https://velog.io/@kansun12/컴퓨터비전-침식과-팽창의-모폴로지-영상처리</a></p> <p data-svelte-h="svelte-q0rxyi">그림으로 설명이 잘되어있으니, 필요할 때 확인</p> <h1 id="모폴로지morphology" data-svelte-h="svelte-1uxoqzf"><a href="#모폴로지morphology">모폴로지(Morphology)</a></h1> <ul data-svelte-h="svelte-1kqmjvl"><li><p>한글: 형태론</p></li> <li><p>한자: 形態論</p></li> <li><p>생물의 구조에 대해서 파악하는 분야이다. 수학적 모폴로지는 이미지를 단순한 형태로 변형시키는 것을 말한다.</p></li> <li><p>종류는 <code>침식</code>, <code>팽창</code>, <code>열림</code>, <code>닫힘</code>, <code>그레디언트</code>, <code>탑햇</code>, <code>블랙햇</code>이 있다.</p></li></ul> <h2 id="연산-종류" data-svelte-h="svelte-mxdpav"><a href="#연산-종류">연산 종류</a></h2> <ol data-svelte-h="svelte-81orrw"><li>침식(Erosion)</li></ol> <ul data-svelte-h="svelte-3azjmr"><li>구조화 요소가 겹치지 않으면 0, 겹치면 1로 변경</li></ul> <ol start="2" data-svelte-h="svelte-1bxm533"><li>팽창(Dilation)</li></ol> <ul data-svelte-h="svelte-12hwjzi"><li>기준점과 이미지가 모두 1인 상태로 겹치는 경우 기준점 위치의 그림은 1, 그렇지 않은 경우 0</li></ul> <ol start="3" data-svelte-h="svelte-1udz4u0"><li>열림(Opening)</li></ol> <ul data-svelte-h="svelte-1bxvk85"><li>침식 연산 -&gt; 팽창 연산</li> <li>주변보다 밝은 노이즈를 제거해 줌</li> <li>맞닿아있는 것처럼 보이는 독립개체를 분리하거나 돌출된 모양 제거</li></ul> <ol start="4" data-svelte-h="svelte-oqdx75"><li>닫힘(Closing)</li></ol> <ul data-svelte-h="svelte-z2kww5"><li>팽창 연산 -&gt; 침식 연산</li> <li>주변보다 어두운 노이즈 제거</li> <li>끊어진 개체를 연결하거나 구멍을 메우는데 효과적</li></ul> <ol start="5" data-svelte-h="svelte-rcd8di"><li>그레디언트(Gradient)</li></ol> <ul data-svelte-h="svelte-apwqyn"><li>팽창 - 침식</li> <li>테두리를 얻어내는 방법</li></ul> <ol start="6" data-svelte-h="svelte-nmgmgl"><li>탑햇(Top Hat)</li></ol> <ul data-svelte-h="svelte-er0rfx"><li>원본 사진 - 열림 연산</li> <li>밝은 영역 강조</li></ul> <ol start="7" data-svelte-h="svelte-15hudu"><li>블랙햇(Black Hat)</li></ol> <ul data-svelte-h="svelte-1wpt8sf"><li>닫힘 - 원본</li> <li>어두운 영역 강조</li></ul>]]>
    </content>
    <category term="cv" scheme="https://lyukidon.github.io/?tags=cv" />
    <category term="morphology" scheme="https://lyukidon.github.io/?tags=morphology" />
  </entry>
  <entry>
    <title type="html"><![CDATA[선택 정렬]]></title>
    <link href="https://lyukidon.github.io/Javascript/Algorithm/sorting/selection" />
    <id>https://lyukidon.github.io/Javascript/Algorithm/sorting/selection</id>
    <published>2024-06-02T00:00:00.000Z</published>
    <updated>2024-06-05T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[<p data-svelte-h="svelte-1wlifqk">파이선으로 작성한 선택정렬</p> <!-- HTML_TAG_START --><pre class="shiki material-default" py="true"><div class="language-id">py</div><div class='code-container'><code><div class='line'>  def selectionSort(arr):</div><div class='line'>      tmp = list(arr);</div><div class='line'></div><div class='line'>      for i in range(0,len(tmp)):</div><div class='line'>          minIdx = i;</div><div class='line'>          for j in range(i+1, len(tmp)):</div><div class='line'>              if (tmp[i] &lt; tmp[j]):</div><div class='line'>                  minIdx = i;</div><div class='line'>              else:</div><div class='line'>                  minIdx = j;</div><div class='line'>          if (minIdx != i):</div><div class='line'>              minNum = tmp[minIdx];</div><div class='line'>              tmp.pop(minIdx);</div><div class='line'>              tmp.insert(i, minNum);</div><div class='line'>      return tmp;</div></code></div></pre><!-- HTML_TAG_END -->]]>
    </content>
    <category term="python" scheme="https://lyukidon.github.io/?tags=python" />
    <category term="정렬" scheme="https://lyukidon.github.io/?tags=%EC%A0%95%EB%A0%AC" />
  </entry>
  <entry>
    <title type="html"><![CDATA[평면도의 벽을 확인하는 방법]]></title>
    <link href="https://lyukidon.github.io/Javascript/TIL/CV/findWall" />
    <id>https://lyukidon.github.io/Javascript/TIL/CV/findWall</id>
    <published>2024-06-02T00:00:00.000Z</published>
    <updated>2024-06-05T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[<p data-svelte-h="svelte-1g1p6s9">기존의 벽을 확인하는 방법은 다음과 같았다.</p> <ol data-svelte-h="svelte-1c0rdjk"><li><p>평균값을 이용</p> <ul><li>색상의 평균값을 이용해서, 데이터를 계산하고, 평균값보다 높은 경우 데이터를 255로 변경한다.</li></ul></li> <li><p>이진화</p> <ul><li>특정 값 이상의 색을 모두 255로 만들어, 흑과 백만 남긴다.</li></ul></li> <li><p>DFS (깊이 우선 탐색)</p> <ul><li>검은 점이 이어진 부분들을 모두 찾아 벽을 찾으려고 했으나, 1개의 선으로 이어지지 않은 그림의 경우는 사용할 수 없는 문제점이 존재</li></ul></li></ol> <p data-svelte-h="svelte-1tevhlc">그러나 위와 같은 방법은 어떤 그림에서는 사용할 수 없는 방법이라, 다음과 같은 방법으로 변경</p> <ol data-svelte-h="svelte-t8ojb8"><li><p>색상 제거</p> <ul><li>평균값 =&gt; 중앙값을 사용해보기</li></ul></li> <li><p>이진화</p></li> <li><p>그레이 스케일</p> <ul><li>이미지를 회색으로 만들기 위해서는 (r+g+b)/3 을 해주면 된다.</li></ul></li> <li><p>모폴로지 그레디언트</p> <ul><li>경계 이미지를 추출하는 방법이다.</li></ul></li> <li><p>adaptive threshold</p> <ul><li>잡영(noise) 제거</li></ul></li> <li><p>모폴로지 클로즈</p> <ul><li>끊어진 개체를 연결하거나 구멍을 채우는 연산 작업이다.</li></ul></li></ol> <p data-svelte-h="svelte-1gvrrre">참고: <a href="https://d2.naver.com/helloworld/8344782" rel="nofollow noopener noreferrer external" target="_blank">딥러닝과 OpenCV를 활용해 사진 속 글자 검출하기</a></p>]]>
    </content>
    <category term="cv" scheme="https://lyukidon.github.io/?tags=cv" />
  </entry>
  <entry>
    <title type="html"><![CDATA[침식(Erosion) 구현하기]]></title>
    <link href="https://lyukidon.github.io/Javascript/TIL/CV/morphology/erosion_building" />
    <id>https://lyukidon.github.io/Javascript/TIL/CV/morphology/erosion_building</id>
    <published>2024-06-02T00:00:00.000Z</published>
    <updated>2024-06-05T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[<p data-svelte-h="svelte-1toadej">침식을 구현하기 위해서는 사진과 구조화 요소가 필요하다.</p> <p data-svelte-h="svelte-gwf2nh">구조화 요소의 예시는 다음과 같다.</p> <!-- HTML_TAG_START --><pre class="shiki material-default" js="true"><div class="language-id">js</div><div class='code-container'><code><div class='line'>[ </div><div class='line'>  1,1,1,</div><div class='line'>  1,1,1,</div><div class='line'>  1,1,1</div><div class='line'>]</div></code></div></pre><!-- HTML_TAG_END --> <p data-svelte-h="svelte-1k4cvm1">이렇게 했을 때, 기준점을 0으로 만들어줄 필요가 있다.</p> <p data-svelte-h="svelte-d85cq">중앙이 기준점이면</p> <!-- HTML_TAG_START --><pre class="shiki material-default"><div class='code-container'><code><div class='line'>[</div><div class='line'>  (-1, -1), (0, -1), (1, -1),</div><div class='line'>  (-1, 0), (0, 0), (1, 0),</div><div class='line'>  (-1, 1), (0, 1), (1, 1),</div><div class='line'>]</div></code></div></pre><!-- HTML_TAG_END -->]]>
    </content>
    <category term="cv" scheme="https://lyukidon.github.io/?tags=cv" />
    <category term="morphology" scheme="https://lyukidon.github.io/?tags=morphology" />
  </entry>
  <entry>
    <title type="html"><![CDATA[어떤 수가 주어졌을 때, 배열 내의 어떤 항목 두 개를 합쳐야 해당 수가 되는지 찾으시오]]></title>
    <link href="https://lyukidon.github.io/Javascript/Algorithm/array/두_개를_더해서_수_만들기" />
    <id>https://lyukidon.github.io/Javascript/Algorithm/array/두_개를_더해서_수_만들기</id>
    <published>2024-05-18T00:00:00.000Z</published>
    <updated>2024-05-18T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[<!-- HTML_TAG_START --><pre class="shiki material-default" js="true"><div class="language-id">js</div><div class='code-container'><code><div class='line'>const a = [1,2,3,4,5]</div><div class='line'>const b = 9</div><div class='line'></div><div class='line'>function sum(arr, weight)&#123;</div><div class='line'>  for(let i=0; i&lt;arr.length; i++)&#123;</div><div class='line'>    for (let j=i+1; j&lt;arr.length; j++)&#123;</div><div class='line'>      if (arr[i] + arr[j] === weight)&#123;</div><div class='line'>        return [arr[i], arr[j]]</div><div class='line'>      &#125;</div><div class='line'>    &#125;</div><div class='line'>  &#125;</div><div class='line'>  return -1</div><div class='line'>&#125;</div><div class='line'></div><div class='line'>sum(a, b)</div></code></div></pre><!-- HTML_TAG_END --> <p data-svelte-h="svelte-eoys7i">시간복잡도: O(n^2)공간복잡도: O(1)</p> <p data-svelte-h="svelte-1xmobyh">공간복잡도를 늘리는 대신, 시간 복잡도를 줄일 수 있다.</p> <!-- HTML_TAG_START --><pre class="shiki material-default" js="true"><div class="language-id">js</div><div class='code-container'><code><div class='line'>const a = [1,2,3,4,5]</div><div class='line'>const b = 9</div><div class='line'></div><div class='line'>function sum(arr, weight)&#123;</div><div class='line'>  const hash = &#123;&#125;</div><div class='line'></div><div class='line'>  for (let i=0; i&lt;arr.length; i++)&#123;</div><div class='line'>    const currentElement = arr[i];</div><div class='line'>    const difference = weight - currentElement</div><div class='line'></div><div class='line'>    if(hash[currentElement])&#123;</div><div class='line'>      return [hash[currentElement], arr[i]];</div><div class='line'>    &#125;else&#123;</div><div class='line'>      hash[difference] = i+1</div><div class='line'>    &#125;</div><div class='line'>  &#125;</div><div class='line'>  return -1</div><div class='line'>&#125;</div><div class='line'></div><div class='line'>sum(a, b)</div></code></div></pre><!-- HTML_TAG_END -->]]>
    </content>
    <category term="array" scheme="https://lyukidon.github.io/?tags=array" />
    <category term="algorithm" scheme="https://lyukidon.github.io/?tags=algorithm" />
  </entry>
  <entry>
    <title type="html"><![CDATA[소인수분해]]></title>
    <link href="https://lyukidon.github.io/Javascript/Algorithm/number/prime" />
    <id>https://lyukidon.github.io/Javascript/Algorithm/number/prime</id>
    <published>2024-05-15T00:00:00.000Z</published>
    <updated>2024-05-15T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[<!-- HTML_TAG_START --><pre class="shiki material-default" js="true"><div class="language-id">js</div><div class='code-container'><code><div class='line'>function primeFactors(n)&#123;</div><div class='line'>  const result = new Set()</div><div class='line'>  // 2로 나뉘지 않을 때까지 나눠주기</div><div class='line'>  while (n%2 === 0) &#123;</div><div class='line'>    if (result.at(-1) !== 2)&#123;</div><div class='line'>      result.add(2)</div><div class='line'>    &#125;</div><div class='line'>    n = n/2</div><div class='line'>  &#125;</div><div class='line'>  // n은 이제 홀수이다. 홀수만 확인하기 위해서 2씩 증가시킨다.</div><div class='line'>  // √n까지만 확인하면 된다.</div><div class='line'>  for (let i=3; i*i&lt;=n; i=i+2)&#123;</div><div class='line'>    while (n%i === 0)&#123;</div><div class='line'>      result.add(i)</div><div class='line'>      n = n/i</div><div class='line'>    &#125;</div><div class='line'>  &#125;</div><div class='line'></div><div class='line'>  // 마지막 n이 2보다 큰 소수인 경우, result에 추가해준다.</div><div class='line'>  if (n&gt;2)&#123;</div><div class='line'>    result.add(n)</div><div class='line'>  &#125;</div><div class='line'></div><div class='line'>  return result</div><div class='line'>&#125;</div></code></div></pre><!-- HTML_TAG_END -->]]>
    </content>
    <category term="prime" scheme="https://lyukidon.github.io/?tags=prime" />
    <category term="algorithm" scheme="https://lyukidon.github.io/?tags=algorithm" />
  </entry>
  <entry>
    <title type="html"><![CDATA[소수 확인하기]]></title>
    <link href="https://lyukidon.github.io/Javascript/Algorithm/number/소수" />
    <id>https://lyukidon.github.io/Javascript/Algorithm/number/소수</id>
    <published>2024-05-15T00:00:00.000Z</published>
    <updated>2024-05-15T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[<p data-svelte-h="svelte-1ux6qds">소수임을 확인하기 위해서는 숫자 n을 2부터 n-1까지 나누어보면 된다.</p> <!-- HTML_TAG_START --><pre class="shiki material-default" js="true"><div class="language-id">js</div><div class='code-container'><code><div class='line'>function isPrime(n)&#123;</div><div class='line'>  if (n&lt;=1) return false</div><div class='line'></div><div class='line'>  for (let i=2; i&lt;n; i++)&#123;</div><div class='line'>    if (n%i === 0) return false</div><div class='line'>  &#125;</div><div class='line'></div><div class='line'>  return true</div><div class='line'>&#125;</div></code></div></pre><!-- HTML_TAG_END --> <p data-svelte-h="svelte-yb1owv">위의 식의 시간 복잡도는 O(n)이다.</p> <p data-svelte-h="svelte-15yskne">위의 식을 개선할 수 있는 조건은 다음과 같다.</p> <ul data-svelte-h="svelte-188vp1r"><li>√n까지만 확인하면 된다.</li> <li>소수는 6k±1의 형태를 띄고 있다.</li></ul> <p data-svelte-h="svelte-rvnv38">개선해보자</p> <!-- HTML_TAG_START --><pre class="shiki material-default" js="true"><div class="language-id">js</div><div class='code-container'><code><div class='line'>function isPrime(n)&#123;</div><div class='line'>  if (n&lt;=1) return false;</div><div class='line'>  if (n&lt;=3) return true;</div><div class='line'></div><div class='line'>  if (n%2===0 || n%3===0) return false</div><div class='line'></div><div class='line'>  for (let i=5; i*i&lt;n; i=i+6)&#123;</div><div class='line'>    if (n%i === 0 || n%(i+2) === 0) return false</div><div class='line'>  &#125;</div><div class='line'></div><div class='line'>  return true</div><div class='line'>&#125;</div></code></div></pre><!-- HTML_TAG_END -->]]>
    </content>
    <category term="prime" scheme="https://lyukidon.github.io/?tags=prime" />
    <category term="algorithm" scheme="https://lyukidon.github.io/?tags=algorithm" />
  </entry>
  <entry>
    <title type="html"><![CDATA[큰 수의 나머지 찾기(Modular Arithmetic, 모듈러 산술, 합동식)]]></title>
    <link href="https://lyukidon.github.io/Javascript/Algorithm/number/큰_수의_나머지" />
    <id>https://lyukidon.github.io/Javascript/Algorithm/number/큰_수의_나머지</id>
    <published>2024-05-15T00:00:00.000Z</published>
    <updated>2024-05-15T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[<ul><li>합동식 (모듈러 산술, Modular Arthmetic)<!-- HTML_TAG_START --><pre class="shiki material-default" js="true"><div class="language-id">js</div><div class='code-container'><code><div class='line'>c % m = (a * b) % m</div><div class='line'>c % m = [(a % m)(b % m)] % m</div></code></div></pre><!-- HTML_TAG_END --></li></ul> <p data-svelte-h="svelte-t2xrk6">위의 합동식을 이용해서, 큰 수의 나머지를 구하는 알고리즘</p> <!-- HTML_TAG_START --><pre class="shiki material-default" js="true"><div class="language-id">js</div><div class='code-container'><code><div class='line'>/**</div><div class='line'> * base: 밑</div><div class='line'> * exponent: 지수</div><div class='line'> * modulus: 나누는 수</div><div class='line'> */</div><div class='line'>function modular(base, exponent, modulus)&#123;</div><div class='line'>  if (modulus === 1) return 0;</div><div class='line'>  let value = 1;</div><div class='line'>  for (let i=0; i&lt;exponent; i++)&#123;</div><div class='line'>    value = (value * base) % modulus;</div><div class='line'>  &#125;</div><div class='line'>  return value;</div><div class='line'>&#125;</div></code></div></pre><!-- HTML_TAG_END -->]]>
    </content>
    <category term="algorithm" scheme="https://lyukidon.github.io/?tags=algorithm" />
  </entry>
  <entry>
    <title type="html"><![CDATA[Canvas 데이터 처리하기]]></title>
    <link href="https://lyukidon.github.io/Javascript/TIL/이미지_처리/canvas에서_이미지_수정" />
    <id>https://lyukidon.github.io/Javascript/TIL/이미지_처리/canvas에서_이미지_수정</id>
    <published>2024-05-15T00:00:00.000Z</published>
    <updated>2024-05-15T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[<ul data-svelte-h="svelte-13lunf8"><li>html</li></ul> <!-- HTML_TAG_START --><pre class="shiki material-default" html="true"><div class="language-id">html</div><div class='code-container'><code><div class='line'>&lt;input type="file" id="fileInput" name="file" /&gt;</div><div class='line'>&lt;img id="imageSrc" alt="No Image" /&gt;</div><div class='line'>&lt;canvas id="canvasOutput"&gt;&lt;/canvas&gt;</div><div class='line'>&lt;canvas id="canvasEdit"&gt;&lt;/canvas&gt;</div></code></div></pre><!-- HTML_TAG_END --> <ul data-svelte-h="svelte-gew7im"><li>script</li></ul> <!-- HTML_TAG_START --><pre class="shiki material-default" js="true"><div class="language-id">js</div><div class='code-container'><code><div class='line'>const imgElement = document.querySelector("img#imageSrc");</div><div class='line'>const inputElement = document.getElementById("fileInput");</div><div class='line'></div><div class='line'>// 이미지 넣기</div><div class='line'>inputElement.addEventListener(</div><div class='line'>  "change",</div><div class='line'>  e =&gt; &#123;</div><div class='line'>    imgElement.src = URL.createObjectURL(e.target.files[0]);</div><div class='line'>  &#125;,</div><div class='line'>  false</div><div class='line'>);</div></code></div></pre><!-- HTML_TAG_END -->]]>
    </content>
    <category term="cv" scheme="https://lyukidon.github.io/?tags=cv" />
  </entry>
  <entry>
    <title type="html"><![CDATA[Netlify로 배포 시, React Router 에러]]></title>
    <link href="https://lyukidon.github.io/Javascript/TIL/react/netlify_error" />
    <id>https://lyukidon.github.io/Javascript/TIL/react/netlify_error</id>
    <published>2024-05-01T00:00:00.000Z</published>
    <updated>2024-05-01T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[<p data-svelte-h="svelte-xaep35">React Router 를 사용 시 Netlify에서 <code>Page Not Found</code> 오류가 발생하는 경우</p> <p data-svelte-h="svelte-1xc8gp"><code>public</code> 디렉터리에 <code>_redirect</code> 파일을 생성 후, <code>/* /index.html 200</code>를 파일 내에 추가하면 문제가 해결된다.</p>]]>
    </content>
    <category term="netlify" scheme="https://lyukidon.github.io/?tags=netlify" />
  </entry>
  <entry>
    <title type="html"><![CDATA[Typescript에서 시간 계산하는 방법]]></title>
    <link href="https://lyukidon.github.io/Javascript/calculating_time" />
    <id>https://lyukidon.github.io/Javascript/calculating_time</id>
    <published>2024-05-01T00:00:00.000Z</published>
    <updated>2024-05-01T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[<p data-svelte-h="svelte-zfc9i8">Date Object의 경우, +와 -연산을 할 수 있다.</p> <!-- HTML_TAG_START --><pre class="shiki material-default" js="true"><div class="language-id">js</div><div class='code-container'><code><div class='line'>new Date(time1) - newDate(time2)</div></code></div></pre><!-- HTML_TAG_END --> <p data-svelte-h="svelte-1qszhlf">계산을 하게 되면 millisecond로 나오게 된다.</p> <p data-svelte-h="svelte-y168xb">하지만 TypeScript의 경우는 아래와 같은 오류가 난다.</p> <p data-svelte-h="svelte-pz9s9j"><code>The left-hand side of an arithmetic operation must be of type &#39;any&#39;, &#39;number&#39;, &#39;bigint&#39; or an enum type.</code></p> <p data-svelte-h="svelte-ivbi0c">이유는 Object끼리 연산하기 때문인데, 위의 코드를 아래와 같이 바꾸면 작동한다.</p> <!-- HTML_TAG_START --><pre class="shiki material-default" js="true"><div class="language-id">js</div><div class='code-container'><code><div class='line'>new Date(time1).valueOf() - newDate(time2).valueOf()</div></code></div></pre><!-- HTML_TAG_END -->]]>
    </content>
    <category term="date" scheme="https://lyukidon.github.io/?tags=date" />
  </entry>
  <entry>
    <title type="html"><![CDATA[Redux Reducer 작성하기]]></title>
    <link href="https://lyukidon.github.io/Javascript/TIL/react/redux_reducers" />
    <id>https://lyukidon.github.io/Javascript/TIL/react/redux_reducers</id>
    <published>2024-04-30T00:00:00.000Z</published>
    <updated>2024-04-30T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[]]>
    </content>
    <category term="react" scheme="https://lyukidon.github.io/?tags=react" />
    <category term="typescript" scheme="https://lyukidon.github.io/?tags=typescript" />
    <category term="tailwind" scheme="https://lyukidon.github.io/?tags=tailwind" />
    <category term="error" scheme="https://lyukidon.github.io/?tags=error" />
  </entry>
  <entry>
    <title type="html"><![CDATA[]]></title>
    <link href="https://lyukidon.github.io/Javascript/TIL/react/how_to_store_jwt" />
    <id>https://lyukidon.github.io/Javascript/TIL/react/how_to_store_jwt</id>
    <published>2024-04-24T00:00:00.000Z</published>
    <updated>2024-04-24T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[]]>
    </content>
    <category term="nestjs" scheme="https://lyukidon.github.io/?tags=nestjs" />
    <category term="react" scheme="https://lyukidon.github.io/?tags=react" />
    <category term="cors" scheme="https://lyukidon.github.io/?tags=cors" />
  </entry>
  <entry>
    <title type="html"><![CDATA[React CORS Error와 Proxy Server]]></title>
    <link href="https://lyukidon.github.io/Javascript/TIL/react/proxy_server" />
    <id>https://lyukidon.github.io/Javascript/TIL/react/proxy_server</id>
    <published>2024-04-24T00:00:00.000Z</published>
    <updated>2024-04-24T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[<p>React에서 로그인을 하려고 하니 자꾸 에러가 났다.<img src="image.png" alt="alt text" class="rounded-lg my-2" loading="lazy" decoding="async"></p> <p data-svelte-h="svelte-13axydx">NestJS의 cors option을 설정해도 같은 문제가 계속 발생한다.</p> <p data-svelte-h="svelte-1o0907r">이러한 경우, proxy server를 통해서 문제를 해결한다.</p> <p data-svelte-h="svelte-1urq1d3">통신 과정은 다음과 같다.</p> <!-- HTML_TAG_START --><pre class="shiki material-default"><div class='code-container'><code><div class='line'>┌─────────┐   →   ┌───────────┐</div><div class='line'>│ browser │   ←   │ BE-server │</div><div class='line'>└─────────┘       └───────────┘</div></code></div></pre><!-- HTML_TAG_END --> <p data-svelte-h="svelte-cqsylx">브라우저가 통신하는 과정에서 BE가 browser의 요청을 외부 API 요청으로 확인해, cookie 전송 요청을 거부하는 것이다.</p> <p data-svelte-h="svelte-1puf7g6">Proxy server를 생성하는 경우 다음과 같이 통신을 하게 된다.</p> <!-- HTML_TAG_START --><pre class="shiki material-default"><div class='code-container'><code><div class='line'>┌─────────┐      ┌───────────┐</div><div class='line'>│ browser │      │ BE-server │</div><div class='line'>└─────────┘      └───────────┘</div><div class='line'>    ↑↓                ↑↓</div><div class='line'>┌────────────────────────────┐</div><div class='line'>│       Proxy-server         │</div><div class='line'>└────────────────────────────┘</div></code></div></pre><!-- HTML_TAG_END --> <p data-svelte-h="svelte-192bzpl">설정하는 방법은 두 가지가 있다.</p> <ol data-svelte-h="svelte-4htmvu"><li>CRA를 사용하는 경우, package.json에 <code>&quot;proxy&quot;:&quot;https://www.server.com&quot;</code>를  추가한다.</li> <li>http-proxy-middleware 라이브러리를 사용한다.</li></ol>]]>
    </content>
    <category term="nestjs" scheme="https://lyukidon.github.io/?tags=nestjs" />
    <category term="react" scheme="https://lyukidon.github.io/?tags=react" />
    <category term="cors" scheme="https://lyukidon.github.io/?tags=cors" />
  </entry>
  <entry>
    <title type="html"><![CDATA[Test Code 모듈 추가 시, 확인할 것]]></title>
    <link href="https://lyukidon.github.io/Javascript/TIL/nestjs/test/add_provider" />
    <id>https://lyukidon.github.io/Javascript/TIL/nestjs/test/add_provider</id>
    <published>2024-04-23T00:00:00.000Z</published>
    <updated>2024-04-23T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[<p data-svelte-h="svelte-1y7r3dn">test code 작성 시, 모듈 추가</p> <p><img src="image-1.png" alt="alt text" class="rounded-lg my-2" loading="lazy" decoding="async"></p> <ol data-svelte-h="svelte-ouzq10"><li>상단에 변수 선언</li> <li>provide: Service Class로 작성</li> <li>상단 선언한 변수에 모듈 저장</li></ol>]]>
    </content>
    <category term="nestjs" scheme="https://lyukidon.github.io/?tags=nestjs" />
    <category term="test" scheme="https://lyukidon.github.io/?tags=test" />
  </entry>
  <entry>
    <title type="html"><![CDATA[NestJS에서 Redis 연결하기]]></title>
    <link href="https://lyukidon.github.io/Javascript/TIL/redis/nestjs" />
    <id>https://lyukidon.github.io/Javascript/TIL/redis/nestjs</id>
    <published>2024-04-22T00:00:00.000Z</published>
    <updated>2024-04-22T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[<ul><li><p data-svelte-h="svelte-ps6z27">redis.service.ts</p> <!-- HTML_TAG_START --><pre class="shiki material-default" ts="true"><div class="language-id">ts</div><div class='code-container'><code><div class='line'>import &#123; Injectable, OnModuleInit, OnModuleDestroy &#125; from "@nestjs/common";</div><div class='line'>import Redis from "ioredis";</div><div class='line'>import &#123; ConfigService &#125; from "@nestjs/config";</div><div class='line'></div><div class='line'>@Injectable()</div><div class='line'>export class RedisService implements OnModuleInit, OnModuleDestroy &#123;</div><div class='line'>  private redisClient: Redis;</div><div class='line'>  constructor(private readonly configService: ConfigService) &#123;</div><div class='line'>    this.redisClient = new Redis(&#123;</div><div class='line'>      host: this.configService.get&lt;string&gt;("REDIS_HOST"),</div><div class='line'>      port: this.configService.get&lt;number&gt;("REDIS_PORT"),</div><div class='line'>      password: this.configService.get&lt;string&gt;("REDIS_PASSWORD")</div><div class='line'>    &#125;);</div><div class='line'>  &#125;</div><div class='line'>  onModuleInit() &#123;</div><div class='line'>    this.redisClient.on("connect", () =&gt; &#123;</div><div class='line'>      console.log("Connected to Redis");</div><div class='line'>    &#125;);</div><div class='line'>  &#125;</div><div class='line'>  onModuleDestroy() &#123;</div><div class='line'>    this.redisClient.disconnect();</div><div class='line'>  &#125;</div><div class='line'>  get client(): Redis &#123;</div><div class='line'>    return this.redisClient;</div><div class='line'>  &#125;</div><div class='line'>&#125;</div></code></div></pre><!-- HTML_TAG_END --></li> <li data-svelte-h="svelte-1qkxwy5"><p>사용</p> <ol><li>사용하고자 하는 모듈의 imports에 추가</li> <li><code>this.redisService.client</code>로 사용하면 <code>this.redisClient</code>를 받을 수 있음</li></ol></li></ul>]]>
    </content>
    <category term="redis" scheme="https://lyukidon.github.io/?tags=redis" />
  </entry>
  <entry>
    <title type="html"><![CDATA[Class 컴포넌트 사용 시, React-Router-Dom의 Hook이 호환되지 않는 문제점]]></title>
    <link href="https://lyukidon.github.io/Javascript/TIL/react/class_component_compatibility_problem_with_react_router" />
    <id>https://lyukidon.github.io/Javascript/TIL/react/class_component_compatibility_problem_with_react_router</id>
    <published>2024-04-17T00:00:00.000Z</published>
    <updated>2024-04-17T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[<p data-svelte-h="svelte-eqykgp">react-router-dom의 Hook을 class Component에서 사용하는 경우, 에러가 발생하게 된다.</p> <!-- HTML_TAG_START --><pre class="shiki material-default" sh="true"><div class="language-id">sh</div><div class='code-container'><code><div class='line'>React Hook "useNavigate" cannot be called in a class component.</div><div class='line'></div><div class='line'>React Hooks must be called in a React function component or a custom React Hook function  react-hooks/rules-of-hooks</div></code></div></pre><!-- HTML_TAG_END --> <p data-svelte-h="svelte-17i40gy">function 함수에서 밖에 쓸 수 없는 경우는 아래와 같이 해결하면 된다.</p> <!-- HTML_TAG_START --><pre class="shiki material-default" ts="true"><div class="language-id">ts</div><div class='code-container'><code><div class='line'>export const withRouter = (Component:React.FC): React.FC =&gt; &#123;</div><div class='line'>  const Wrapper = (props: any): React.ReactElement =&gt; &#123;</div><div class='line'>    const navigate = useNavigate();</div><div class='line'>    const params = useParams();</div><div class='line'></div><div class='line'>    return &lt;Component navigate=&#123;navigate&#125; params=&#123;params&#125; &#123;...props&#125; /&gt;;</div><div class='line'>  &#125;;</div><div class='line'></div><div class='line'>  return Wrapper;</div><div class='line'>&#125;;</div></code></div></pre><!-- HTML_TAG_END --> <p data-svelte-h="svelte-1oabkfd">매개변수 컴포넌트에 props를 주입하는 코드이다.</p> <p data-svelte-h="svelte-ie1iyi">Wrapper 함수 내부에 react-router-dom의 hook을 작성한다.</p> <p data-svelte-h="svelte-kzcv0n">위의 함수 사용방법</p> <!-- HTML_TAG_START --><pre class="shiki material-default" ts="true"><div class="language-id">ts</div><div class='code-container'><code><div class='line'>  class TempComp extends React.Component&lt;PropType, StateType&gt; &#123;</div><div class='line'>    navigate: (url: string) =&gt; void;</div><div class='line'>    params: &#123; param1: string; param2: number; &#125;;</div><div class='line'></div><div class='line'>    constructor(props: PropType)&#123;</div><div class='line'>      super(props)</div><div class='line'></div><div class='line'>      // 상단에 타입을 작성해준다.</div><div class='line'>      this.navigate = this.props.navigate</div><div class='line'>      this.params = this.props.params</div><div class='line'>    &#125;</div><div class='line'></div><div class='line'>    render(</div><div class='line'>      &lt;div&gt;&lt;/div&gt;</div><div class='line'>    )</div><div class='line'>  &#125;</div><div class='line'></div><div class='line'>  export default withRouter(TempComp)</div></code></div></pre><!-- HTML_TAG_END --> <p data-svelte-h="svelte-srrpvc">마지막 코드와 같이 Class Component를 withRouter에 넣게 되면 props를 주입할 수 있게 된다.</p>]]>
    </content>
    <category term="react" scheme="https://lyukidon.github.io/?tags=react" />
  </entry>
  <entry>
    <title type="html"><![CDATA[Array와 LinkedList의 차이점]]></title>
    <link href="https://lyukidon.github.io/Javascript/TIL/백엔드기초/Array_LinkedList" />
    <id>https://lyukidon.github.io/Javascript/TIL/백엔드기초/Array_LinkedList</id>
    <published>2024-04-16T00:00:00.000Z</published>
    <updated>2024-04-16T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[<p data-svelte-h="svelte-8iu6j0">array 와 linked list를 비교 설명 해주세요. ( 코드 구현 해보기 )</p> <ul data-svelte-h="svelte-8frxab"><li>참고 : <a href="https://opentutorials.org/module/1335/8821" rel="nofollow noopener noreferrer external" target="_blank">https://opentutorials.org/module/1335/8821</a></li> <li>메모리 구조<ul><li>array : 연결된 공간에 할당<ul><li>장점 : 조회가 빠름 (배열의 인덱스만 알면 바로 조회 가능하기 때문)</li> <li>단점 : 추가 삭제 느림</li></ul></li> <li>linked list : 빈 공간에 데이터를 할당하고, 위치를 저장해 읽어오는 방법 <ul><li>요소<ul><li>Node : 데이터 필드와 링크 필드( 다음 노드를 가리키는 링크 )</li> <li>포인터 : 노드 내부에 다음 또는 이전 노드와의 연결정보를 가짐</li> <li>헤드 : 가장 처음 위치하는 노드</li> <li>테일 : 가장 끝에 위치하는 노드</li></ul></li> <li>종류<ul><li>단방향 링크드 리스트</li> <li>양방향 링크드 리스트</li> <li>원형 링크드 리스트</li> <li>청크 리스트</li></ul></li> <li>장점 : 조회가 느림 (배열의 헤드(가장 처음)가 가리키는 노드를 처음부터 순차적으로 조회하여 알맞은 값을 찾기 때문)</li> <li>단점 : 추가 삭제가 빠름</li></ul></li></ul></li></ul> <p data-svelte-h="svelte-12z97yt">array 는 일련, linked list 는 점 과 점 을 연결 =&gt; 시간 복잡도 =&gt; 언제 어디서 사용해야 할지를 좀 더 찾아보기</p> <p data-svelte-h="svelte-1r8ujtb">array는 연결된 공간에 할당하는 방식, linkedlist는 빈 공간에 데이터를 할당하고 위치를 저장하는 방식입니다. array 는 인</p> <p data-svelte-h="svelte-b8p174">queue : 선입 선출 (FIFO) 선착순</p> <ul data-svelte-h="svelte-d2kp58"><li>자바스크립트에서<ul><li>자료 삽입 : 위치 = rear, 메서드 = push()</li> <li>자료 인출 : 위치 = front, 메서드 = shift()</li></ul></li> <li>원형 큐 : 선형 큐의 단점을 보완. 기존 index에서 다음으로 넘어갈 때 (idx + 1) % length</li> <li>우선순위 큐 : 우선순위가 높은 것부터 내보냄</li> <li>데크 : 양방향 삽입/인출 =&gt; 이중 연결 리스트</li> <li>용례<ul><li>티켓 발매</li> <li>너비 우선 탐색 : 깊이가 낮은 노드부터 깊은 노드까지 탐색stack : 후입선출 (LIFO)</li></ul></li> <li>자바스크립트에서<ul><li>자료 삽입 : push()</li> <li>자료 인출 : pop()</li></ul></li> <li>용례<ul><li>웹 페이지 뒤로 가기</li> <li>실행 취소</li></ul></li></ul>]]>
    </content>
    <category term="backend" scheme="https://lyukidon.github.io/?tags=backend" />
  </entry>
  <entry>
    <title type="html"><![CDATA[useContext]]></title>
    <link href="https://lyukidon.github.io/Javascript/TIL/react/useContext" />
    <id>https://lyukidon.github.io/Javascript/TIL/react/useContext</id>
    <published>2024-04-15T00:00:00.000Z</published>
    <updated>2024-04-15T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[<ul data-svelte-h="svelte-2mdjw2"><li>참고 (코드) : <a href="https://velog.io/@hoonnn/React-Context-API%EC%99%80-useContext" rel="nofollow noopener noreferrer external" target="_blank">https://velog.io/@hoonnn/React-Context-API와-useContext</a></li> <li>Context API : 전역으로 데이터 관리해주는 API</li> <li>Provider &amp; Consumer<ul><li>Provider<ul><li>Context를 생성하고, 하위 컴포넌트에 제공하는 컴포넌트</li> <li>전역으로 관리할 상태를 value property로 설정하면, 하위 컴포넌트가 사용할 수 있음</li></ul></li> <li>Consumer<ul><li>Provider에서 제공하는 상태를 사용하는 컴포넌트</li> <li>Provider의 상태를 구독하고, 상태가 변경될 때마다 재랜더링</li></ul></li></ul></li> <li>Consumer ⇒ useContext Hook으로 대체하게 되면서 useState처럼 상태관리를 할 수 있게 됌</li> <li>useState VS useContext<ul><li>useState<ul><li>컴포넌트 내부의 상태관리</li> <li>예) form, loading, toggle 상태</li></ul></li> <li>useContext<ul><li>전역 상태 관리. 여러 컴포넌트 간에 같은 상태를 공유하는 경우 사용</li> <li>예) 로그인 상태, theme 상태, App 전체 알림</li></ul></li></ul></li></ul>]]>
    </content>
    <category term="react" scheme="https://lyukidon.github.io/?tags=react" />
  </entry>
  <entry>
    <title type="html"><![CDATA[Sorting]]></title>
    <link href="https://lyukidon.github.io/Javascript/TIL/sorting" />
    <id>https://lyukidon.github.io/Javascript/TIL/sorting</id>
    <published>2024-04-11T00:00:00.000Z</published>
    <updated>2024-04-11T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[<ul data-svelte-h="svelte-ffhlmz"><li>오름차순 기준</li> <li>선택정렬 : 처음부터 끝까지 확인해서 제일 작은 수를 앞으로 (1-n번째 확인 ⇒ 1, 2-n번째 ⇒ 2)</li> <li>버블정렬 : 연속된 2개를 비교 ⇒ 그 다음 순서의 2개 비교 ⇒ 맨 뒤에 큰 수</li> <li>병합정렬 : 배열을 여러 개로 나누어 비교 ⇒ 연속된 배열을 합쳐서 비교 (작은 문제를 비교해, 큰 문제를 해결)</li> <li>삽입정렬 : 2번째 자료부터 시작해, 1번째 부터 비교하여 삽입을 한 후 뒤의 자료를 밀어내는 형식</li> <li>퀵정렬 : 임의의 기준값을 정하고, 한쪽은 기준보다 작은 값 &amp; 다른 한쪽은 기준보다 높은 값을 넣는다. 이 과정을 반복한다.</li> <li>힙정렬 : 이진 트리 구조를 이용하여, 정렬하는 자료구조</li></ul>]]>
    </content>
    <category term="sorting" scheme="https://lyukidon.github.io/?tags=sorting" />
  </entry>
  <entry>
    <title type="html"><![CDATA[Providers]]></title>
    <link href="https://lyukidon.github.io/Javascript/TIL/nestjs/providers" />
    <id>https://lyukidon.github.io/Javascript/TIL/nestjs/providers</id>
    <published>2024-04-08T00:00:00.000Z</published>
    <updated>2024-04-08T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[<!-- HTML_TAG_START --><pre class="shiki material-default" ts="true"><div class="language-id">ts</div><div class='code-container'><code><div class='line'>import &#123; Module &#125; from "@nestjs/common";</div><div class='line'>import &#123; UserService &#125; from "./user.service";</div><div class='line'>import &#123; UserController &#125; from "./user.controller";</div><div class='line'></div><div class='line'>@Module(&#123;</div><div class='line'>  controllers: [UserController],</div><div class='line'>  providers: [UserService]</div><div class='line'>&#125;)</div><div class='line'>export class UserModule &#123;&#125;</div></code></div></pre><!-- HTML_TAG_END --> <p data-svelte-h="svelte-1jt90sz">위의 코드는 아래와 같다.</p> <!-- HTML_TAG_START --><pre class="shiki material-default" ts="true"><div class="language-id">ts</div><div class='code-container'><code><div class='line'>import &#123; Module &#125; from "@nestjs/common";</div><div class='line'>import &#123; UserService &#125; from "./user.service";</div><div class='line'>import &#123; UserController &#125; from "./user.controller";</div><div class='line'></div><div class='line'>@Module(&#123;</div><div class='line'>  controllers: [UserController],</div><div class='line'>  providers: [</div><div class='line'>    &#123;</div><div class='line'>      provide: UserService,</div><div class='line'>      useClass: UserService</div><div class='line'>    &#125;,</div><div class='line'>    &#123;</div><div class='line'>      provide: MockService,</div><div class='line'>      useValue: MockService</div><div class='line'>    &#125;</div><div class='line'>  ]</div><div class='line'>&#125;)</div><div class='line'>export class UserModule &#123;&#125;</div></code></div></pre><!-- HTML_TAG_END --> <ul data-svelte-h="svelte-u9txyz"><li>useClass : 실제 모듈</li> <li>useValue : 가짜 모듈</li></ul>]]>
    </content>
    <category term="nestjs" scheme="https://lyukidon.github.io/?tags=nestjs" />
  </entry>
  <entry>
    <title type="html"><![CDATA[file Upload]]></title>
    <link href="https://lyukidon.github.io/Javascript/TIL/react/fileUpload" />
    <id>https://lyukidon.github.io/Javascript/TIL/react/fileUpload</id>
    <published>2024-04-07T00:00:00.000Z</published>
    <updated>2024-04-07T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[<h3 id="front-end" data-svelte-h="svelte-1mb2ly7"><a href="#front-end">front-end</a></h3> <!-- HTML_TAG_START --><pre class="shiki material-default" ts="true"><div class="language-id">ts</div><div class='code-container'><code><div class='line'>  // formData 객체를 생성해 전달 (submit 버튼이 없어도 됌)</div><div class='line'>  const handleUpload = async () =&gt; &#123;</div><div class='line'>    if (!img) return;</div><div class='line'>    const formData = new FormData();</div><div class='line'>    formData.append("file", img);</div><div class='line'>    try &#123;</div><div class='line'>      await axios(&#123;</div><div class='line'>        headers: &#123;</div><div class='line'>          "Content-Type": "multipart/form-data"</div><div class='line'>        &#125;,</div><div class='line'>        method: "POST",</div><div class='line'>        baseURL: "http://127.0.0.1:3001",</div><div class='line'>        url: "/image/upload",</div><div class='line'>        data: formData</div><div class='line'>      &#125;);</div><div class='line'>    &#125; catch (error) &#123;</div><div class='line'>      console.log(error);</div><div class='line'>    &#125;</div><div class='line'>  &#125;;</div></code></div></pre><!-- HTML_TAG_END --> <ul data-svelte-h="svelte-1r7a31w"><li>formData 객체 메서드<ul><li><code>.append(key, value)</code> : form field 추가(기존 값의 끝에 새로운 값을 추가)<ul><li><code>.append(key, blob, filename)</code> : Blob가 두번째 매개변수로 전달 시, blob의 파일 이름을 지정</li></ul></li> <li><code>.set(key, value)</code> : form field 추가(같은 key 필드 존재 시, 제거 후 생성)<ul><li><code>.set(key, blob, filename)</code> : Blob가 두번째 매개변수로 전달 시, blob의 파일 이름을 지정</li></ul></li> <li><code>.get(key)</code> : key 필드 읽기</li> <li><code>.has(key)</code> : key 필드 존재 여부</li> <li><code>.delete(key)</code> : key field 삭제</li></ul></li></ul> <h3 id="back-end" data-svelte-h="svelte-wpv8zl"><a href="#back-end">back-end</a></h3> <!-- HTML_TAG_START --><pre class="shiki material-default" ts="true"><div class="language-id">ts</div><div class='code-container'><code><div class='line'>  // image.controller.ts</div><div class='line'>  @Post('/upload')</div><div class='line'>  @UseInterceptors(FileInterceptor('file'))</div><div class='line'>  async uploadFile(@UploadedFile() file: Express.Multer.File) &#123;</div><div class='line'>    console.log(file);</div><div class='line'>  &#125;</div></code></div></pre><!-- HTML_TAG_END --> <h3 id="주의" data-svelte-h="svelte-ee990i"><a href="#주의">주의</a></h3> <p data-svelte-h="svelte-1h50pte"><code>FileInterceptor(key)</code>에서 <code>key</code> 값은 <code>formData.append(key, value)</code>의 <code>key</code> 값과 일치해야 한다.</p>]]>
    </content>
    <category term="react" scheme="https://lyukidon.github.io/?tags=react" />
    <category term="formData" scheme="https://lyukidon.github.io/?tags=formData" />
  </entry>
  <entry>
    <title type="html"><![CDATA[Docker Compose Cli]]></title>
    <link href="https://lyukidon.github.io/Javascript/TIL/docker/cli" />
    <id>https://lyukidon.github.io/Javascript/TIL/docker/cli</id>
    <published>2024-04-05T00:00:00.000Z</published>
    <updated>2024-04-05T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[<ul data-svelte-h="svelte-rzwx3x"><li><code>up</code> : Docker Compose에 정의되어 있는 모든 서비스 <strong>컨테이너를 한 번에 생성하고 실행</strong></li> <li><code>down</code> : Docker Compose에 정의되어 있는 모든 서비스 <strong>컨테이너를 한 번에 정지시키고 삭제</strong></li> <li><code>start</code> : 정지되어 있는 특정 서비스 컨테이너를 작동시키기 위해 사용</li> <li><code>stop</code> : 작동 중인 특정 서비스 컨테이너를 정지</li> <li><code>ps</code> : Docker Compose에 정의되어 있는 모든 서비스 컨테이너 목록을 조회</li> <li><code>logs</code> : 서비스 컨테이너의 로그를 확인하고 싶을 때 사용하며, 보통 <code>-f</code> 옵션을 붙여서 실시간 로그를 확인</li> <li><code>exec</code> : 실행 중인 서비스 컨테이너를 대상으로 어떤 명령어를 날릴 때 사용</li> <li><code>run</code> : 서비스 컨테이너의 특정 명령어를 일회성으로 실행할 때 사용</li> <li><code>config</code> : Docker Compose 설정을 확인할 때 사용</li></ul>]]>
    </content>
    <category term="docker" scheme="https://lyukidon.github.io/?tags=docker" />
  </entry>
  <entry>
    <title type="html"><![CDATA[Docker 필요한 파일]]></title>
    <link href="https://lyukidon.github.io/Javascript/TIL/docker/files" />
    <id>https://lyukidon.github.io/Javascript/TIL/docker/files</id>
    <published>2024-04-03T00:00:00.000Z</published>
    <updated>2024-04-03T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[<ul data-svelte-h="svelte-tvq8pb"><li><code>.dockerignore</code></li> <li><code>Dockerfile</code><ul><li>컨테이너 이미지 생성 코드</li></ul></li> <li><code>docker-compose.yml</code><ul><li>도커 컨테이너를 dockerfile 이용해 생성</li> <li>서비스 실행에 관여</li></ul></li> <li><code>dockerfile</code> 과 <code>docker-compose</code> 의 차이점<ul><li>dockerfile : 도커 컨테이너 img 생성</li> <li>docker-compose.yml : 앱 구동 시 컨테이너 관리</li></ul></li></ul>]]>
    </content>
    <category term="docker" scheme="https://lyukidon.github.io/?tags=docker" />
  </entry>
  <entry>
    <title type="html"><![CDATA[Docker Compose]]></title>
    <link href="https://lyukidon.github.io/Javascript/TIL/docker/files/docker-compose" />
    <id>https://lyukidon.github.io/Javascript/TIL/docker/files/docker-compose</id>
    <published>2024-04-03T00:00:00.000Z</published>
    <updated>2024-04-03T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[<h2 id="docker-composeyml" data-svelte-h="svelte-197dsln"><a href="#docker-composeyml">docker-compose.yml</a></h2> <!-- HTML_TAG_START --><pre class="shiki material-default" docker="true"><div class="language-id">docker</div><div class='code-container'><code><div class='line'>version: "3.8"</div><div class='line'>services:</div><div class='line'>  frontend:</div><div class='line'>    platform: linux/amd64</div><div class='line'>    build:</div><div class='line'>      context: "."</div><div class='line'>      dockerfile: Dockerfile</div><div class='line'>    container_name: "you-pt-fe"</div><div class='line'>    working_dir: "/usr/src/app"</div><div class='line'>    ports:</div><div class='line'>      - "3500:3000"</div><div class='line'>    volumes:</div><div class='line'>      - /usr/src/app/node_modules</div><div class='line'>      # 컨테이너밖: 컨테이너안</div><div class='line'>      - .:/usr/src/app</div><div class='line'>    command: ["npm", "run", "start"]</div><div class='line'># services에 여러 개를 넣으면, 여러 컨테이너를 한번에 실행할 수 있다.</div></code></div></pre><!-- HTML_TAG_END --> <p data-svelte-h="svelte-1o2hnhg">version</p> <ul data-svelte-h="svelte-1aff5h4"><li>실행 방법<ul><li>기본 설정 파일인 docker-compose.yml 실행 시.</li> <li>-d: 백그라운드 실행.</li> <li>docker-compose up -d</li> <li>사용자 지정 설정파일 실행 시 -f 옵션</li> <li>docker-compose -f 파일명.yml up -d</li></ul></li></ul>]]>
    </content>
    <category term="docker" scheme="https://lyukidon.github.io/?tags=docker" />
  </entry>
  <entry>
    <title type="html"><![CDATA[Dockerfile]]></title>
    <link href="https://lyukidon.github.io/Javascript/TIL/docker/files/dockerfile" />
    <id>https://lyukidon.github.io/Javascript/TIL/docker/files/dockerfile</id>
    <published>2024-04-03T00:00:00.000Z</published>
    <updated>2024-04-03T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[<h2 id="dockerfile" data-svelte-h="svelte-71n3v2"><a href="#dockerfile">Dockerfile</a></h2> <p data-svelte-h="svelte-1ekc7wx">Docker image를 생성하는데 필요한 파일</p> <!-- HTML_TAG_START --><pre class="shiki material-default" docker="true"><div class="language-id">docker</div><div class='code-container'><code><div class='line'>FROM node:18 AS development</div><div class='line'>WORKDIR /usr/src/app</div><div class='line'></div><div class='line'>COPY package*.json ./</div><div class='line'>RUN npm install</div><div class='line'>COPY ./ ./</div><div class='line'></div><div class='line'>EXPOSE 3000</div><div class='line'>CMD ["npm", "start"]</div></code></div></pre><!-- HTML_TAG_END --> <ul data-svelte-h="svelte-1ah9a4o"><li><p><code>FROM</code> : base 이미지 기반으로 실행</p></li> <li><p><code>WORKDIR</code> : copy한 file이  root로 들어오는 것을 방지하기 위해 work dir를 분리</p></li> <li><p><code>COPY</code> : local file을 도커로 복사</p></li> <li><p><code>RUN</code> : 코드 실행</p></li> <li><p><code>EXPOSE</code> : 노출 PORT 설정</p></li> <li><p><code>CMD</code> : 코드 실행</p></li> <li><p><code>RUN</code>과 <code>CMD</code>의 차이점</p> <ul><li><code>RUN</code> : 빌드 시 실행되는 코드 (일시적)</li> <li><code>CMD</code> : 컨테이너 실행 시 실행되는 코드 (상시적)</li></ul></li> <li><p>실행방법</p> <ul><li>docker build . -t 이미지_이름</li> <li>docker run -p 3500:3000 -v /usr/src/app/node<em>modules -v $(pwd):/usr/src/app 이미지</em>이름</li></ul></li></ul>]]>
    </content>
    <category term="docker" scheme="https://lyukidon.github.io/?tags=docker" />
  </entry>
  <entry>
    <title type="html"><![CDATA[Material Tailwind Error]]></title>
    <link href="https://lyukidon.github.io/Javascript/TIL/react/tailwind/typescript_error" />
    <id>https://lyukidon.github.io/Javascript/TIL/react/tailwind/typescript_error</id>
    <published>2024-04-02T00:00:00.000Z</published>
    <updated>2024-04-02T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[<h2 id="머터리얼-테일윈드의-컴포넌트-사용-시-에러-발생" data-svelte-h="svelte-oge4t4"><a href="#머터리얼-테일윈드의-컴포넌트-사용-시-에러-발생">머터리얼 테일윈드의 컴포넌트 사용 시 에러 발생</a></h2> <!-- HTML_TAG_START --><pre class="shiki material-default" ts="true"><div class="language-id">ts</div><div class='code-container'><code><div class='line'>import &#123;Button&#125; from '@material-tailwind/react'</div><div class='line'></div><div class='line'>export default () =&gt; &#123;</div><div class='line'>  return &lt;Button&gt;버튼&lt;/Button&gt;</div><div class='line'>&#125;</div></code></div></pre><!-- HTML_TAG_END --> <p data-svelte-h="svelte-16ulj9a">사용 시 필수 props를 작성하지 않았다는 오류가 발생한다.</p> <p data-svelte-h="svelte-1armueo">vs code의 QUICK FIX 기능을 사용하여 해결해보면</p> <!-- HTML_TAG_START --><pre class="shiki material-default" ts="true"><div class="language-id">ts</div><div class='code-container'><code><div class='line'>import &#123;Button&#125; from '@material-tailwind/react'</div><div class='line'></div><div class='line'>export default () =&gt; &#123;</div><div class='line'>  return &lt;Button </div><div class='line'>            placeholder=&#123;undefined&#125;</div><div class='line'>            onPointerEnterCapture=&#123;undefined&#125;</div><div class='line'>            onPointerLeaveCapture=&#123;undefined&#125;</div><div class='line'>          &gt;</div><div class='line'>            버튼</div><div class='line'>          &lt;/Button&gt;</div><div class='line'>&#125;</div></code></div></pre><!-- HTML_TAG_END --> <p data-svelte-h="svelte-l9tp8p">위와 같이 변경이 되면서 TypeError가 발생하지는 않는데, 왜 이렇게 만들어놓았는지는 잘 모르겠다.</p>]]>
    </content>
    <category term="react" scheme="https://lyukidon.github.io/?tags=react" />
    <category term="typescript" scheme="https://lyukidon.github.io/?tags=typescript" />
    <category term="tailwind" scheme="https://lyukidon.github.io/?tags=tailwind" />
    <category term="error" scheme="https://lyukidon.github.io/?tags=error" />
  </entry>
  <entry>
    <title type="html"><![CDATA[Signaling Server]]></title>
    <link href="https://lyukidon.github.io/Javascript/TIL/webrtc/signaling_server" />
    <id>https://lyukidon.github.io/Javascript/TIL/webrtc/signaling_server</id>
    <published>2024-04-01T00:00:00.000Z</published>
    <updated>2024-04-01T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[<h2 id="1-signaling-server" data-svelte-h="svelte-118aqay"><a href="#1-signaling-server">1. Signaling Server</a></h2> <ul data-svelte-h="svelte-1b8u0d8"><li>참고<ul><li><a href="https://developer.mozilla.org/ko/docs/Web/API/WebRTC_API/Signaling_and_video_calling" rel="nofollow noopener noreferrer external" target="_blank">https://developer.mozilla.org/ko/docs/Web/API/WebRTC_API/Signaling_and_video_calling</a></li> <li><a href="https://doublem.org/webrtc-story-02/" rel="nofollow noopener noreferrer external" target="_blank">https://doublem.org/webrtc-story-02/</a></li></ul></li> <li>Signaling<ul><li>서로 다른 네트워크에 있는 2개의 디바이스들을 서로 위치시키기 위해서는, 각 디바이스들의 위치를 발견하는 방법과 미디어 포맷 협의가 필요한데, 이런 프로세스를 Signaling</li> <li>각 디바이스들을 상호간에 동의된 서버(<a href="http://socket.io/" rel="nofollow noopener noreferrer external" target="_blank">socket.io</a> 혹은 websocket을 이용한 서버)에 연결</li> <li>역할 : 각 디바이스들이 <strong>negotiation</strong>(협의) 메세지들을 교환</li> <li>web socket<ul><li>새로운 유저를 등록하는 것, username을 세팅하는 것, 채팅 메세지를 전송하는 것 등등</li> <li>특정한 유저에게 직접 메세지를 전달</li> <li>동일한 서버를 이용하여 시그널 메시지를 보냄</li></ul></li> </ul><ol><li>SDP 교환<ul><li>데이터 포맷 : JSON<ul><li>type : 메세지 타입 video-offer or video-answer</li> <li>name : 보내는 사람의 username</li> <li>target : 받는 사람의 username</li> <li>sdp : 커넥션의 local정보를 설명</li></ul></li></ul></li> <li>ICE 교환<ul><li>ICE : Interactive Connectivity Establishment 상호 연결 확립</li> <li>STUN과 TURN 프레임워크로 확보된 통신 가능한 여러 IP주소와 포트 넘버를 SDP Offer 와 SDP Answer를 통해(Signaling Server를 통해) 상대방에게 전달</li></ul></li></ol></li></ul>]]>
    </content>
    <category term="webrtc" scheme="https://lyukidon.github.io/?tags=webrtc" />
  </entry>
  <entry>
    <title type="html"><![CDATA[백엔드 기초]]></title>
    <link href="https://lyukidon.github.io/Javascript/TIL/백엔드기초" />
    <id>https://lyukidon.github.io/Javascript/TIL/백엔드기초</id>
    <published>2024-03-29T00:00:00.000Z</published>
    <updated>2024-03-29T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[<ol data-svelte-h="svelte-19hgn5v"><li>HTTP 메서드에 대해 설명해주세요 PROTOCOL  찾아보기<ul><li>종류: GET, POST, PUT, PATCH, DELETE, HEAD, CONNECT, OPTIONS, TRACE<ul><li>HEAD: get 메서드와 동일하지만, body값을 제외하고 조회</li> <li>CONNECT: 목적 리소스로 식별되는 서버로의 터널을 맺습니다.</li> <li>options: 목적 리소스의 통신을 설정하는 데 쓰입니다.</li> <li>Trace: 목적 리소스의 경로를 따라 메시지 loop-back 테스트를 합니다.</li></ul></li> <li>의미: 클라이언트가 웹 서버에 어떤 동작을 원하는지 나타내는 방법 or 서버가 수행해야할 동작을 지정하는 방법</li></ul></li> <li>GET, POST의 개념과 함께 데이터 흐름에 대해서 설명해주세요<ul><li>GET<ul><li>서버에 정보를 조회할 때</li> <li>데이터 흐름<ol><li>경로 or 쿼리스트링을 이용해 데이터 요청</li> <li>요청을 받으면 데이터베이스에서 정보 조회 후 클라이언트 전달</li> </ol><ul><li>2014년부터 GET메서드도 body를 보낼 수 있게 되었으나, 특정 클라이언트에서는 지원하지 않을 수도 있음.</li></ul></li></ul></li> <li>POST<ul><li>서버에 리소스를 추가할 때</li> <li>데이터 흐름<ol><li>클라이언트는 body에 데이터를 JSON형태로 전달</li> <li>database에 body 데이터를 추가</li> <li>생성된 리소스를 클라이언트로 전달</li></ol></li></ul></li></ul></li></ol>]]>
    </content>
    <category term="backend" scheme="https://lyukidon.github.io/?tags=backend" />
  </entry>
  <entry>
    <title type="html"><![CDATA[WebRTC 관련 정보]]></title>
    <link href="https://lyukidon.github.io/Javascript/TIL/webrtc/information" />
    <id>https://lyukidon.github.io/Javascript/TIL/webrtc/information</id>
    <published>2024-03-28T00:00:00.000Z</published>
    <updated>2024-03-28T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[<h2 id="관련-라이브러리" data-svelte-h="svelte-xtd0u0"><a href="#관련-라이브러리">관련 라이브러리</a></h2> <ul data-svelte-h="svelte-4u1jqt"><li>openvidu</li> <li>rtc-socket-connector<ul><li>Peer 간의 연결을 간단하게 해주는 Library</li></ul></li> <li>rtc-socket-connector-server<ul><li>시그널링 서버 구현 라이브러리</li></ul></li></ul> <h2 id="서버-종류" data-svelte-h="svelte-myu9gf"><a href="#서버-종류">서버 종류</a></h2> <ol data-svelte-h="svelte-1rv6if6"><li>Signaling Server =&gt; 이용자 간의 활동 정보 (누구와 연락하는지)</li> <li>STUN Server</li> <li>TURN Server</li> <li>Media Server =&gt; 1:다 통신 때 필요 (MCU, SFU 방식)</li></ol>]]>
    </content>
    <category term="webrtc" scheme="https://lyukidon.github.io/?tags=webrtc" />
  </entry>
  <entry>
    <title type="html"><![CDATA[RyuRello 회고록]]></title>
    <link href="https://lyukidon.github.io/Javascript/TIL/KPT/ryurello" />
    <id>https://lyukidon.github.io/Javascript/TIL/KPT/ryurello</id>
    <published>2024-03-25T00:00:00.000Z</published>
    <updated>2024-03-25T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[<h3 id="keep" data-svelte-h="svelte-105ok3v"><a href="#keep">Keep</a></h3> <ul data-svelte-h="svelte-tfqk2c"><li>기한 내에 목표한 것을 완성했다.</li> <li>업무 관련 결정이 빠르게 이루어졌다.</li> <li>소통이 잘 되었다.</li> <li>스웨거를 잘 활용할 수 있게 되었다.</li> <li>문제를 해결할 때 서로 적극적으로 도와 주었다.</li> <li>각자 맡은 부분을 완성했다.</li> <li>편리한 기능을 잘 공유했다.</li></ul> <h3 id="problem" data-svelte-h="svelte-1qcmlpz"><a href="#problem">Problem</a></h3> <ul data-svelte-h="svelte-xc13hj"><li>사용할 기술 스택 관련 논의가 부족했던 것 같다.</li> <li>추가구현 기능을 전부 해보지 못한 점이 아쉬웠다.</li> <li>테스트 코드를 다 작성하지 못한 점이 아쉬웠다.</li> <li>특정 기능이 제대로 테스트 되지 못한 상태에서 구현된 점</li></ul> <h3 id="try" data-svelte-h="svelte-ir89tx"><a href="#try">Try</a></h3> <ul data-svelte-h="svelte-ywzt96"><li>테스트 코드 완성, 시연 영상, 퍼센티지까지 찍어보기</li> <li>제시되지 않은 기능에도 도전해보기</li> <li>주제와 핵심기능을 명확하게 설정하기</li> <li>docker 활용하고 배포까지 이용해보기</li> <li>CI, CD 도전해보기</li></ul>]]>
    </content>
    <category term="KPT" scheme="https://lyukidon.github.io/?tags=KPT" />
  </entry>
  <entry>
    <title type="html"><![CDATA[TypeORM Join 하기]]></title>
    <link href="https://lyukidon.github.io/Javascript/TIL/typeorm/queryBuilder/join" />
    <id>https://lyukidon.github.io/Javascript/TIL/typeorm/queryBuilder/join</id>
    <published>2024-03-22T00:00:00.000Z</published>
    <updated>2024-03-22T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[<ul><li><p data-svelte-h="svelte-f9l2ed">user</p> <!-- HTML_TAG_START --><pre class="shiki material-default" ts="true"><div class="language-id">ts</div><div class='code-container'><code><div class='line'>@Entity()</div><div class='line'>class User &#123;</div><div class='line'>  @PrimaryGeneratedColumn()</div><div class='line'>  userId: number;</div><div class='line'></div><div class='line'>  @Column()</div><div class='line'>  name: string;</div><div class='line'></div><div class='line'>  @OneToMany(() =&gt; Book, book =&gt; book.user)</div><div class='line'>  books: book[];</div><div class='line'>&#125;</div></code></div></pre><!-- HTML_TAG_END --></li> <li><p data-svelte-h="svelte-ueh36j">book</p> <!-- HTML_TAG_START --><pre class="shiki material-default" ts="true"><div class="language-id">ts</div><div class='code-container'><code><div class='line'>@Entity()</div><div class='line'>class Book &#123;</div><div class='line'>  @PrimaryGeneratedColumn()</div><div class='line'>  bookId: number;</div><div class='line'></div><div class='line'>  @Column()</div><div class='line'>  userId: number;</div><div class='line'></div><div class='line'>  @ManyToOne(() =&gt; User, user =&gt; user.books)</div><div class='line'>  @JoinColumn(&#123; name: "userId", ReferenceName: "userId" &#125;)</div><div class='line'>  user: User;</div><div class='line'>&#125;</div></code></div></pre><!-- HTML_TAG_END --></li> <li><p data-svelte-h="svelte-bskn6v">left join</p> <!-- HTML_TAG_START --><pre class="shiki material-default" ts="true"><div class="language-id">ts</div><div class='code-container'><code><div class='line'>this.dataSource</div><div class='line'>  .createQueryBuilder(Book, "book")</div><div class='line'>  .select(["user.userId", "book.bookId"])</div><div class='line'>  .leftJoin("book.user", "user", "book.userId = user.userId")</div><div class='line'>  .getMany() or .getOne()</div></code></div></pre><!-- HTML_TAG_END --></li></ul>]]>
    </content>
    <category term="TypeORM" scheme="https://lyukidon.github.io/?tags=TypeORM" />
  </entry>
  <entry>
    <title type="html"><![CDATA[TypeORM Query Builder 사용해보기]]></title>
    <link href="https://lyukidon.github.io/Javascript/TIL/typeorm/queryBuilder" />
    <id>https://lyukidon.github.io/Javascript/TIL/typeorm/queryBuilder</id>
    <published>2024-03-20T00:00:00.000Z</published>
    <updated>2024-03-20T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[<h2 id="사용-이유" data-svelte-h="svelte-1tt2jkb"><a href="#사용-이유">사용 이유</a></h2> <p data-svelte-h="svelte-1sbm6m3">기존 메서드가 제대로 작동하지 않았다. 특히 <code>.update</code></p> <h2 id="사용-방법" data-svelte-h="svelte-f0pzx"><a href="#사용-방법">사용 방법</a></h2> <ul><li><p data-svelte-h="svelte-ht4x0z">기본 설정</p> <!-- HTML_TAG_START --><pre class="shiki material-default" ts="true"><div class="language-id">ts</div><div class='code-container'><code><div class='line'>import &#123; DataSource &#125; from 'typeorm';</div><div class='line'></div><div class='line'>class &#123;</div><div class='line'>  constructor(</div><div class='line'>    private readonly dataSource: DataSource</div><div class='line'>  )&#123;&#125;</div><div class='line'>  queryBuilder = this.dataSource.getRepository(User).createQueryBuilder("u")</div><div class='line'>&#125;</div></code></div></pre><!-- HTML_TAG_END --></li> <li><p data-svelte-h="svelte-1oxbhoo">조회</p> <!-- HTML_TAG_START --><pre class="shiki material-default" ts="true"><div class="language-id">ts</div><div class='code-container'><code><div class='line'>this.dataSource</div><div class='line'>  .getRepository(User)</div><div class='line'>  .createQueryBuilder("u")</div><div class='line'>  .select("u.userId")</div><div class='line'>  .where("u.name = :name", &#123; name: "ryu" &#125;)</div><div class='line'>  // .getOne() 한 개 받아오기</div><div class='line'>  // .getMany() 여러 개 받아오기</div></code></div></pre><!-- HTML_TAG_END --> <!-- HTML_TAG_START --><pre class="shiki material-default" sql="true"><div class="language-id">sql</div><div class='code-container'><code><div class='line'>SELECT U.USERID FROM USER U</div><div class='line'>WHERE U.NAME = "ryu"</div></code></div></pre><!-- HTML_TAG_END --></li> <li><p data-svelte-h="svelte-1y4he74">추가</p> <!-- HTML_TAG_START --><pre class="shiki material-default" ts="true"><div class="language-id">ts</div><div class='code-container'><code><div class='line'>this.dataSource</div><div class='line'>    .createQueryBuilder()</div><div class='line'>    .insert()</div><div class='line'>    .into(User)</div><div class='line'>    .values([</div><div class='line'>      &#123; name: "Jack", age: "30" &#125;,</div><div class='line'>      &#123; name: "Tom", age: "25" &#125;</div><div class='line'>    ])</div><div class='line'>    .execute()</div></code></div></pre><!-- HTML_TAG_END --> <!-- HTML_TAG_START --><pre class="shiki material-default" sql="true"><div class="language-id">sql</div><div class='code-container'><code><div class='line'>INSERT INTO USER VALUES (NAME, AGE)</div><div class='line'>VALUES ("Jack", 30);</div><div class='line'></div><div class='line'>INSERT INTO USER VALUES (NAME, AGE)</div><div class='line'>VALUES ("Tom", 25);</div></code></div></pre><!-- HTML_TAG_END --></li> <li><p data-svelte-h="svelte-1xkq9co">제거</p> <!-- HTML_TAG_START --><pre class="shiki material-default" ts="true"><div class="language-id">ts</div><div class='code-container'><code><div class='line'>  this.dataSource</div><div class='line'>    .createQueryBuilder()</div><div class='line'>    .delete()</div><div class='line'>    .from(User)</div><div class='line'>    .where("userId = :userId", &#123;userId: 1&#125;)</div><div class='line'>    .execute()</div></code></div></pre><!-- HTML_TAG_END --> <!-- HTML_TAG_START --><pre class="shiki material-default" sql="true"><div class="language-id">sql</div><div class='code-container'><code><div class='line'>DELETE FROM USER</div><div class='line'>WHERE USERID = 1;</div></code></div></pre><!-- HTML_TAG_END --></li> <li><p data-svelte-h="svelte-1p07rih">변경</p> <!-- HTML_TAG_START --><pre class="shiki material-default" ts="true"><div class="language-id">ts</div><div class='code-container'><code><div class='line'>this.dataSource</div><div class='line'>  .createQueryBuilder()</div><div class='line'>  .update(User)</div><div class='line'>  .set(&#123;</div><div class='line'>    name: "Mike",</div><div class='line'>    age: 60</div><div class='line'>  &#125;)</div><div class='line'>  .where("name = :name", &#123;name: "Jack"&#125;)</div><div class='line'>  .execute()</div></code></div></pre><!-- HTML_TAG_END --> <!-- HTML_TAG_START --><pre class="shiki material-default" sql="true"><div class="language-id">sql</div><div class='code-container'><code><div class='line'>UPDATE USER</div><div class='line'>SET NAME = "Mike"</div><div class='line'>    AGE  = 60</div><div class='line'># or SET (NAME, AGE) = ("Mike", 60)</div><div class='line'>WHERE NAME = "Jack"</div></code></div></pre><!-- HTML_TAG_END --></li></ul>]]>
    </content>
    <category term="TypeORM" scheme="https://lyukidon.github.io/?tags=TypeORM" />
  </entry>
  <entry>
    <title type="html"><![CDATA[TypeORM + NestJS Transaction]]></title>
    <link href="https://lyukidon.github.io/Javascript/TIL/typeorm/transaction" />
    <id>https://lyukidon.github.io/Javascript/TIL/typeorm/transaction</id>
    <published>2024-03-20T00:00:00.000Z</published>
    <updated>2024-03-20T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[<p data-svelte-h="svelte-tqj1eu">service.ts 파일</p> <ol><li><p data-svelte-h="svelte-5yeek7">typeorm의 <code>DataSource</code> module을 import</p> <!-- HTML_TAG_START --><pre class="shiki material-default" ts="true"><div class="language-id">ts</div><div class='code-container'><code><div class='line'>import &#123; DataSource &#125; from "typeorm";</div></code></div></pre><!-- HTML_TAG_END --></li> <li><p data-svelte-h="svelte-c13iog">constructor에 추가</p> <!-- HTML_TAG_START --><pre class="shiki material-default" ts="true"><div class="language-id">ts</div><div class='code-container'><code><div class='line'>constructor(</div><div class='line'>  private readonly dataSource: DataSource</div><div class='line'>)&#123;&#125;</div></code></div></pre><!-- HTML_TAG_END --></li> <li><p data-svelte-h="svelte-1okapth">transaction 작성법</p> <!-- HTML_TAG_START --><pre class="shiki material-default" ts="true"><div class="language-id">ts</div><div class='code-container'><code><div class='line'>async createMany(users: User[]) &#123;</div><div class='line'>  const queryRunner = this.dataSource.createQueryRunner();</div><div class='line'></div><div class='line'>  await queryRunner.connect(); // 연결하기</div><div class='line'>  await queryRunner.startTransaction();</div><div class='line'>  try &#123;</div><div class='line'>    await queryRunner.manager.save(users[0]);</div><div class='line'>    await queryRunner.manager.save(users[1]);</div><div class='line'></div><div class='line'>    await queryRunner.commitTransaction();</div><div class='line'>  &#125; catch (err) &#123;</div><div class='line'>    // 에러 생성 시 복구</div><div class='line'>    await queryRunner.rollbackTransaction();</div><div class='line'>  &#125; finally &#123;</div><div class='line'>    // queryRunner가 완료되면 연결 끊기</div><div class='line'>    await queryRunner.release();</div><div class='line'>  &#125;</div><div class='line'>&#125;</div></code></div></pre><!-- HTML_TAG_END --></li></ol> <ul data-svelte-h="svelte-qhim64"><li><code>connect()</code> : 새로운 queryRunner를 사용해 데이터베이스에 직접 연결</li> <li><code>startTransaction()</code> : 트랜젝션 시작</li> <li><code>commitTransaction()</code> : 트랜젝션이 완료되면 커밋</li> <li><code>rollbackTransaction()</code> : 트랜젝션 중 오류 발생 시, 복구</li> <li><code>release()</code> : queryRunner가 완료되면, 연결 끊기</li></ul>]]>
    </content>
    <category term="typeorm" scheme="https://lyukidon.github.io/?tags=typeorm" />
  </entry>
  <entry>
    <title type="html"><![CDATA[정규표현식으로 한자 찾기 + 메서드]]></title>
    <link href="https://lyukidon.github.io/Javascript/TIL/regexp/kanji" />
    <id>https://lyukidon.github.io/Javascript/TIL/regexp/kanji</id>
    <published>2024-03-19T00:00:00.000Z</published>
    <updated>2024-03-19T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[<h2 id="한자-정규-표현식" data-svelte-h="svelte-1kv5wgm"><a href="#한자-정규-표현식">한자 정규 표현식</a></h2> <!-- HTML_TAG_START --><pre class="shiki material-default" js="true"><div class="language-id">js</div><div class='code-container'><code><div class='line'>&#96;[一-鿿]&#96;;</div></code></div></pre><!-- HTML_TAG_END --> <h2 id="관련-메서드" data-svelte-h="svelte-f7a5ig"><a href="#관련-메서드">관련 메서드</a></h2> <ul data-svelte-h="svelte-1y2n10n"><li><p>string.match(regexp) : String</p> <ul><li>일치하는 문자만 출력</li></ul></li> <li><p>string.search(regexp) : String</p> <ul><li>일치하는 첫번째 문자의 위치</li></ul></li> <li><p>string.replace(regexp, “원하는 문자열”) : String</p> <ul><li>일치하는 문자열을 원하는 문자열로 변경</li></ul></li> <li><p>string.split(regexp) : Array</p> <ul><li>일치하는 문자열을 분할하는데 사용</li></ul></li> <li><p>regexp.test(string) : Boolean</p> <ul><li>문자열이 조건과 일치하는지 여부</li></ul></li> <li><p>regexp.exec(string) : Array</p> <ul><li>일치하는 문자의 모든 정보를 배열로 반환</li></ul></li></ul>]]>
    </content>
    <category term="regexp" scheme="https://lyukidon.github.io/?tags=regexp" />
  </entry>
  <entry>
    <title type="html"><![CDATA[실행 컨텍스트]]></title>
    <link href="https://lyukidon.github.io/Javascript/TIL/execution_context" />
    <id>https://lyukidon.github.io/Javascript/TIL/execution_context</id>
    <published>2024-03-18T00:00:00.000Z</published>
    <updated>2024-03-18T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[<h2 id="23장-실행-컨텍스트" data-svelte-h="svelte-1vm6hdg"><a href="#23장-실행-컨텍스트">23장 실행 컨텍스트</a></h2> <ul data-svelte-h="svelte-1itl9ke"><li>소스코드의 타입</li></ul> <div class="overflow-x-auto mb-4"><table class="table w-full"><thead data-svelte-h="svelte-6ih3q1"><tr><th>타입</th> <th>컨텍스트</th> <th>설명</th></tr></thead> <tbody data-svelte-h="svelte-1sfnz2s"><tr><td>전역 코드</td> <td>전역 실행 컨텍스트</td> <td>전역에 존재하는 소스코드. 함수, 클래스 등의 내부코드 미포함</td></tr> <tr><td>함수 코드</td> <td>함수 실행 컨텍스트</td> <td>함수 내부에 존재하는 소스코드. 함수, 클래스 등의 내부코드 미포함</td></tr> <tr><td>eval 코드</td> <td>eval 실행 컨텍스트</td> <td>빌트인 전역함수인 eval 함수에 인수로 전달되어 실행되는 소스코드</td></tr> <tr><td>모듈 코드</td> <td>모듈 실행 컨텍스트</td> <td>모듈 내부에 존재하는 소스코드. 함수, 클래스 등의 내부코드 미포함</td></tr></tbody></table></div> <ul><li data-svelte-h="svelte-1l8zws5"><p>소스코드의 평가와 실행</p> <ul><li>과정 :<ol><li>소스코드의 평가<ol><li>실행 컨텍스트 생성</li> <li>변수, 함수 등의 선언문만 먼저 실행</li> <li>생성된 변수, 함수 식별자를 키로, 실행 컨텍스트가 관리하는 스코프에 등록</li></ol></li> <li>소스코드의 실행<ol><li>(선언문을 제외한) 소스코드 순차 실행 = 런타임 시작</li> <li>실행에 필요한 변수, 함수는 실행 컨텍스트가 관리하는 스코프에서 검색해 췯득</li> <li>소스코드의 실행 결과는 실행 컨텍스트가 관리하는 스코프에 등록</li></ol></li></ol></li></ul></li> <li data-svelte-h="svelte-5byrxy"><p>실행 컨텍스트의 역할</p> <ul><li>소스코드를 실행하는 데 필요한 환경을 제공하고, 코드의 실행 결과를 실제로 관리하는 영역</li></ul> <ol><li>전역 코드 평가<ol><li>선언문 먼저 실행</li> <li>변수, 함수가 실행 컨텍스트가 관리하는 전역 스코프에 등록</li> <li>var로 선언된 전역 변수, 함수 선언문으로 정의된 전역 함수는 전역 객체의 프로퍼티와 메서드가 됌</li></ol></li> <li>전역 코드 실행<ol><li>런타임 시작</li> <li>전역 변수에 값 할당, 함수 호출</li> <li>함수 호출 시, 전역 코드의 실행을 중단하고 코드 실행 순서를 변경해 함수 내부로 진입</li></ol></li> <li>함수 코드 평가<ol><li>함수 내부로 진입하면, 함수 코드를 평가</li> <li>매개변수와 지역 변수 선언문 실행 =&gt; 매개변수와 지역변수가 실행 컨텍스트가 관리하는 지역 스코프에 등록</li> <li>arguments 객체가 생성되어 지역스코프에 등록, this 바인딩 결정</li></ol></li> <li>함수 코드 실행<ol><li>함수 코드 순차 실행</li></ol></li></ol> <ul><li>식별자와 스코프는 실행 컨텍스트의 렉시컬 환경으로 관리하고, 코드 실행 순서는 <code>실행 컨텍스트 스택</code>으로 관리</li></ul></li> <li><p data-svelte-h="svelte-gww1if">실행 컨텍스트 스택</p> <!-- HTML_TAG_START --><pre class="shiki material-default" js="true"><div class="language-id">js</div><div class='code-container'><code><div class='line'>const x = 1;</div><div class='line'>function foo() &#123;</div><div class='line'>  function bar() &#123;&#125;</div><div class='line'>  bar();</div><div class='line'>&#125;</div><div class='line'>foo();</div></code></div></pre><!-- HTML_TAG_END --> <div class="overflow-x-auto mb-4"><table class="table w-full"><thead data-svelte-h="svelte-kxsnj3"><tr><th></th> <th></th> <th>bar 함수 실행 컨텍스트</th> <th></th> <th></th></tr></thead> <tbody data-svelte-h="svelte-shb4ip"><tr><td></td> <td>foo 함수 실행 컨텍스트</td> <td>foo 함수 실행 컨텍스트</td> <td>foo 함수 실행 컨텍스트</td> <td></td></tr> <tr><td>전역 실행 컨텍스트</td> <td>전역 실행 컨텍스트</td> <td>전역 실행 컨텍스트</td> <td>전역 실행 컨텍스트</td> <td>전역 실행 컨텍스트</td></tr></tbody></table></div></li> <li><p data-svelte-h="svelte-o5g63y">렉시컬 환경</p> <ul><li data-svelte-h="svelte-haa1qi"><p>식별자와 식별자에 바인딩된 값, 그리고 상위 스코프에 대한 참조를 기록하는 자료구조</p></li> <li><p>실행 컨텍스트를 구성하는 컴포넌트로, 스코프와 식별자를 관리<img src="https://github.com/ooheunda/how-to-enjoy/assets/64675543/fca4e42d-a588-4b66-9008-812754084b81" alt="image" class="rounded-lg my-2" loading="lazy" decoding="async"></p></li> <li data-svelte-h="svelte-1beo000"><p>구성</p> <ul><li><p>환경 레코드</p> <ul><li>스코프에 포함된 식별자를 등록하고 등록한 식별자에 바인딩 된 값을 관리하는 저장소</li> <li>소스코드 타입 따라 관리 내용에 차이 존재</li></ul></li> <li><p>외부 렉시컬 환경에 대한 참조</p> <ul><li>상위 스코프 = 상위 코드의 렉시컬 환경</li></ul></li></ul></li></ul></li> <li data-svelte-h="svelte-15bvuwx"><p>실행 컨텍스트의 생성과 식별자 검색 과정</p> <ul><li>전역 객체 생성</li> <li>전역 코드 평가</li></ul></li></ul>]]>
    </content>
    <category term="실행 컨텍스트" scheme="https://lyukidon.github.io/?tags=%EC%8B%A4%ED%96%89%20%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8" />
  </entry>
  <entry>
    <title type="html"><![CDATA[클로저(Closure)]]></title>
    <link href="https://lyukidon.github.io/Javascript/TIL/closure" />
    <id>https://lyukidon.github.io/Javascript/TIL/closure</id>
    <published>2024-03-12T00:00:00.000Z</published>
    <updated>2024-03-12T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[<ul data-svelte-h="svelte-1v6o0ih"><li><p>클로저</p> <ul><li>함수와 그 함수가 선언된 렉시컬 환경과의 조합</li> <li>함수 내부에서 함수 외부의 값을 참조할 수 있음.</li> <li>중첩되지 않은 함수인 경우는 값을 참조할 수 없음.</li></ul></li> <li><p>정적 스코프(렉시컬 스코프)</p> <ul><li>자바스크립트는 함수를 어디에 정의했는지에 따라 상위 스코프를 결정한다.</li></ul></li> <li><p>함수 객체의 내부 슬롯</p> <ul><li>렉시컬 스코프 가능하려면, 함수의 상위 스코프(함수가 정의된 환경)을 기억해야 한다.</li> <li>함수는 자신의 내부 슬롯에 상위 스코프의 참조를 저장한다.</li></ul></li> <li><p>클로저와 렉시컬 환경</p> <ul><li>외부 함수보다 중첩 함수가 더 오래 유지되는 경우, 중첩 함수는 이미 생명 주가기 종료한 외부 함수의 변수를 참조할 수 있다. 이런 중첩 함수는 클로저라고 한다.</li> <li>누군가가 참조하고 있는 메모리 공간을 함부로 해제하지 않는다.</li></ul></li> <li><p>클로저 활용</p> <ul><li>상태를 안전하게 변경하고 유지하기 위해 사용</li> <li>상태를 안전하게 은닉하고, 특정 함수에게만 상태 변경을 허용</li></ul></li></ul>]]>
    </content>
    <category term="closure" scheme="https://lyukidon.github.io/?tags=closure" />
  </entry>
  <entry>
    <title type="html"><![CDATA[TypeORM 관계 작성]]></title>
    <link href="https://lyukidon.github.io/Javascript/TIL/typeorm/relation" />
    <id>https://lyukidon.github.io/Javascript/TIL/typeorm/relation</id>
    <published>2024-03-12T00:00:00.000Z</published>
    <updated>2024-04-04T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[<h1 id="typeorm-관계-작성하기" data-svelte-h="svelte-1sujgiu"><a href="#typeorm-관계-작성하기">TypeORM 관계 작성하기</a></h1> <h2 id="11-관계" data-svelte-h="svelte-12unp5o"><a href="#11-관계">1:1 관계</a></h2> <ul><li><p data-svelte-h="svelte-f9l2ed">user</p> <!-- HTML_TAG_START --><pre class="shiki material-default" ts="true"><div class="language-id">ts</div><div class='code-container'><code><div class='line'>@Entity()</div><div class='line'>class User &#123;</div><div class='line'>  @PrimaryGeneratedColumn()</div><div class='line'>  userId: number;</div><div class='line'></div><div class='line'>  @Column()</div><div class='line'>  name: string;</div><div class='line'>&#125;</div></code></div></pre><!-- HTML_TAG_END --></li> <li><p data-svelte-h="svelte-62ixfe">point</p> <!-- HTML_TAG_START --><pre class="shiki material-default" ts="true"><div class="language-id">ts</div><div class='code-container'><code><div class='line'>@Entity()</div><div class='line'>class Point &#123;</div><div class='line'>  @PrimaryGeneratedColumn()</div><div class='line'>  pointId: number;</div><div class='line'></div><div class='line'>  @Column()</div><div class='line'>  point: number;</div><div class='line'></div><div class='line'>  @Column()</div><div class='line'>  userId: number;</div><div class='line'></div><div class='line'>  @OneToOne(() =&gt; User, user =&gt; user.userId)</div><div class='line'>  @JoinColumn(&#123; name: "userId", referencedColumnName: "userId" &#125;)</div><div class='line'>  user: User;</div><div class='line'>&#125;</div></code></div></pre><!-- HTML_TAG_END --></li></ul> <h2 id="1n-관계" data-svelte-h="svelte-1w355v5"><a href="#1n-관계">1:N 관계</a></h2> <ul><li><p data-svelte-h="svelte-f9l2ed">user</p> <!-- HTML_TAG_START --><pre class="shiki material-default" ts="true"><div class="language-id">ts</div><div class='code-container'><code><div class='line'>@Entity()</div><div class='line'>class User &#123;</div><div class='line'>  @PrimaryGeneratedColumn()</div><div class='line'>  userId: number;</div><div class='line'></div><div class='line'>  @Column()</div><div class='line'>  name: string;</div><div class='line'></div><div class='line'>  @OneToMany(() =&gt; Book, book =&gt; book.user)</div><div class='line'>  books: book[];</div><div class='line'>&#125;</div></code></div></pre><!-- HTML_TAG_END --></li> <li><p data-svelte-h="svelte-ueh36j">book</p> <!-- HTML_TAG_START --><pre class="shiki material-default" ts="true"><div class="language-id">ts</div><div class='code-container'><code><div class='line'>@Entity()</div><div class='line'>class Book &#123;</div><div class='line'>  @PrimaryGeneratedColumn()</div><div class='line'>  bookId: number;</div><div class='line'></div><div class='line'>  @Column()</div><div class='line'>  userId: number;</div><div class='line'>  </div><div class='line'>  @ManyToOne(() =&gt; User, user =&gt; user.books)</div><div class='line'>  @JoinColumn(&#123; name: "userId", referencedColumnName: "userId" &#125;)</div><div class='line'>  user: User;</div><div class='line'>&#125;</div></code></div></pre><!-- HTML_TAG_END --></li> <li data-svelte-h="svelte-1hsg0jc"><p>주의</p> <ul><li><code>referencedColumnName</code>은 join하는 table의 record 값을 적는다.</li></ul></li></ul>]]>
    </content>
    <category term="TypeORM" scheme="https://lyukidon.github.io/?tags=TypeORM" />
    <category term="Relation" scheme="https://lyukidon.github.io/?tags=Relation" />
  </entry>
  <entry>
    <title type="html"><![CDATA[Nest JS Decorator]]></title>
    <link href="https://lyukidon.github.io/Javascript/TIL/nestjs/decorator" />
    <id>https://lyukidon.github.io/Javascript/TIL/nestjs/decorator</id>
    <published>2024-03-11T00:00:00.000Z</published>
    <updated>2024-03-11T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[<ul><li data-svelte-h="svelte-nx76bn"><p>Decorator: NestJS 데코레이터는 클래스, 메서드, 프로퍼티 등에 특별한 기능을 부여하는 도구</p> <ul><li>장점<ul><li>모듈화 및 응집성 강화</li> <li>가독성 향상</li> <li>유지 관리 및 확장성 향상</li></ul></li> <li>종류<ul><li>클래스 데코레이터</li> <li>메서드 데코레이터</li> <li>프로퍼티 데코레이터</li> <li>커스텀 데코레이터</li></ul></li></ul></li> <li><p data-svelte-h="svelte-c60zuw">클래스 데코레이터</p> <ul><li data-svelte-h="svelte-19fdd6r"><code>@Controller</code><ul><li>역할<ul><li>HTTP 요청을 처리하는 컨트롤러 클래스를 식별</li> <li>라우팅 정보를 제공</li></ul></li> <li>인자<ul><li><code>path</code>: 컨트롤러의 기본 경로 지정</li></ul></li></ul></li> <li data-svelte-h="svelte-10eizzd"><code>@Service</code><ul><li>역할<ul><li>비즈니스 로직 + 데이터베이스 작업 담당하는 서비스 클래스를 식별</li> <li>의존성 주입 위한 토큰 제공</li></ul></li></ul></li> <li data-svelte-h="svelte-c7764b"><code>@Module</code></li> <li><code data-svelte-h="svelte-yhb0ep">@Injectable</code><ul><li>역할<ul><li data-svelte-h="svelte-d99it0">의존성 주입을 받을 수 있는 class임을 명시</li> <li>사용 방법<!-- HTML_TAG_START --><pre class="shiki material-default" ts="true"><div class="language-id">ts</div><div class='code-container'><code><div class='line'>@Injectable()</div><div class='line'>export class Person &#123;</div><div class='line'>  constructor(private readonly dependency: Dependency) &#123;&#125;</div><div class='line'>&#125;</div></code></div></pre><!-- HTML_TAG_END --></li></ul></li></ul></li></ul></li> <li data-svelte-h="svelte-1aswk8s"><p>메서드 데코레이터</p> <ul><li><code>@Get</code>, <code>@Post</code>, <code>@Put</code>, <code>@Delete</code><ul><li>인자<ul><li><code>path</code>: 엔드 포인트 경로 지정</li></ul></li></ul></li> <li><code>@UseGuards</code><ul><li>인자<ul><li><code>guards</code>: 적용할 가드의 클래스 목록 지정</li></ul></li></ul></li></ul></li> <li data-svelte-h="svelte-1mzgo9k"><p>프로퍼티 데코레이터</p> <ul><li><code>@Inject</code>: 의존성 주입</li> <li><code>@Body</code><ul><li>인자<ul><li><code>type?</code>: 요청 본문 데이터를 변환할 타입을 지정</li></ul></li></ul></li> <li><code>@Params</code><ul><li>인자<ul><li><code>name</code>: URL의 매개변수를 지정</li></ul></li></ul></li></ul></li> <li data-svelte-h="svelte-3px110"><p>커스텀 데코레이터</p> <ul><li>원하는 기능의 데코레이터를 생성</li></ul></li></ul>]]>
    </content>
    <category term="nestjs" scheme="https://lyukidon.github.io/?tags=nestjs" />
  </entry>
  <entry>
    <title type="html"><![CDATA[GraphQL과 REST API의 차이]]></title>
    <link href="https://lyukidon.github.io/Javascript/TIL/graphql/difference_from_restapi" />
    <id>https://lyukidon.github.io/Javascript/TIL/graphql/difference_from_restapi</id>
    <published>2024-03-07T00:00:00.000Z</published>
    <updated>2024-03-07T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[<p data-svelte-h="svelte-fwqfrf">참고: <a href="https://aws.amazon.com/ko/compare/the-difference-between-graphql-and-rest/" rel="nofollow noopener noreferrer external" target="_blank">https://aws.amazon.com/ko/compare/the-difference-between-graphql-and-rest/</a></p> <ul data-svelte-h="svelte-1xczfsk"><li><p>유사점</p> <ul><li>아키텍쳐<ul><li>상태를 저장하지 않으므로 서버가 요청 간에 응답 기록을 저장하지 않음</li> <li>클라이언트-서버 모델을 사용하므로 단일 클라이언트에서 요청하면 단일 서버에서 응답</li> <li>HTTP 프로토콜 기반</li></ul></li> <li>리소스 기반 설계</li> <li>데이터 교환<ul><li>데이터 형식: JSON</li> <li>캐싱 지원</li></ul></li> <li>언어 및 데이터베이스 중립성<ul><li>모든 어플리케이션과 호환이 잘됌</li></ul></li></ul></li> <li><p>REST API의 한계점</p> <ul><li>고정 구조 데이터 교환<ul><li>클라이언트 요청이 고정된 구조를 따라야 리소스 수신 가능</li></ul></li> <li>오버 패칭 &amp; 언더 패칭<ul><li>항상 전체 데이터 세트를 반환</li></ul></li></ul></li> <li><p>차이점</p> <ul><li>클라이언트 측 요청<ul><li>REST API<ul><li>HTTP 메서드, 엔드 포인트</li></ul></li> <li>GraphQL<ul><li>서버가 데이터를 반환하는 방식을 기술.</li> <li>모든 클라이언트 요청 = POST</li></ul></li></ul></li> <li>클라이언트에 반환되는 데이터<ul><li>REST API<ul><li>서버가 지정한 전체 리소스 구조</li></ul></li> <li>GraphQL<ul><li>클라이언트가 제공한 구조에 지정된 데이터만 반환</li></ul></li></ul></li> <li>서버 측 스키마<ul><li>REST API: X</li> <li>GraphQL: O</li></ul></li> <li>버전 관리<ul><li>REST API<ul><li>버전 관리 기능이 포함</li></ul></li> <li>GraphQL<ul><li>이전 버전 API와의 호환성이 필요</li></ul></li></ul></li> <li>오류 처리<ul><li>REST API<ul><li>오류 처리 기능을 빌드해야 함</li></ul></li> <li>GraphQL<ul><li>데이터 형식이 지정되어 있어, 자동으로 오류를 식별하고 메세지를 전달</li></ul></li></ul></li></ul></li> <li><p>GraphQL이 필요한 환경</p> <ul><li>대역폭이 제한되고, 요청 및 응답 수 최소화 =&gt; 통신 최적화</li> <li>하나의 엔드포인트</li> <li>클라이언트의 요청이 다양하고, 필요한 데이터(응답)이 각각 다른 경우</li></ul></li> <li><p>REST가 필요한 환경</p> <ul><li>애플리케이션 규모가 작음</li> <li>데이터 복잡성이 적음</li> <li>복잡한 데이터 쿼리가 필요 없음</li></ul></li></ul>]]>
    </content>
    <category term="GraphQL" scheme="https://lyukidon.github.io/?tags=GraphQL" />
  </entry>
  <entry>
    <title type="html"><![CDATA[TypeScript Generics]]></title>
    <link href="https://lyukidon.github.io/Javascript/TIL/typescript/generic" />
    <id>https://lyukidon.github.io/Javascript/TIL/typescript/generic</id>
    <published>2024-03-04T00:00:00.000Z</published>
    <updated>2024-03-04T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[<h2 id="제네릭" data-svelte-h="svelte-1rp21qz"><a href="#제네릭">제네릭</a></h2> <ul data-svelte-h="svelte-4sl92y"><li>사용성이 높은 컴포넌트를 만들 때 사용됨</li> <li>여러 타입을 넣어서 사용하는 컴포넌트에 적합</li></ul> <h2 id="예시" data-svelte-h="svelte-5vkn6w"><a href="#예시">예시</a></h2> <p data-svelte-h="svelte-n0jrd2"><strong>일반 TS로 작성한 함수</strong></p> <!-- HTML_TAG_START --><pre class="shiki material-default" ts="true"><div class="language-id">ts</div><div class='code-container'><code><div class='line'>function hello(data: string): string &#123;</div><div class='line'>  return data;</div><div class='line'>&#125;</div></code></div></pre><!-- HTML_TAG_END --> <p data-svelte-h="svelte-k6o9ev"><strong>제네릭을 사용해 작성된 함수</strong></p> <!-- HTML_TAG_START --><pre class="shiki material-default" ts="true"><div class="language-id">ts</div><div class='code-container'><code><div class='line'>function hello&lt;Type&gt;(data: Type): Type &#123;</div><div class='line'>  return data;</div><div class='line'>&#125;</div><div class='line'>const newFunc = hello&lt;string&gt;("hello world");</div><div class='line'>newFunc(); // "hello world"</div></code></div></pre><!-- HTML_TAG_END --> <p data-svelte-h="svelte-bejh8z"><strong>여러 타입을 작성하는 경우</strong></p> <!-- HTML_TAG_START --><pre class="shiki material-default" ts="true"><div class="language-id">ts</div><div class='code-container'><code><div class='line'>function hello&lt;T, P&gt;(key: T, value: P): Map&lt;T, P&gt; &#123;</div><div class='line'>  const data = new Map&lt;T, P&gt;([[key, value]]);</div><div class='line'>  return data;</div><div class='line'>&#125;</div></code></div></pre><!-- HTML_TAG_END --> <p data-svelte-h="svelte-1g3jyvz"><strong>제네릭 제약 조건</strong></p> <!-- HTML_TAG_START --><pre class="shiki material-default" ts="true"><div class="language-id">ts</div><div class='code-container'><code><div class='line'>function hello&lt;Type&gt;(data: Type) &#123;</div><div class='line'>  return data.name; //에러 발생</div><div class='line'>&#125;</div></code></div></pre><!-- HTML_TAG_END --> <p data-svelte-h="svelte-v88wnk">data의 Type이 지정되지 않은 경우이기 때문에 오류가 발생한다. 이 경우에는</p> <!-- HTML_TAG_START --><pre class="shiki material-default" ts="true"><div class="language-id">ts</div><div class='code-container'><code><div class='line'>interface Person &#123;</div><div class='line'>  name: string;</div><div class='line'>&#125;</div><div class='line'></div><div class='line'>function hello&lt;Type extends Person&gt;(data: Type) &#123;</div><div class='line'>  return data.name; //에러 발생</div><div class='line'>&#125;</div></code></div></pre><!-- HTML_TAG_END --> <p data-svelte-h="svelte-g08pzi"><strong><code>keyof</code> 키워드</strong>특정 객체의 key를 받아와, 그 객체의 key 값이 아닌 경우 에러를 발생시킵니다.</p> <!-- HTML_TAG_START --><pre class="shiki material-default" ts="true"><div class="language-id">ts</div><div class='code-container'><code><div class='line'>type Obj = &#123; a: 1; b: 2; c: 3 &#125;;</div><div class='line'>type T = keyof Obj; // "a" | "b" | "c"</div></code></div></pre><!-- HTML_TAG_END -->]]>
    </content>
    <category term="typescript" scheme="https://lyukidon.github.io/?tags=typescript" />
  </entry>
  <entry>
    <title type="html"><![CDATA[TypeScript Types]]></title>
    <link href="https://lyukidon.github.io/Javascript/TIL/typescript/types" />
    <id>https://lyukidon.github.io/Javascript/TIL/typescript/types</id>
    <published>2024-03-04T00:00:00.000Z</published>
    <updated>2024-03-04T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[<h2 id="원시-타입" data-svelte-h="svelte-16klk91"><a href="#원시-타입">원시 타입</a></h2> <ul data-svelte-h="svelte-kb5o3b"><li>string</li> <li>number<ul><li>ES2020에 bigint가 추가됌. <code>BigInt(100)</code>으로 작성</li></ul></li> <li>boolean</li> <li>symbol</li></ul> <h2 id="배열" data-svelte-h="svelte-10y603c"><a href="#배열">배열</a></h2> <ul><li>type[]의 형태로 작성<!-- HTML_TAG_START --><pre class="shiki material-default" ts="true"><div class="language-id">ts</div><div class='code-container'><code><div class='line'>number[]</div><div class='line'>Array&lt;number&gt;</div></code></div></pre><!-- HTML_TAG_END --></li></ul> <h2 id="any" data-svelte-h="svelte-kozrou"><a href="#any">any</a></h2> <ul data-svelte-h="svelte-14f2siw"><li>특별한 타입이 존재하지 않는 경우</li></ul> <h2 id="객체-타입" data-svelte-h="svelte-zq0rjq"><a href="#객체-타입">객체 타입</a></h2> <ul><li>객체 타입은 <code data-svelte-h="svelte-1d6e1s5">;</code>, <code data-svelte-h="svelte-l712ya">,</code>로 사용해서 작성<!-- HTML_TAG_START --><pre class="shiki material-default" ts="true"><div class="language-id">ts</div><div class='code-container'><code><div class='line'>&#123;</div><div class='line'>  name: string;</div><div class='line'>  age: number;</div><div class='line'>&#125;</div></code></div></pre><!-- HTML_TAG_END --></li> <li data-svelte-h="svelte-1hes0on">옵셔널 프로퍼티<ul><li>객체의 프로퍼티 타입을 선택적으로 지정할 수 있습니다.</li></ul></li></ul> <h2 id="유니언-타입" data-svelte-h="svelte-1wcurdr"><a href="#유니언-타입">유니언 타입</a></h2> <ul><li>여러 타입을 사용할 수 있도록 하는 타입<!-- HTML_TAG_START --><pre class="shiki material-default" ts="true"><div class="language-id">ts</div><div class='code-container'><code><div class='line'>string | number;</div></code></div></pre><!-- HTML_TAG_END --></li></ul> <h2 id="타입-별칭" data-svelte-h="svelte-1qmp88k"><a href="#타입-별칭">타입 별칭</a></h2> <ul data-svelte-h="svelte-yyf8z5"><li>type</li> <li>interface</li></ul>]]>
    </content>
    <category term="typescript" scheme="https://lyukidon.github.io/?tags=typescript" />
  </entry>
  <entry>
    <title type="html"><![CDATA[this를 선택 호출하는 방법]]></title>
    <link href="https://lyukidon.github.io/Javascript/TIL/this/간접_호출" />
    <id>https://lyukidon.github.io/Javascript/TIL/this/간접_호출</id>
    <published>2024-02-27T00:00:00.000Z</published>
    <updated>2024-02-27T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[<ul data-svelte-h="svelte-1ls4uoe"><li>Function.prototype.apply/call/bind메서드에 의한 간접 호출<ul><li>apply<ul><li><code>Function.prototype.apply(thisArg[, argsArray])</code></li> <li>사용법 : <code>foo.apply(thisArg)</code></li> <li>예시 : <code>foo.apply(thisArg, [1, 2, 3, 4])</code></li></ul></li> <li>call<ul><li><code>Function.prototype.apply(thisArg[, arg1[, arg2[, ...]]])</code></li> <li>사용법: <code>foo.apply(thisArg)</code></li> <li>예시 : <code>foo.apply(thisArg, 1, 2, 3, 4)</code></li></ul></li> <li>bind<ul><li>callback 함수의 바인딩을 지정</li></ul></li></ul></li></ul>]]>
    </content>
    <category term="this" scheme="https://lyukidon.github.io/?tags=this" />
  </entry>
  <entry>
    <title type="html"><![CDATA[의존성 주입]]></title>
    <link href="https://lyukidon.github.io/Javascript/TIL/dependency_injection" />
    <id>https://lyukidon.github.io/Javascript/TIL/dependency_injection</id>
    <published>2024-02-25T00:00:00.000Z</published>
    <updated>2024-02-25T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[<p data-svelte-h="svelte-gin53o">필요한 객체를 생성하는 것이 아니라, 외부에서 매개변수로 받아오는 것</p> <p data-svelte-h="svelte-xrf083">장점</p> <ul data-svelte-h="svelte-1qqqdae"><li>결합도 감소</li> <li>테스트 용이성 향상</li> <li>재사용성 증대</li> <li>변경 관리 용이</li></ul> <p data-svelte-h="svelte-1ty26ni">방법</p> <ul data-svelte-h="svelte-shokp0"><li>생성자 주입</li> <li>세터 주입</li> <li>필드 주입</li></ul> <p data-svelte-h="svelte-1bgkxyr">import와의 차이점</p> <div class="overflow-x-auto mb-4"><table class="table w-full"><thead data-svelte-h="svelte-1j1f5vl"><tr><th>분류</th> <th>의존성 주입</th> <th>import</th></tr></thead> <tbody data-svelte-h="svelte-1p3kh0q"><tr><td>의존 관계 설정 방식</td> <td>매개변수로 직접 전달</td> <td>코드에 직접 명시</td></tr> <tr><td>의존 관계의 유연성</td> <td>외부에서 설정하기 때문에 의존 관계를 쉽게 변경</td> <td>의존 관계를 변경하기 위해서는 코드를 수정</td></tr> <tr><td>테스트 용이성</td> <td>객체를 쉽게 분리하여 단위 테스트를 수행</td> <td>코드에 직접 삽입되어 있기 때문에 단위 테스트를 수행하기 어려움</td></tr> <tr><td>코드의 가독성</td> <td>생성자에 명시되어 있어 코드를 읽기 어려움</td> <td>의존 관계 설정 코드가 코드 전체에 분산되어 있어 코드를 읽기 어려움</td></tr> <tr><td>사용 시점</td> <td>객체 생성 시점에 의존 관계를 설정</td> <td>컴파일 시점에 의존 관계를 설정</td></tr></tbody></table></div> <p data-svelte-h="svelte-6lb8w3">생성자를 이용한 의존성 주입은 의존 관계 변형과 테스트가 쉽지만 가독성이 떨어진다는 단점이 존재.</p> <p data-svelte-h="svelte-h92k66">import는 가독성은 높지만, 의존 관계 변형과 테스트가 어려움</p>]]>
    </content>
    <category term="Dependency Injection" scheme="https://lyukidon.github.io/?tags=Dependency%20Injection" />
  </entry>
  <entry>
    <title type="html"><![CDATA[TypeORM 적용 시, 연결 에러]]></title>
    <link href="https://lyukidon.github.io/Javascript/TIL/typeorm/connection_error" />
    <id>https://lyukidon.github.io/Javascript/TIL/typeorm/connection_error</id>
    <published>2024-02-23T00:00:00.000Z</published>
    <updated>2024-02-23T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[<p data-svelte-h="svelte-1jkqdq7">Prisma에서 TypeORM으로 변경하는 경우, 인증에서 문제가 발생하는 경우가 있다.</p> <!-- HTML_TAG_START --><pre class="shiki material-default"><div class='code-container'><code><div class='line'>errno: 1251,</div><div class='line'>sqlMessage: 'Client does not support authentication protocol requested by server; consider upgrading MySQL client'</div></code></div></pre><!-- HTML_TAG_END --> <p data-svelte-h="svelte-mcob3l">위와 같은 경우는 mysql의 접근이 불가능하고 password plugin에 문제가 있는 경우인데, 이것을 수정해주면 된다.</p> <ol data-svelte-h="svelte-fri7zr"><li>mysql cli에 접속한다.</li></ol> <!-- HTML_TAG_START --><pre class="shiki material-default"><div class='code-container'><code><div class='line'>docker exec -it mysql /bin/bash</div><div class='line'>mysql -u root -p</div></code></div></pre><!-- HTML_TAG_END --> <ol start="2" data-svelte-h="svelte-pgme3p"><li><code>mysql</code> database로 변경한다.</li></ol> <!-- HTML_TAG_START --><pre class="shiki material-default"><div class='code-container'><code><div class='line'>show databases;</div><div class='line'></div><div class='line'>+--------------------+</div><div class='line'>| Database           |</div><div class='line'>+--------------------+</div><div class='line'>| information_schema |</div><div class='line'>| mysql              |</div><div class='line'>| performance_schema |</div><div class='line'>| sys                |</div><div class='line'>+--------------------+</div><div class='line'></div><div class='line'>use mysql;</div></code></div></pre><!-- HTML_TAG_END --> <ol start="3" data-svelte-h="svelte-1e1b7u9"><li>설정을 확인해본다.</li></ol> <!-- HTML_TAG_START --><pre class="shiki material-default"><div class='code-container'><code><div class='line'>select user, host, plugin from user;</div><div class='line'></div><div class='line'>+------------------+-----------+-----------------------+</div><div class='line'>| user             | host      | plugin                |</div><div class='line'>+------------------+-----------+-----------------------+</div><div class='line'>| root             | %         | caching_sha2_password |</div><div class='line'>| mysql.infoschema | localhost | caching_sha2_password |</div><div class='line'>| mysql.session    | localhost | caching_sha2_password |</div><div class='line'>| mysql.sys        | localhost | caching_sha2_password |</div><div class='line'>| root             | localhost | caching_sha2_password |</div><div class='line'>+------------------+-----------+-----------------------+</div></code></div></pre><!-- HTML_TAG_END --> <p data-svelte-h="svelte-tgwn73">root 유저의 <code>caching_sha2_password</code>를 <code>mysql_native_password</code>로 변경해준다.</p> <ol start="4" data-svelte-h="svelte-15zhbis"><li>설정을 변경한다.</li></ol> <!-- HTML_TAG_START --><pre class="shiki material-default"><div class='code-container'><code><div class='line'>ALTER USER 'username'@'host' IDENTIFIED WITH mysql_native_password BY 'new password';</div></code></div></pre><!-- HTML_TAG_END --> <ul data-svelte-h="svelte-7lkdad"><li><code>username</code> : 원하는 유저의 이름을 작성. root</li> <li><code>host</code> : 연결하고자 호스트 작성. %는 모든 호스트</li> <li><code>IDENTIFIED WITH</code> : 사용자 인증 방법 지정. <code>mysql_native_password</code>로 설정</li> <li><code>new password</code> : 새로운 비밀번호 지정. <strong>안하면 오류 발생</strong></li></ul> <ol start="5" data-svelte-h="svelte-13t1ke9"><li>설정을 재확인한다.</li></ol> <!-- HTML_TAG_START --><pre class="shiki material-default"><div class='code-container'><code><div class='line'>select user, host, plugin from user;</div><div class='line'></div><div class='line'>+------------------+-----------+-----------------------+</div><div class='line'>| user             | host      | plugin                |</div><div class='line'>+------------------+-----------+-----------------------+</div><div class='line'>| root             | %         | mysql_native_password |</div><div class='line'>| mysql.infoschema | localhost | caching_sha2_password |</div><div class='line'>| mysql.session    | localhost | caching_sha2_password |</div><div class='line'>| mysql.sys        | localhost | caching_sha2_password |</div><div class='line'>| root             | localhost | mysql_native_password |</div><div class='line'>+------------------+-----------+-----------------------+</div></code></div></pre><!-- HTML_TAG_END --> <ol start="6" data-svelte-h="svelte-p3q7ln"><li>작동되는지 확인한다.</li></ol>]]>
    </content>
    <category term="TypeORM" scheme="https://lyukidon.github.io/?tags=TypeORM" />
    <category term="error" scheme="https://lyukidon.github.io/?tags=error" />
  </entry>
  <entry>
    <title type="html"><![CDATA[Jest 사용법]]></title>
    <link href="https://lyukidon.github.io/Javascript/TIL/jest/jest_execute_option" />
    <id>https://lyukidon.github.io/Javascript/TIL/jest/jest_execute_option</id>
    <published>2024-02-22T00:00:00.000Z</published>
    <updated>2024-02-22T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[<ul data-svelte-h="svelte-aoj80s"><li><p>CLI</p> <ul><li><code>--forceExit</code> : 테스트 코드 완료 시, 강제로 Jest 종료</li> <li><code>--silent</code> : console.log 출력 X</li> <li><code>--coverage</code> : 테스트 코드 커버리지를 출력</li> <li><code>--verbose</code>: 개별 테스트 결과를 표시</li></ul></li> <li><p>JEST FUNCTION</p> <ul><li><code>test(string, fn)</code> : 단위 테스트 작성</li> <li><code>expect(fn)</code> : 함수를 입력하여 예상되는 값을 출력</li></ul></li> <li><p>GLOBAL JEST FUNCTION</p> <ul><li><code>afterAll(fn, timeout)</code> : 모든 테스트 완료 후 수행, 테스트 완료 후 DB나 MOCK데이터 초기화 위해</li> <li><code>afterEach(fn, timeout)</code> : 각 테스트 완료 후 수행, 변경된 데이터를 초기화 한 후 테스트를 수행하기 위해</li> <li><code>beforeAll(fn, timeout)</code> : 모든 테스트 실행 전 수행, DB나 MOCK데이터 초기화 위해</li> <li><code>beforeEach(fn, timeout)</code> : 각 테스트 실행 전 수행, 동일 설정을 반복적으로 해야하는 경우</li></ul></li> <li><p>METHOD</p> <ul><li><code>mockReturnValue(value)</code> : mock함수 반환값 지정</li> <li><code>toBe(value)</code> : 결과 값(value)이 일치하는지 확인, 객체 비교 시 인스턴스 ID까지 확인(strict)</li> <li><code>toEqual(value)</code> : 결과 값(value)이 일치하는지 확인</li> <li><code>toMatch(regexp | string)</code> : 문자열 검증</li> <li><code>toBeTruthy()</code> <code>toBeFalsy()</code> : 결과 값이 boolean인지 검증</li> <li><code>toBeInstanceOf(class)</code> : class가 동일한 인스턴스인지 검증</li> <li><code>toHaveProperty(keyPath, value?)</code> : 객체의 key, value가 같은지 검증</li> <li><code>toMatchObject(object)</code> : 입력 객체와 출력 객체가 일치하는지 검증, 입력 객체에는 없고 결과 객체에만 있는 속성의 경우 무시</li></ul></li></ul>]]>
    </content>
    <category term="jest" scheme="https://lyukidon.github.io/?tags=jest" />
  </entry>
  <entry>
    <title type="html"><![CDATA[Express Session 설정하기]]></title>
    <link href="https://lyukidon.github.io/Javascript/TIL/express/session" />
    <id>https://lyukidon.github.io/Javascript/TIL/express/session</id>
    <published>2024-02-20T00:00:00.000Z</published>
    <updated>2024-02-20T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[<ul><li><p data-svelte-h="svelte-x21egh"><strong>app.js</strong></p> <!-- HTML_TAG_START --><pre class="shiki material-default" js="true"><div class="language-id">js</div><div class='code-container'><code><div class='line'>app.use(</div><div class='line'>  session(&#123;</div><div class='line'>    secret: "SECRET_KEY", //session 비밀키 설정</div><div class='line'>    resave: false,</div><div class='line'>    saveUninitialized: false,</div><div class='line'>    cookie: &#123;</div><div class='line'>      maxAge: 1000 * 60 * 60 * 24 * 7</div><div class='line'>    &#125;</div><div class='line'>  &#125;)</div><div class='line'>);</div></code></div></pre><!-- HTML_TAG_END --> <ul data-svelte-h="svelte-xd84v7"><li>secret : 세션 암호화 키</li> <li>resave : 세션 변경이 없어도 저장할지 여부. (default: true)<ul><li>세션 데이터 변경이 잦은 경우 =&gt; true</li> <li>세션 데이터 변경이 드문 경우 =&gt; false</li></ul></li> <li>saveUninitialized : 세션 초기화 여부. (default: true)</li> <li>cookie : 쿠키 설정</li></ul></li> <li><p data-svelte-h="svelte-kh8jt9">사용 시</p> <!-- HTML_TAG_START --><pre class="shiki material-default"><div class='code-container'><code><div class='line'>// 보낼 때</div><div class='line'>request.session.obj = obj</div><div class='line'>// 받을 때</div><div class='line'>const obj = request.session</div></code></div></pre><!-- HTML_TAG_END --></li></ul>]]>
    </content>
    <category term="express-session" scheme="https://lyukidon.github.io/?tags=express-session" />
  </entry>
  <entry>
    <title type="html"><![CDATA[this 바인딩]]></title>
    <link href="https://lyukidon.github.io/Javascript/TIL/this" />
    <id>https://lyukidon.github.io/Javascript/TIL/this</id>
    <published>2024-02-18T00:00:00.000Z</published>
    <updated>2024-03-06T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[<p data-svelte-h="svelte-6n7k3w">this는 자기 참조 변수이다. this 바인딩은 호출 방식에 따라서 동적으로 결정된다.</p> <div class="overflow-x-auto mb-4"><table class="table w-full"><thead data-svelte-h="svelte-16s0d5h"><tr><th>함수 호출 방식</th> <th>this가 가리키는 값</th></tr></thead> <tbody data-svelte-h="svelte-1du37mo"><tr><td>일반 함수</td> <td>전역 객체</td></tr> <tr><td>메서드</td> <td>메서드를 호출한 객체</td></tr> <tr><td>생성자 함수</td> <td>생성자가 생성할 인스턴스</td></tr></tbody></table></div> <!-- HTML_TAG_START --><pre class="shiki material-default" js="true"><div class="language-id">js</div><div class='code-container'><code><div class='line'>function test &#123;&#125;</div><div class='line'>const obj = &#123; test &#125;</div><div class='line'></div><div class='line'>// 일반 함수 호출</div><div class='line'>test()</div><div class='line'>//메서드 호출</div><div class='line'>obj.test()</div><div class='line'>//생성자 함수 호출</div><div class='line'>const hello = new test();</div></code></div></pre><!-- HTML_TAG_END --> <p data-svelte-h="svelte-dhvuk9">new 연산자를 이용해 호출 시, 생성자 함수로서 동작</p> <ul data-svelte-h="svelte-rs5dfk"><li>this : 자기 참조 변수(자신이 속한 객체 or 자신이 생성할 인스턴스를 가리킴)</li> <li>this 바인딩은 함수 호출 방식에 따라 동적으로 결정</li> <li>strict mode가 영향을 주기도 함</li> <li>호출 방식에 따른 this<ul><li>일반 함수 호출</li> <li>메서드 호출</li> <li>생성자 함수 호출</li> <li>Function.prototype.apply/call/bind메서드에 의한 간접 호출</li></ul></li> <li>일반 함수 호출<ul><li>전역 객체 바인딩</li></ul></li> <li>메서드 호출<ul><li>연산자 앞의 객체가 바인딩 (.prototype도 같다.)</li> <li>일반 함수로 호출 시, 전역 객체</li></ul></li> <li>생성자 함수 호출<ul><li>생성할 인스턴스에 바인딩</li> <li>일반 함수로 호출시는 언제나 전역 객체이다.</li></ul></li> <li>Function.prototype.apply/call/bind메서드에 의한 간접 호출<ul><li>apply<ul><li><code>Function.prototype.apply(thisArg[, argsArray])</code></li> <li>사용법 : <code>foo.apply(thisArg)</code></li> <li>예시 : <code>foo.apply(thisArg, [1, 2, 3, 4])</code></li></ul></li> <li>call<ul><li><code>Function.prototype.apply(thisArg[, arg1[, arg2[, ...]]])</code></li> <li>사용법: <code>foo.apply(thisArg)</code></li> <li>예시 : <code>foo.apply(thisArg, 1, 2, 3, 4)</code></li></ul></li> <li>bind<ul><li>callback 함수의 바인딩을 지정</li></ul></li></ul></li></ul>]]>
    </content>
    <category term="this" scheme="https://lyukidon.github.io/?tags=this" />
  </entry>
  <entry>
    <title type="html"><![CDATA[3계층 아키텍처]]></title>
    <link href="https://lyukidon.github.io/Javascript/TIL/3_layer_architecture" />
    <id>https://lyukidon.github.io/Javascript/TIL/3_layer_architecture</id>
    <published>2024-02-17T00:00:00.000Z</published>
    <updated>2024-02-17T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[<ul data-svelte-h="svelte-8ali71"><li><p>구성</p> <ul><li>프레젠테이션 계층 (controller)</li> <li>비즈니스 로직 계층 (service)</li> <li>데이터 엑세스 계층 (database)</li></ul></li> <li><p>역할</p> <ul><li>Controller<ul><li>어플리케이션의 가장 바깥에 위치</li> <li>Client와의 요청과 응답</li></ul></li> <li>Service<ul><li>어플리케이션의 중간</li> <li>API의 실제 역할을 하는 부분</li></ul></li> <li>Database<ul><li>어플리케이션의 안쪽</li> <li>실제 데이터베이스와 통신하는 부분</li></ul></li></ul></li></ul>]]>
    </content>
    <category term="3계층 아키텍처" scheme="https://lyukidon.github.io/?tags=3%EA%B3%84%EC%B8%B5%20%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98" />
  </entry>
  <entry>
    <title type="html"><![CDATA[TypeORM 설정하기]]></title>
    <link href="https://lyukidon.github.io/Javascript/TIL/typeorm/getting_started" />
    <id>https://lyukidon.github.io/Javascript/TIL/typeorm/getting_started</id>
    <published>2024-02-16T00:00:00.000Z</published>
    <updated>2024-02-16T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[<ul><li><p data-svelte-h="svelte-6i5nze">새로운 프로젝트 생성하는 경우</p> <ol><li><p data-svelte-h="svelte-1r2k6be"><code>npx typeorm init --name Project --database mysql</code></p> <!-- HTML_TAG_START --><pre class="shiki material-default"><div class='code-container'><code><div class='line'>MyProject</div><div class='line'>├── src                   // 소스 코드 작성</div><div class='line'>│   ├── entity            // 데이터베이스 모델(스키마)작성</div><div class='line'>│   │   └── User.ts       // sample entity</div><div class='line'>│   ├── migration         // 마이그레이션이 저장되는 곳</div><div class='line'>│   ├── data-source.ts    // 연결 설정</div><div class='line'>│   └── index.ts          // start point of your application</div><div class='line'>├── .gitignore            // standard gitignore file</div><div class='line'>├── package.json          // node module dependencies</div><div class='line'>├── README.md             // simple readme file</div><div class='line'>├── tsconfig.json         // TypeScript compiler options</div><div class='line'>└── ormconfig.json        // TypeORM의 설정 파일</div></code></div></pre><!-- HTML_TAG_END --></li></ol></li> <li data-svelte-h="svelte-1v7ryac"><p>entity : 테이블 스키마를 작성</p></li> <li data-svelte-h="svelte-1pxgha9"><p>data-source.ts : 파일의 연결 설정을 작성</p></li> <li data-svelte-h="svelte-1kgx0x0"><p>index.ts : 프로그램 작동 파일 (app.js와 같음)</p></li> <li data-svelte-h="svelte-nv1kj2"><p>ormconfig.json : TypeORM 설정 파일. 데이터 베이스 연결 정보, 엔티티 위치, 동기화 설정 등을 작성</p></li></ul>]]>
    </content>
    <category term="TypeORM" scheme="https://lyukidon.github.io/?tags=TypeORM" />
    <category term="Getting Started" scheme="https://lyukidon.github.io/?tags=Getting%20Started" />
  </entry>
  <entry>
    <title type="html"><![CDATA[Webpack과 Babel]]></title>
    <link href="https://lyukidon.github.io/Javascript/TIL/webpack_babel" />
    <id>https://lyukidon.github.io/Javascript/TIL/webpack_babel</id>
    <published>2024-02-16T00:00:00.000Z</published>
    <updated>2024-02-16T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[<h2 id="webpack-이란" data-svelte-h="svelte-1c667il"><a href="#webpack-이란">Webpack 이란</a></h2> <p data-svelte-h="svelte-1xoqt9b">Webpack은</p> <h2 id="babel-이란" data-svelte-h="svelte-g9zm9g"><a href="#babel-이란">Babel 이란</a></h2>]]>
    </content>
    <category term="webpack" scheme="https://lyukidon.github.io/?tags=webpack" />
    <category term="babel" scheme="https://lyukidon.github.io/?tags=babel" />
    <category term="module bundler" scheme="https://lyukidon.github.io/?tags=module%20bundler" />
    <category term="javascript compiler" scheme="https://lyukidon.github.io/?tags=javascript%20compiler" />
  </entry>
  <entry>
    <title type="html"><![CDATA[ejs 구문과 태그 오류 해결 방법]]></title>
    <link href="https://lyukidon.github.io/Javascript/TIL/ejs" />
    <id>https://lyukidon.github.io/Javascript/TIL/ejs</id>
    <published>2024-02-14T00:00:00.000Z</published>
    <updated>2024-02-14T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[<p data-svelte-h="svelte-14iy0j3">ejs를 렌더링할 때, html에 자바스크립트를 삽입하는 방법이 있다.</p> <ul data-svelte-h="svelte-8v0q2i"><li>Scriptlet tag : 흐름 제어 용으로 출력되지 않는다.<ul><li><code>&lt;% %&gt;</code></li></ul></li> <li>Output tag : 자바스크립트를 반환하는 태그<ul><li><code>&lt;%- %&gt;</code> (unescape) : 구문을 적용하여 반환</li> <li><code>&lt;%= %&gt;</code> (escape) : 단순 문자열로 반환</li></ul></li></ul> <hr> <p data-svelte-h="svelte-1rj2ci5">VS CODE에서 위의 구문이 오류가 나는 경우가 있다.</p> <p data-svelte-h="svelte-75s3mi">Extension 중, <code>EJS Language Support</code>를 설치해주면 오류가 사라진다.</p>]]>
    </content>
    <category term="ejs" scheme="https://lyukidon.github.io/?tags=ejs" />
  </entry>
  <entry>
    <title type="html"><![CDATA[Passport-local 구축하기]]></title>
    <link href="https://lyukidon.github.io/Javascript/TIL/passport/passport-local" />
    <id>https://lyukidon.github.io/Javascript/TIL/passport/passport-local</id>
    <published>2024-02-14T00:00:00.000Z</published>
    <updated>2024-02-14T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[<ul><li><p data-svelte-h="svelte-8jztr3">Library</p> <!-- HTML_TAG_START --><pre class="shiki material-default"><div class='code-container'><code><div class='line'>express</div><div class='line'>express-session</div><div class='line'>passport</div><div class='line'>passport-local</div></code></div></pre><!-- HTML_TAG_END --></li> <li><p data-svelte-h="svelte-mbisda">Directory Structure</p> <!-- HTML_TAG_START --><pre class="shiki material-default"><div class='code-container'><code><div class='line'>app.js</div><div class='line'></div><div class='line'>passport</div><div class='line'>___index.js</div><div class='line'>___localStrategy.js</div></code></div></pre><!-- HTML_TAG_END --> <ul><li><p data-svelte-h="svelte-1eq4lc">app.js</p> <!-- HTML_TAG_START --><pre class="shiki material-default" js="true"><div class="language-id">js</div><div class='code-container'><code><div class='line'>import express from "express";</div><div class='line'>import session from "express-session";</div><div class='line'>import passport from "passport";</div><div class='line'>import passportConfig from "./passport/index.js";</div><div class='line'></div><div class='line'>const app = express();</div><div class='line'>passportConfig();</div><div class='line'>app.use(</div><div class='line'>  session(&#123;</div><div class='line'>    secret: "secret-key",</div><div class='line'>    resave: false,</div><div class='line'>    saveUninitialized: false,</div><div class='line'>    cookie: &#123; maxAge: 1000 * 60 * 60 * 24 * 7 &#125;</div><div class='line'>  &#125;)</div><div class='line'>);</div><div class='line'>app.use(passport.initialize());</div><div class='line'>app.use(passport.session());</div><div class='line'></div><div class='line'>app.use("/", localRouter);</div><div class='line'></div><div class='line'>app.listen(3000);</div></code></div></pre><!-- HTML_TAG_END --></li> <li><p data-svelte-h="svelte-p045ti">passport/index.js</p> <p data-svelte-h="svelte-11q7ksz">session을 생성해 전달하고, 받은 session의 값을 서버에서 사용할 수 있도록 해주는 부분이다.</p> <!-- HTML_TAG_START --><pre class="shiki material-default" js="true"><div class="language-id">js</div><div class='code-container'><code><div class='line'>import passport from "passport";</div><div class='line'>import &#123; prisma &#125; from "../prisma/index.js";</div><div class='line'>import local from "./localStrategy.js";</div><div class='line'></div><div class='line'>export default () =&gt; &#123;</div><div class='line'>  passport.serializeUser(function (id, done) &#123;</div><div class='line'>    // done의 두 번째 인자로 session 생성, deserializeUser로 전달</div><div class='line'>    done(null, id);</div><div class='line'>  &#125;);</div><div class='line'>  passport.deserializeUser(function (id, done) &#123;</div><div class='line'>    done(null, user); // request로 데이터를 전달 (예시와 같은 경우는 req.user로 전달)</div><div class='line'>  &#125;);</div><div class='line'>&#125;;</div></code></div></pre><!-- HTML_TAG_END --></li> <li><p data-svelte-h="svelte-sbx49s">passport/localStrategy.js</p> <p data-svelte-h="svelte-vzhrzs">password의 전략을 짜는 위치이다.</p> <!-- HTML_TAG_START --><pre class="shiki material-default" js="true"><div class="language-id">js</div><div class='code-container'><code><div class='line'>import passport from "passport";</div><div class='line'>import &#123; Strategy as LocalStrategy &#125; from "passport-local";</div><div class='line'></div><div class='line'>export default () =&gt; &#123;</div><div class='line'>  passport.use(</div><div class='line'>    new LocalStrategy(</div><div class='line'>      &#123;</div><div class='line'>        usernameField: "email",</div><div class='line'>        passwordField: "password"</div><div class='line'>      &#125;,</div><div class='line'>      async (email, password, done) =&gt; &#123;</div><div class='line'>        try &#123;</div><div class='line'>          done(errorMessage, dataPayload, callback); // password Index의 serializeUser로 넘겨줌</div><div class='line'>        &#125; catch (error) &#123;</div><div class='line'>          done(error);</div><div class='line'>        &#125;</div><div class='line'>      &#125;</div><div class='line'>    )</div><div class='line'>  );</div><div class='line'>&#125;;</div></code></div></pre><!-- HTML_TAG_END --></li></ul></li></ul>]]>
    </content>
    <category term="passport" scheme="https://lyukidon.github.io/?tags=passport" />
    <category term="passport-local" scheme="https://lyukidon.github.io/?tags=passport-local" />
  </entry>
  <entry>
    <title type="html"><![CDATA[Passport-naver 예제 보기]]></title>
    <link href="https://lyukidon.github.io/Javascript/TIL/passport/passport-naver-example" />
    <id>https://lyukidon.github.io/Javascript/TIL/passport/passport-naver-example</id>
    <published>2024-02-08T00:00:00.000Z</published>
    <updated>2024-02-08T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[<p data-svelte-h="svelte-ynmtsq">passport-naver npm 모듈을 보면 예시가 있다.</p> <p data-svelte-h="svelte-1tv8ioc">예제를 실행하는 방법은 다음과 같다.</p> <ol><li><p data-svelte-h="svelte-mhwo08">파일 다운로드</p> <!-- HTML_TAG_START --><pre class="shiki material-default" bash="true"><div class="language-id">bash</div><div class='code-container'><code><div class='line'>git clone https://github.com/naver/passport-naver.git</div><div class='line'></div><div class='line'>npm install</div><div class='line'></div><div class='line'>cd examples</div><div class='line'></div><div class='line'>npm install</div><div class='line'></div><div class='line'>node app.js</div></code></div></pre><!-- HTML_TAG_END --></li> <li data-svelte-h="svelte-5f16kk"><p><code>https://localhost:3000/</code> 브라우저로 접속</p></li></ol>]]>
    </content>
    <category term="passport" scheme="https://lyukidon.github.io/?tags=passport" />
  </entry>
  <entry>
    <title type="html"><![CDATA[Error 메세지 작성방법]]></title>
    <link href="https://lyukidon.github.io/Javascript/TIL/error_handling" />
    <id>https://lyukidon.github.io/Javascript/TIL/error_handling</id>
    <published>2024-02-06T00:00:00.000Z</published>
    <updated>2024-02-06T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[<ul><li data-svelte-h="svelte-16t0uzc"><p>throw</p> <p><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Statements/throw" rel="nofollow noopener noreferrer external" target="_blank">https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Statements/throw</a></p> <p>throw 문을 사용하면 예외 처리를 할 수 있는데, throw 가 실행되면, 코드의 실행이 중지되고 catch 블록으로 전달되게 된다.</p></li> <li data-svelte-h="svelte-1ay1poj"><p>error</p> <p>Error 객체는 에러를 나타낼 때 사용하는 객체로 아래와 같은 속성을 가지고 있다.</p> <ul><li>name : 에러명</li> <li>message : 에러 설명</li> <li>stack : <code>${error.name}: ${error.message}</code></li> <li>cause : Error 객체를 생성할 때, 발생한 이유를 추가. 데이터 타입은 상관 없음</li></ul></li> <li><p data-svelte-h="svelte-1j0d301">에러 객체 생성하는 방법</p> <!-- HTML_TAG_START --><pre class="shiki material-default" js="true"><div class="language-id">js</div><div class='code-container'><code><div class='line'>throw new Error(MESSAGE, &#123; name: NAME, cause: &#123; CAUSE &#125; &#125;);</div><div class='line'>// error.stack -&gt; NAME: MESSAGE</div></code></div></pre><!-- HTML_TAG_END --></li> <li><p data-svelte-h="svelte-1l1mnkl">특정 데이터를 전달하고자 하는 경우, 에러 객체를 사용하지 않고 throw를 할 수도 있다.</p> <!-- HTML_TAG_START --><pre class="shiki material-default" js="true"><div class="language-id">js</div><div class='code-container'><code><div class='line'>throw &#123;</div><div class='line'>    name: NAME,</div><div class='line'>    message: MESSAGE</div><div class='line'>&#125;;</div></code></div></pre><!-- HTML_TAG_END --></li></ul>]]>
    </content>
    <category term="Error" scheme="https://lyukidon.github.io/?tags=Error" />
  </entry>
  <entry>
    <title type="html"><![CDATA[Google Console VM instance 포트 열기]]></title>
    <link href="https://lyukidon.github.io/Javascript/TIL/google_console/port" />
    <id>https://lyukidon.github.io/Javascript/TIL/google_console/port</id>
    <published>2024-02-06T00:00:00.000Z</published>
    <updated>2024-02-06T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[<p data-svelte-h="svelte-15f9ix0">Google Console은 AWS와 다르게 포트 여는 부분이 다른 곳에 있다.</p> <ol data-svelte-h="svelte-1k73q0h"><li>VPC 네트워크 들어가기</li> <li>방화벽</li> <li>방화벽 규칙 만들기</li> <li>TCP에서 포트 열기</li></ol> <p data-svelte-h="svelte-1nvgwq8">또는</p> <ol data-svelte-h="svelte-170mjx6"><li>인스턴스 메뉴</li> <li>하단 방화벽 규칙 설정</li></ol> <p data-svelte-h="svelte-1uv61kv">을 누르면 방화벽 설정에 들어갈 수 있다.</p>]]>
    </content>
    <category term="Google Console" scheme="https://lyukidon.github.io/?tags=Google%20Console" />
    <category term="Firewall" scheme="https://lyukidon.github.io/?tags=Firewall" />
  </entry>
  <entry>
    <title type="html"><![CDATA[redis 설치 및 연결]]></title>
    <link href="https://lyukidon.github.io/Javascript/TIL/redis/start" />
    <id>https://lyukidon.github.io/Javascript/TIL/redis/start</id>
    <published>2024-02-05T00:00:00.000Z</published>
    <updated>2024-02-05T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[<p data-svelte-h="svelte-tjnbp1">docker에 redis를 설치하는 방법</p> <ol><li><p data-svelte-h="svelte-etlrfi">redis 이미지 받아오기</p> <!-- HTML_TAG_START --><pre class="shiki material-default" bash="true"><div class="language-id">bash</div><div class='code-container'><code><div class='line'>docker pull redis</div></code></div></pre><!-- HTML_TAG_END --></li> <li><p data-svelte-h="svelte-cz7wcs">docker에 설치</p> <!-- HTML_TAG_START --><pre class="shiki material-default" bash="true"><div class="language-id">bash</div><div class='code-container'><code><div class='line'>docker run --name redisContainer -d -p 6379:6379 redis</div></code></div></pre><!-- HTML_TAG_END --></li> <li><p data-svelte-h="svelte-17ka62f">redis와 express 연결하기</p> <!-- HTML_TAG_START --><pre class="shiki material-default" bash="true"><div class="language-id">bash</div><div class='code-container'><code><div class='line'>npm i redis</div></code></div></pre><!-- HTML_TAG_END --> <!-- HTML_TAG_START --><pre class="shiki material-default" js="true"><div class="language-id">js</div><div class='code-container'><code><div class='line'>// redisClient.js</div><div class='line'>import Redis from "redis";</div><div class='line'></div><div class='line'>const redisClient = await Redis.createClient(process.env.PORT_REDIS)</div><div class='line'>    .on("error", err =&gt; console.log("Redis Client Error", err))</div><div class='line'>    .connect();</div><div class='line'></div><div class='line'>export default redisClient;</div></code></div></pre><!-- HTML_TAG_END --></li> <li><p data-svelte-h="svelte-1vxbpig">redis 데이터 읽기, 쓰기</p> <ol><li><p data-svelte-h="svelte-1obkz8b">읽기</p> <!-- HTML_TAG_START --><pre class="shiki material-default" js="true"><div class="language-id">js</div><div class='code-container'><code><div class='line'>import redisClient from "redisClient.js";</div><div class='line'></div><div class='line'>await redisClient.get(key);</div></code></div></pre><!-- HTML_TAG_END --></li> <li><p data-svelte-h="svelte-1yzjzni">쓰기 및 업데이트</p> <!-- HTML_TAG_START --><pre class="shiki material-default" js="true"><div class="language-id">js</div><div class='code-container'><code><div class='line'>import redisClient from "redisClient.js";</div><div class='line'></div><div class='line'>await redisClient.set(key, value);</div></code></div></pre><!-- HTML_TAG_END --></li></ol></li></ol>]]>
    </content>
    <category term="docker" scheme="https://lyukidon.github.io/?tags=docker" />
    <category term="redis" scheme="https://lyukidon.github.io/?tags=redis" />
    <category term="express" scheme="https://lyukidon.github.io/?tags=express" />
  </entry>
  <entry>
    <title type="html"><![CDATA[Refresh Token 사용 방법]]></title>
    <link href="https://lyukidon.github.io/Javascript/TIL/jwt/refresh_token" />
    <id>https://lyukidon.github.io/Javascript/TIL/jwt/refresh_token</id>
    <published>2024-02-02T00:00:00.000Z</published>
    <updated>2024-02-02T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[<p data-svelte-h="svelte-kxmjao">Access Token은 발급 받은 후, 인증을 위해 지속적으로 서버와 교환을 하게 된다. 통신을 자주 반복하게 된다는 것은, 그만큼 탈취될 가능성도 높다는 뜻이다.</p> <p data-svelte-h="svelte-160z862">Refresh Token은 이러한 Access Token의 단점을 보완해주는 역할을 한다.</p> <p data-svelte-h="svelte-1iifmc2">토큰을 발급받고 저장하는 순서는 다음과 같다.</p> <!-- HTML_TAG_START --><pre class="shiki material-default"><div class='code-container'><code><div class='line'>|        |        |          |</div><div class='line'>| Client | Server | Database |</div><div class='line'>|        |        |          |</div></code></div></pre><!-- HTML_TAG_END --> <ol data-svelte-h="svelte-m068na"><li>사용자가 로그인을 한다.</li> <li>서버에서 Access Token과 Refresh Token을 발급한다.<ul><li>클라이언트에 Access Token과 Refresh Token을 전달한다.</li> <li>Refresh Token은 데이터 베이스에 저장한다.</li></ul></li> <li>Access Token의 만료 기간이 지나면, Refresh Token을 이용한다.<ul><li>클라이언트의 Refresh Token과 데이터베이스의 Refresh Token을 비교한다.</li> <li>같다면 2번을 반복한다.</li></ul></li></ol>]]>
    </content>
    <category term="jwt" scheme="https://lyukidon.github.io/?tags=jwt" />
    <category term="token" scheme="https://lyukidon.github.io/?tags=token" />
    <category term="refresh token" scheme="https://lyukidon.github.io/?tags=refresh%20token" />
  </entry>
  <entry>
    <title type="html"><![CDATA[Jest Error - SyntaxError: Cannot use import statement outside a module]]></title>
    <link href="https://lyukidon.github.io/Javascript/TIL/jest/jest_es6" />
    <id>https://lyukidon.github.io/Javascript/TIL/jest/jest_es6</id>
    <published>2024-02-01T00:00:00.000Z</published>
    <updated>2024-02-01T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[<p data-svelte-h="svelte-1by5mpn">Jest 에서 ES6 Module Syntax 사용 시 에러가 발생한다.</p> <p data-svelte-h="svelte-1j3wt01">이 때는 package.json의 “script” 부분을 변경해주면 된다.</p> <!-- HTML_TAG_START --><pre class="shiki material-default" json="true"><div class="language-id">json</div><div class='code-container'><code><div class='line'>"script": &#123;</div><div class='line'>    "test": "node --experimental-vm-modules node_modules/jest/bin/jest.js"</div><div class='line'>&#125;</div><div class='line'>//npm run test</div></code></div></pre><!-- HTML_TAG_END --> <p data-svelte-h="svelte-370g1h">또는 아래 코드로 jest를 실행해주면 된다.</p> <!-- HTML_TAG_START --><pre class="shiki material-default" bash="true"><div class="language-id">bash</div><div class='code-container'><code><div class='line'>NODE_OPTIONS="$NODE_OPTIONS --experimental-vm-modules" npx jest</div></code></div></pre><!-- HTML_TAG_END -->]]>
    </content>
    <category term="jest" scheme="https://lyukidon.github.io/?tags=jest" />
  </entry>
  <entry>
    <title type="html"><![CDATA[JWT 사용방법]]></title>
    <link href="https://lyukidon.github.io/Javascript/TIL/jwt/usage" />
    <id>https://lyukidon.github.io/Javascript/TIL/jwt/usage</id>
    <published>2024-01-31T00:00:00.000Z</published>
    <updated>2024-01-31T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[<p data-svelte-h="svelte-ksgtza">JWT 사용방법</p> <p data-svelte-h="svelte-vaaiwa">npm: <a href="https://www.npmjs.com/package/jsonwebtoken" rel="nofollow noopener noreferrer external" target="_blank">https://www.npmjs.com/package/jsonwebtoken</a></p> <ol><li>설치하기<!-- HTML_TAG_START --><pre class="shiki material-default" bash="true"><div class="language-id">bash</div><div class='code-container'><code><div class='line'>npm i jsonwebtoken</div></code></div></pre><!-- HTML_TAG_END --></li> <li>모듈 불러오기<!-- HTML_TAG_START --><pre class="shiki material-default" js="true"><div class="language-id">js</div><div class='code-container'><code><div class='line'>import jwt from "jsonwebtoken";</div><div class='line'>// or</div><div class='line'>const jwt = require("jsonwebtoken");</div></code></div></pre><!-- HTML_TAG_END --></li> <li>Access Token 생성하기<!-- HTML_TAG_START --><pre class="shiki material-default" js="true"><div class="language-id">js</div><div class='code-container'><code><div class='line'>const accessToken = jwt.sign(payload, secretkey, options);</div><div class='line'>// example</div><div class='line'>const accessToken = jwt.sign(&#123; id: "lyu" &#125;, "randomSecretKey", &#123;</div><div class='line'>    algorithm: "HS256", // 암호화 방식</div><div class='line'>    expiresIn: "12h", // 만료 기간</div><div class='line'>    notBefore, // 설정한 시간 이전까지는 작동하지 않도록 하는 옵션</div><div class='line'>    audience,</div><div class='line'>    issuer,</div><div class='line'>    jwtid,</div><div class='line'>    subject,</div><div class='line'>    noTimestamp,</div><div class='line'>    header,</div><div class='line'>    keyid,</div><div class='line'>    mutatePayload: boolean, // 키가 생성되기 전에, payload 값을 변경</div><div class='line'>    allowInsecureKeySizes: boolean, // 2048 미만의 모듈러스 개인 키를 RSA에 사용할 수 있음</div><div class='line'>    allowInvalidAsymmetricKeyTypes: boolean // (이전 버전 호환용) 지정된 알고리즘과 다른 비대칭 키를 허용</div><div class='line'>&#125;);</div></code></div></pre><!-- HTML_TAG_END --></li> <li>Access Token 해석하기<!-- HTML_TAG_START --><pre class="shiki material-default" js="true"><div class="language-id">js</div><div class='code-container'><code><div class='line'>const decoded = jwt.verify(token, secretkey, options, callback);</div><div class='line'>// example</div><div class='line'>const decoded = jwt.verify(</div><div class='line'>    token,</div><div class='line'>    "secretkey",</div><div class='line'>    &#123;</div><div class='line'>        algorithm: "HS256", // 암호화 방식</div><div class='line'>        audience,</div><div class='line'>        complete, // 해석된 &#123; payload, header, signature &#125;를 반환 (기존은 payload만 반환)</div><div class='line'>        issuer,</div><div class='line'>        jwtid, // JWT ID를 확인할 때 사용</div><div class='line'>        ignoreExpiration, // 만료 기간을 확인하지 않고 인증</div><div class='line'>        subject,</div><div class='line'>        clockTolerance,</div><div class='line'>        maxAge, // 만료기간을 최대 기간으로 설정</div><div class='line'>        clockTimestamp,</div><div class='line'>        nonce,</div><div class='line'>        allowInvalidAsymmetricKeyTypes</div><div class='line'>    &#125;,</div><div class='line'>    (err, decoded) =&gt; &#123;&#125;</div><div class='line'>);</div></code></div></pre><!-- HTML_TAG_END --></li></ol> <ul><li>에러 확인하기<ul><li>토큰 만료 에러<!-- HTML_TAG_START --><pre class="shiki material-default" js="true"><div class="language-id">js</div><div class='code-container'><code><div class='line'>&#123;</div><div class='line'>    name: 'TokenExpiredError',</div><div class='line'>    message:'jwt expired',</div><div class='line'>    expiredAt</div><div class='line'>&#125;</div></code></div></pre><!-- HTML_TAG_END --></li> <li>토큰 에러<!-- HTML_TAG_START --><pre class="shiki material-default" js="true"><div class="language-id">js</div><div class='code-container'><code><div class='line'>&#123;</div><div class='line'>    name: "JsonWebTokenError",</div><div class='line'>    message:'invalid token',</div><div class='line'>    // 'invalid token' - the header or payload could not be parsed</div><div class='line'>    // 'jwt malformed' - the token does not have three components (delimited by a .)</div><div class='line'>    // 'jwt signature is required'</div><div class='line'>    // 'invalid signature'</div><div class='line'>    // 'jwt audience invalid. expected: [OPTIONS AUDIENCE]'</div><div class='line'>    // 'jwt issuer invalid. expected: [OPTIONS ISSUER]'</div><div class='line'>    // 'jwt id invalid. expected: [OPTIONS JWT ID]'</div><div class='line'>    // 'jwt subject invalid. expected: [OPTIONS SUBJECT]'</div><div class='line'>&#125;</div></code></div></pre><!-- HTML_TAG_END --></li> <li>NotBefore 에러<!-- HTML_TAG_START --><pre class="shiki material-default" js="true"><div class="language-id">js</div><div class='code-container'><code><div class='line'>&#123;</div><div class='line'>    name: 'NotBeforeError',</div><div class='line'>    message: 'jwt not active',</div><div class='line'>    date</div><div class='line'>&#125;</div></code></div></pre><!-- HTML_TAG_END --></li></ul></li></ul>]]>
    </content>
    <category term="jwt" scheme="https://lyukidon.github.io/?tags=jwt" />
    <category term="token" scheme="https://lyukidon.github.io/?tags=token" />
  </entry>
  <entry>
    <title type="html"><![CDATA[http 에러 코드 종류]]></title>
    <link href="https://lyukidon.github.io/Javascript/TIL/http_status_code" />
    <id>https://lyukidon.github.io/Javascript/TIL/http_status_code</id>
    <published>2024-01-30T00:00:00.000Z</published>
    <updated>2024-01-30T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[<ul data-svelte-h="svelte-11lxhkh"><li><p>100s : 정보 제공</p></li> <li><p>200s : 성공</p></li> <li><p>300s : 리다이렉션</p></li> <li><p>400s : 클라이언트 에러</p></li> <li><p>500s : 서버 에러</p></li> <li><p>100s</p> <ul><li>100 : Continue</li> <li>101 : Switching Protocol</li> <li>102 : Processing</li> <li>103 : Early Hints</li></ul></li> <li><p>200s</p> <ul><li>200 : OK</li> <li>201 : Created</li> <li>202 : Accepted</li> <li>203 : Non-Authoritative Information</li> <li>204 : No Content</li> <li>205 : Reset Content</li> <li>206 : Partial Content</li> <li>207 : Multi-Status</li> <li>208 : Multi-Status</li> <li>226 : IM Used</li></ul></li> <li><p>300s</p> <ul><li>300 : Multiple Choice</li> <li>301 : Moved Permanently</li> <li>302 : Found</li> <li>303 : See Other</li> <li>304 : Not Modified</li> <li>305 : Use Proxy</li> <li>306 : unused</li> <li>307 : Temporary Redirect</li> <li>308 : Permanent Redirect</li></ul></li> <li><p>400s</p> <ul><li>400 : Bad Request</li> <li>401 : Unauthorized</li> <li>402 : Payment Required</li> <li>403 : Forbidden</li> <li>404 : Not Found</li> <li>405 : Method Not Allowed</li> <li>406 : Not Acceptable</li> <li>407 : Proxy Authentication Required</li> <li>408 : Request Timeout</li> <li>409 : Conflict</li> <li>410 : Gone</li> <li>411 : Length Required</li> <li>412 : Precondition Failed</li> <li>413 : Payload Too Large</li> <li>414 : URI Too Long</li> <li>415 : Unsupported Media Type</li> <li>416 : Requested Range Not Satisfiable</li> <li>417 : Expectation Failed</li> <li>418 : I’m a teapot</li> <li>421 : Misdirected Request</li> <li>422 : Unprocessable Entity</li> <li>423 : Locked</li> <li>424 : Failed Dependency</li> <li>426 : Upgrade Required</li> <li>428 : Precondition Required</li> <li>429 : Too Many Requests</li> <li>431 : Request Header Fields Too Large</li> <li>451 : Unavailable For Legal Reasons</li></ul></li> <li><p>500s</p> <ul><li>500 : Internal Server Error</li> <li>501 : Not Implemented</li> <li>502 : Bad Gateway</li> <li>503 : Service Unavailable</li> <li>504 : Gateway Timeout</li> <li>505 : HTTP Version Not Supported</li> <li>506 : Variant Also Negotiates</li> <li>507 : Insufficient Storage</li> <li>508 : Loop Detected</li> <li>510 : Not Extended</li> <li>511 : Network Authentication Required</li></ul></li></ul>]]>
    </content>
    <category term="http_status_code" scheme="https://lyukidon.github.io/?tags=http_status_code" />
  </entry>
  <entry>
    <title type="html"><![CDATA[Prisma 사용법]]></title>
    <link href="https://lyukidon.github.io/Javascript/TIL/prisma" />
    <id>https://lyukidon.github.io/Javascript/TIL/prisma</id>
    <published>2024-01-26T00:00:00.000Z</published>
    <updated>2024-01-26T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[<p data-svelte-h="svelte-19vn209">Javascript에서 MySQL을 사용하기 위해서, Prisma를 사용할 수 있다.</p> <ol><li><p data-svelte-h="svelte-1ws77og">설치하기</p> <!-- HTML_TAG_START --><pre class="shiki material-default" bash="true"><div class="language-id">bash</div><div class='code-container'><code><div class='line'>npm init -y</div><div class='line'>npm install prisma --save-dev</div></code></div></pre><!-- HTML_TAG_END --></li> <li><p data-svelte-h="svelte-rauwhm">prisma 기본 폴더 생성하기</p> <!-- HTML_TAG_START --><pre class="shiki material-default" bash="true"><div class="language-id">bash</div><div class='code-container'><code><div class='line'>npx prisma</div><div class='line'>npx prisma init</div></code></div></pre><!-- HTML_TAG_END --> <p data-svelte-h="svelte-nej5uc"><code>npx prisma init</code> : <code>prisma 폴더</code>와 <code>schema.prisma</code> 파일, <code>.env</code> 파일을 생성해준다.</p></li> <li><p data-svelte-h="svelte-1ydplnc">데이터 베이스 연결하기</p> <!-- HTML_TAG_START --><pre class="shiki material-default" js="true"><div class="language-id">js</div><div class='code-container'><code><div class='line'>/* prisma.schema */</div><div class='line'>datasource db &#123;</div><div class='line'>    provider = "mysql"</div><div class='line'>    url = env("DATABASE_URL")</div><div class='line'>&#125;</div></code></div></pre><!-- HTML_TAG_END --> <!-- HTML_TAG_START --><pre class="shiki material-default" js="true"><div class="language-id">js</div><div class='code-container'><code><div class='line'>/* .env */</div><div class='line'>DATABASE_URL = "DATABASE_TYPE://USER:PASSWORD@END_POINT:PORT_NUMBER/DATABASE_NAME";</div></code></div></pre><!-- HTML_TAG_END --> <ul data-svelte-h="svelte-15a27lv"><li><code>DATABASE_TYPE</code>사용하고자하는 데이터베이스.Postgres SQL, MySQL, SQLServer, PlantScale, Cockroach DB, MongoDB 지원</li> <li><code>USER</code> : 사용자 이름</li> <li><code>PASSWORD</code> : 설정한 비밀번호</li> <li><code>END_POINT</code> : url</li> <li><code>PORT_NUMBER</code> : 설정한 포트 번호</li> <li><code>DATABASE_NAME</code> : 데이터베이스의 이름</li></ul></li> <li><p data-svelte-h="svelte-1e205ry">테이블의 Schema 설정</p> <!-- HTML_TAG_START --><pre class="shiki material-default" prisma="true"><div class="language-id">prisma</div><div class='code-container'><code><div class='line'>model Products &#123;</div><div class='line'>    productId   Int      @id @default(autoincrement()) @map("productId")</div><div class='line'>    productName String   @unique @map("productName")</div><div class='line'>    price       Int      @default(1000) @map("price")</div><div class='line'>    info        String?  @map("info") @db.Text</div><div class='line'>    createdAt   DateTime @default(now()) @map("createdAt")</div><div class='line'>    updatedAt   DateTime @updatedAt @map("updatedAt")</div><div class='line'></div><div class='line'>    @@map("Products")</div><div class='line'>&#125;</div></code></div></pre><!-- HTML_TAG_END --> <ul data-svelte-h="svelte-1bz8voz"><li>@id : <code>PRIMARY KEY</code></li> <li>@default() : 기본 값</li> <li>autoincrement : <code>AUTO_INCREMENT</code> 레코드가 추가될 때마다 값이 1씩 증가</li> <li>@map : 실제 table에 저장되는 이름</li> <li>@unique : <code>UNIQUE</code> 값이 겹치면 안됌</li> <li>DATA_TYPE? : <code>NULL</code> 이 칼럼의 값은 없어도 됌</li> <li>@db.DATA_TYPE : 데이터 타입을 변경하고자 하는 경우 작성</li> <li>@updatedAt : 레코드가 변경되는 경우, 자동으로 시간을 변경</li></ul></li> <li><p data-svelte-h="svelte-jl74ub">Prisma Migrate</p> <!-- HTML_TAG_START --><pre class="shiki material-default" bash="true"><div class="language-id">bash</div><div class='code-container'><code><div class='line'>npx prisma migrate dev --name init</div></code></div></pre><!-- HTML_TAG_END --> <p data-svelte-h="svelte-86hr8u">위의 코드를 실행하면, prisma의 코드를, SQL의 RAW QUERY로 변경해준다.</p> <!-- HTML_TAG_START --><pre class="shiki material-default" sql="true"><div class="language-id">sql</div><div class='code-container'><code><div class='line'>CREATE TABLE Products(</div><div class='line'></div><div class='line'>    productId INTEGER NOT NULL AUTO_INCREMENT PRIMARY KEY</div><div class='line'>    productName TEXT NOT NULL UNIQUE,</div><div class='line'>    price INTEGER NOT NULL,</div><div class='line'>    info TEXT NULL,</div><div class='line'>    createdAt DATETIME DEFAULT CURRENT_TIMESTAMP</div><div class='line'>    -- CURRENT_TIMESTAMP == now()</div><div class='line'>    updatedAt DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP</div><div class='line'></div><div class='line'>)</div></code></div></pre><!-- HTML_TAG_END --></li> <li><p data-svelte-h="svelte-ayqk2j">Prisma Client 설치</p> <!-- HTML_TAG_START --><pre class="shiki material-default" bash="true"><div class="language-id">bash</div><div class='code-container'><code><div class='line'>npm i @prisma/client</div></code></div></pre><!-- HTML_TAG_END --> <p><img src="../../../assets/prisma.png" alt="Alt text" class="rounded-lg my-2" loading="lazy" decoding="async"></p> <p data-svelte-h="svelte-1u697ww">schema가 변경된 경우, <code>prisma migrate dev</code>나 <code>prisma db push</code>를 통해 데이터베이스에 데이터를 전달해야 하는데, <strong>Prisma Client를 통해 동기화를 유지시켜줄 수 있다.</strong></p></li></ol>]]>
    </content>
    <category term="mysql" scheme="https://lyukidon.github.io/?tags=mysql" />
    <category term="prisma" scheme="https://lyukidon.github.io/?tags=prisma" />
  </entry>
  <entry>
    <title type="html"><![CDATA[MySQL DDL]]></title>
    <link href="https://lyukidon.github.io/Javascript/TIL/mysql_DDL" />
    <id>https://lyukidon.github.io/Javascript/TIL/mysql_DDL</id>
    <published>2024-01-25T00:00:00.000Z</published>
    <updated>2024-01-25T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[<p data-svelte-h="svelte-1a3s4ly">DDL (Data Definition Language, 데이터 정의어)데이터의 생성, 수정, 삭제의 역할을 한다.</p> <ul><li><p data-svelte-h="svelte-vdeiy8">CREATE</p> <ul><li><p data-svelte-h="svelte-bg9qde">데이터 베이스 생성</p> <!-- HTML_TAG_START --><pre class="shiki material-default" sql="true"><div class="language-id">sql</div><div class='code-container'><code><div class='line'>CREATE DATABASE SQL_DB;</div></code></div></pre><!-- HTML_TAG_END --></li> <li><p data-svelte-h="svelte-1bi5s4y">테이블 생성</p> <!-- HTML_TAG_START --><pre class="shiki material-default" sql="true"><div class="language-id">sql</div><div class='code-container'><code><div class='line'>CREATE TABLE USERS(</div><div class='line'>    USERID INT(100) NOT NULL UNIQUE AUTO_INCREMENT PRIMARY KEY,</div><div class='line'>    NAME VARCHAR(10) NOT NULL</div><div class='line'>    GENDER ENUM("M","W");</div><div class='line'>);</div><div class='line'></div><div class='line'>CREATE TABLE ORDERS(</div><div class='line'>    ORDERID INT(100) NOT NULL UNIQUE AUTO_INCREMENT PRIMARY KEY,</div><div class='line'>    USERID INT(100) NOT NULL,</div><div class='line'>    PRODUCT VARCHAR(255) NOT NULL</div><div class='line'>    FOREIGN KEY (USERID) REFERENCE USERS (USERID)</div><div class='line'>);</div></code></div></pre><!-- HTML_TAG_END --></li> <li><p data-svelte-h="svelte-ba2wst">제약 조건</p> <ul data-svelte-h="svelte-ecexrr"><li>숫자 타입</li></ul> <div class="overflow-x-auto mb-4"><table class="table w-full"><thead data-svelte-h="svelte-1doflcb"><tr><th>타입</th> <th>범위</th> <th>범위 식</th> <th>용량</th></tr></thead> <tbody data-svelte-h="svelte-6103cx"><tr><td>TINYINT</td> <td>0 ~ 255</td> <td>2^0-1 ~ 2^8-1</td> <td>1 Byte</td></tr> <tr><td>SMALLINT</td> <td>-32,768 ~ 32,767</td> <td>-2^15 ~ 2^15-1</td> <td>2 Byte</td></tr> <tr><td>INT</td> <td>-2,147,483,648 ~ 2,147,483,647</td> <td>-2^31 ~ 2^31-1</td> <td>4 Byte</td></tr> <tr><td>BIGINT</td> <td>-9,223,372,036,854,775,808 ~ 9,223,372,036,854,775,807</td> <td>-2^63 ~ 2^63-1</td> <td>8 Byte</td></tr></tbody></table></div> <ul data-svelte-h="svelte-8ttw12"><li>NULL<ul><li>NULL : 데이터가 없는 경우, NULL로 저장</li> <li>NOT NULL : 데이터가 없는 경우, 에러</li></ul></li> <li>UNIQUE : 컬럼에 같은 데이터가 존재하면 안됌</li> <li>AUTO_INCREMENT : 레코드(튜플)가 추가될 경우, 1씩 증가</li> <li>ENUM : ENUM 내부에 있는 값만 추가 가능</li></ul></li></ul></li> <li data-svelte-h="svelte-64l6tj"><p>ALTER</p></li> <li><p data-svelte-h="svelte-1c677kv">DROP</p> <ul><li>데이터 베이스 삭제<!-- HTML_TAG_START --><pre class="shiki material-default" sql="true"><div class="language-id">sql</div><div class='code-container'><code><div class='line'>DROP DATABASE SQL_DB;</div></code></div></pre><!-- HTML_TAG_END --></li> <li>테이블 삭제<!-- HTML_TAG_START --><pre class="shiki material-default" sql="true"><div class="language-id">sql</div><div class='code-container'><code><div class='line'>DROP TABLE USERS;</div><div class='line'>DROP TABLE ORDERS;</div></code></div></pre><!-- HTML_TAG_END --></li></ul></li> <li data-svelte-h="svelte-1fkz3u9"><p>TRUNCATE</p></li></ul>]]>
    </content>
    <category term="mysql" scheme="https://lyukidon.github.io/?tags=mysql" />
    <category term="DDL" scheme="https://lyukidon.github.io/?tags=DDL" />
  </entry>
  <entry>
    <title type="html"><![CDATA[Docker MySQL Container 설치와 사용방법]]></title>
    <link href="https://lyukidon.github.io/Javascript/TIL/docker/start" />
    <id>https://lyukidon.github.io/Javascript/TIL/docker/start</id>
    <published>2024-01-24T00:00:00.000Z</published>
    <updated>2024-01-24T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[<ol><li><p data-svelte-h="svelte-25mlwg">Docker 설치</p> <ul><li data-svelte-h="svelte-4g3t0l"><p>Docker Desktop</p> <p><a href="https://www.docker.com/" rel="nofollow noopener noreferrer external" target="_blank">https://www.docker.com/</a></p></li> <li><p data-svelte-h="svelte-1hf8ffo">Docker Engine (Ubuntu) 설치</p> <ol><li><p data-svelte-h="svelte-1msjo4z">Add docker repo</p> <!-- HTML_TAG_START --><pre class="shiki material-default" bash="true"><div class="language-id">bash</div><div class='code-container'><code><div class='line'>    ##### Add Docker's official GPG key: #####</div><div class='line'>sudo apt-get update</div><div class='line'>sudo apt-get install ca-certificates curl gnupg</div><div class='line'>sudo install -m 0755 -d /etc/apt/keyrings</div><div class='line'>curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg</div><div class='line'>sudo chmod a+r /etc/apt/keyrings/docker.gpg</div><div class='line'>    ##### Add the repository to Apt sources: #####</div><div class='line'>echo </div><div class='line'>"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu </div><div class='line'>$(. /etc/os-release && echo "$VERSION_CODENAME") stable" | </div><div class='line'>sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null</div><div class='line'>sudo apt-get update</div></code></div></pre><!-- HTML_TAG_END --></li> <li><p data-svelte-h="svelte-1m2f4sv">Install Docker</p> <!-- HTML_TAG_START --><pre class="shiki material-default" bash="true"><div class="language-id">bash</div><div class='code-container'><code><div class='line'>sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</div></code></div></pre><!-- HTML_TAG_END --></li></ol></li></ul></li> <li><p data-svelte-h="svelte-64nlcm">mysql 이미지 다운로드</p> <!-- HTML_TAG_START --><pre class="shiki material-default" bash="true"><div class="language-id">bash</div><div class='code-container'><code><div class='line'>docker pull mysql</div></code></div></pre><!-- HTML_TAG_END --></li> <li><p data-svelte-h="svelte-hqe77g">다운로드 받은 이미지 확인</p> <!-- HTML_TAG_START --><pre class="shiki material-default" bash="true"><div class="language-id">bash</div><div class='code-container'><code><div class='line'>docker images</div></code></div></pre><!-- HTML_TAG_END --></li> <li><p data-svelte-h="svelte-1sds1i5">container 생성 및 구동</p> <!-- HTML_TAG_START --><pre class="shiki material-default" bash="true"><div class="language-id">bash</div><div class='code-container'><code><div class='line'>docker run --name mysqlContainer -d -p 3306:3306 -e MYSQL_ROOT_PASSWORD=비밀번호 mysql:latest</div></code></div></pre><!-- HTML_TAG_END --> <ul data-svelte-h="svelte-1ncoe8g"><li><p>run : 컨테이너를 생성하고 구동시키는 명령어</p></li> <li><p>–name : 컨테이너의 이름</p></li> <li><p>-d : 백그라운드에서 실행</p></li> <li><p>-p : <code>외부포트:내부포트</code> 연결 설정</p></li> <li><p>-e : 환경변수 설정</p> <p>MYSQL은 <code>MYSQL_ROOT_PASSWORD</code>, <code>MYSQL_DATABASE</code>, <code>MYSQL_USER</code>, <code>MYSQL_PASSWORD</code> 가 있다.</p></li> <li><p>mysql:latest : 구동하고자 하는 컨테이너(mysql)을 적는다.</p></li></ul></li> <li><p data-svelte-h="svelte-dnou2b">구동 중(run)인 컨테이너 확인</p> <!-- HTML_TAG_START --><pre class="shiki material-default" bash="true"><div class="language-id">bash</div><div class='code-container'><code><div class='line'>docker ps</div></code></div></pre><!-- HTML_TAG_END --> <ul data-svelte-h="svelte-zojl73"><li>-a : 전체 컨테이너를 확인하고자 하는 경우</li></ul></li> <li><p data-svelte-h="svelte-1e214ja">컨테이너 접속</p> <!-- HTML_TAG_START --><pre class="shiki material-default" bash="true"><div class="language-id">bash</div><div class='code-container'><code><div class='line'>docker exec -it mysqlContainer /bin/bash</div></code></div></pre><!-- HTML_TAG_END --> <ul data-svelte-h="svelte-y903zm"><li>-i : 사용자가 접근하지 않아도, 계속 입력을 받을 수 있는 상태를 유지</li> <li>-t : 터미널을 사용할 수 있도록 할당해놓음</li></ul></li> <li><p data-svelte-h="svelte-4yk309">컨테이너 종료</p> <!-- HTML_TAG_START --><pre class="shiki material-default" bash="true"><div class="language-id">bash</div><div class='code-container'><code><div class='line'>docker stop mysqlContainer</div></code></div></pre><!-- HTML_TAG_END --></li> <li><p data-svelte-h="svelte-ekgpt1">기존 컨테이너 시작</p> <!-- HTML_TAG_START --><pre class="shiki material-default" bash="true"><div class="language-id">bash</div><div class='code-container'><code><div class='line'>docker start mysqlContainer</div></code></div></pre><!-- HTML_TAG_END --></li> <li><p data-svelte-h="svelte-12nztp3">기존 컨테이너 재시작</p> <!-- HTML_TAG_START --><pre class="shiki material-default" bash="true"><div class="language-id">bash</div><div class='code-container'><code><div class='line'>docker restart mysqlContainer</div></code></div></pre><!-- HTML_TAG_END --></li></ol>]]>
    </content>
    <category term="docker" scheme="https://lyukidon.github.io/?tags=docker" />
    <category term="mysql" scheme="https://lyukidon.github.io/?tags=mysql" />
  </entry>
  <entry>
    <title type="html"><![CDATA[How to fix urara build bug while using gh-pages]]></title>
    <link href="https://lyukidon.github.io/Javascript/etc/urara_bug_fix" />
    <id>https://lyukidon.github.io/Javascript/etc/urara_bug_fix</id>
    <published>2024-01-24T00:00:00.000Z</published>
    <updated>2024-01-24T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[<p data-svelte-h="svelte-a3t8yi">After deploying, page could not be loaded css files. Like that.</p> <p><img src="https://github.com/lyukidon/lyukidon.github.io/assets/64675543/fefaa038-af7f-434b-9f69-7a59ae2a82eb" alt="image" class="rounded-lg my-2" loading="lazy" decoding="async"></p> <p data-svelte-h="svelte-39byky">I could access all the files in gh-pages branch, except ”_app” directory. So I wanted to change name of directory.</p> <ol><li data-svelte-h="svelte-q1pajt"><p><del>Modified Build File</del></p> <p>What I wanted is to rename ”_app” to “app”.</p> <p>This project has some build setting files</p> <ul><li><code>tsconfig.json</code></li> <li><code>svelte.config.js</code></li> <li><code>urara.ts</code></li></ul> <p>I modified build setting by changing those files, but couldn’t fix it.</p></li> <li><p data-svelte-h="svelte-1a95d3a">Make <code>.nojekyll</code> at root of build directory, and deploy.</p> <p data-svelte-h="svelte-aqezkj">I found that if <code>deploy</code> branch doesn’t have <code>.nojekyll</code>, then Github Page serves page as Jekyll build.</p> <p data-svelte-h="svelte-14k9tnh"><strong>gh-pages needs <code>.nojekyll</code> file</strong></p> <p data-svelte-h="svelte-jsc5t3">build script runs like <code>run-s tsc urara:build kit:build clean</code> that means</p> <ol data-svelte-h="svelte-1l2fyuc"><li><code>run-s</code> : run sequentially</li> <li><code>tsc</code> : <code>tsc -p tsconfig.node.json</code></li> <li><code>urara:build</code> : <code>node urara.js build</code></li> <li><code>kit:build</code> : <code>cross-env NODE_OPTIONS=--max_old_space_size=7680 vite build</code></li> <li><code>clean</code> : <code>node urara.js clean</code></li></ol> <p data-svelte-h="svelte-bnfhc2">Before cleaning directories, I add <code>.nojekyll</code> file in build directory.</p> <ol><li><p data-svelte-h="svelte-1vwzva0">make nojekyll function in <code>urara.ts</code></p> <!-- HTML_TAG_START --><pre class="shiki material-default" js="true"><div class="language-id">js</div><div class='code-container'><code><div class='line'>const nojekyll = () =&gt; &#123;</div><div class='line'>  fs.writeFile('build/.nojekyll', '')</div><div class='line'>&#125;</div></code></div></pre><!-- HTML_TAG_END --></li> <li><p data-svelte-h="svelte-aaqh5i">Add ‘nojekyll’ case in switch case syntax</p> <!-- HTML_TAG_START --><pre class="shiki material-default" js="true"><div class="language-id">js</div><div class='code-container'><code><div class='line'>case 'nojekyll':</div><div class='line'>  nojekyll();</div><div class='line'>  break;</div></code></div></pre><!-- HTML_TAG_END --></li> <li><p data-svelte-h="svelte-jfiugv">Add that code in <code>package.json</code></p> <!-- HTML_TAG_START --><pre class="shiki material-default" json="true"><div class="language-id">json</div><div class='code-container'><code><div class='line'>&#123;</div><div class='line'>  "script": &#123;</div><div class='line'>    "nojekyll": "node urara.js nojekyll",</div><div class='line'>    "gh-pages": "npm run build && npm run nojekyll && npx gh-pages -t -d build"</div><div class='line'>  &#125;</div><div class='line'>&#125;</div></code></div></pre><!-- HTML_TAG_END --> <p data-svelte-h="svelte-112nmh4"><em><code>gh-pages -t</code> means uploading files started with ’.’</em></p></li></ol></li></ol> <p data-svelte-h="svelte-vs34fx">After doing that, you can finally deploy the perfect Homepage. Enjoy :)</p>]]>
    </content>
    <category term="bug_fix" scheme="https://lyukidon.github.io/?tags=bug_fix" />
  </entry>
  <entry>
    <title type="html"><![CDATA[류기돈]]></title>
    <link href="https://lyukidon.github.io/Introduction" />
    <id>https://lyukidon.github.io/Introduction</id>
    <published>2024-01-23T00:00:00.000Z</published>
    <updated>2024-01-23T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[]]>
    </content>
    <category term="Introduction" scheme="https://lyukidon.github.io/?tags=Introduction" />
  </entry>
  <entry>
    <title type="html"><![CDATA[create()와 save()의 차이]]></title>
    <link href="https://lyukidon.github.io/Javascript/TIL/mongodb_difference_between_create_and_save" />
    <id>https://lyukidon.github.io/Javascript/TIL/mongodb_difference_between_create_and_save</id>
    <published>2024-01-23T00:00:00.000Z</published>
    <updated>2024-01-23T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[<p data-svelte-h="svelte-13nfyut">POST를 사용하여 데이터를 추가할 때, create()와 save() API를 사용하게 된다. 다른 기능을 사용해도 같은 결과가 나와서 궁금해서 찾아보았다.</p> <p data-svelte-h="svelte-1hi7jk3"><a href="https://stackoverflow.com/questions/38290684/mongoose-save-vs-insert-vs-create" rel="nofollow noopener noreferrer external" target="_blank">https://stackoverflow.com/questions/38290684/mongoose-save-vs-insert-vs-create</a></p> <p data-svelte-h="svelte-g6dbk6"><code>The .save() is an instance method of the model, while the .create() is called directly from the Model as a method call, being static in nature, and takes the object as a first parameter.</code></p> <ul><li><p data-svelte-h="svelte-14nfs66">save()</p> <ul data-svelte-h="svelte-1z0pjig"><li>save는 instance 메서드로, 객체를 직접 형성해준 후 몽고디비에 저장하는 형식이다.</li></ul> <!-- HTML_TAG_START --><pre class="shiki material-default" js="true"><div class="language-id">js</div><div class='code-container'><code><div class='line'>const Person = mongoose.model(</div><div class='line'>  'Person',</div><div class='line'>  Schema(&#123;</div><div class='line'>    name: String,</div><div class='line'>    age: Number</div><div class='line'>  &#125;)</div><div class='line'>)</div><div class='line'></div><div class='line'>let newPerson = new Person(&#123;</div><div class='line'>  name: 'jack',</div><div class='line'>  age: 30</div><div class='line'>&#125;)</div><div class='line'></div><div class='line'>await newPerson.save()</div></code></div></pre><!-- HTML_TAG_END --></li> <li><p data-svelte-h="svelte-k8y2d1">create()</p> <ul data-svelte-h="svelte-1ykxwpy"><li>create는 static 메서드로, 객체를 따로 생성하지 않아도 호출을 할 수 있다. create 내부에 생성하고자 하는 데이터를 넣어주면, mongodb에 저장이 된다.</li></ul> <!-- HTML_TAG_START --><pre class="shiki material-default" js="true"><div class="language-id">js</div><div class='code-container'><code><div class='line'>const Person = mongoose.model(</div><div class='line'>  'Person',</div><div class='line'>  Schema(&#123;</div><div class='line'>    name: String,</div><div class='line'>    age: Number</div><div class='line'>  &#125;)</div><div class='line'>)</div><div class='line'></div><div class='line'>await Person.create(&#123; name: 'jack', age: 30 &#125;)</div></code></div></pre><!-- HTML_TAG_END --></li></ul>]]>
    </content>
    <category term="mongodb" scheme="https://lyukidon.github.io/?tags=mongodb" />
    <category term="mongoose" scheme="https://lyukidon.github.io/?tags=mongoose" />
  </entry>
  <entry>
    <title type="html"><![CDATA[Elements]]></title>
    <link href="https://lyukidon.github.io/hello-world/elements" />
    <id>https://lyukidon.github.io/hello-world/elements</id>
    <published>2021-12-12T00:00:00.000Z</published>
    <updated>2024-01-23T08:11:13.250Z</updated>
    <content type="html">
      <![CDATA[<h2 id="headings" data-svelte-h="svelte-17ezzq3"><a href="#headings">Headings</a></h2> <h3 id="heading" data-svelte-h="svelte-1lz1oii"><a href="#heading">Heading</a></h3> <h4 id="heading-1" data-svelte-h="svelte-18swq4u"><a href="#heading-1">Heading</a></h4> <h5 id="heading-2" data-svelte-h="svelte-seo8oo"><a href="#heading-2">Heading</a></h5> <h6 id="heading-3" data-svelte-h="svelte-11zzhhm"><a href="#heading-3">Heading</a></h6> <hr> <h2 id="paragraphs" data-svelte-h="svelte-1jrm51r"><a href="#paragraphs">Paragraphs</a></h2> <p data-svelte-h="svelte-1cwujs"><span class="spoiler">spoiler</span></p> <p data-svelte-h="svelte-1smaymh"><strong><em>The</em></strong> <em>quick</em> <u>brown</u> <a href="https://www.foxnews.com/" rel="nofollow noopener noreferrer external" target="_blank">fox</a> <code>jumps</code> <del>over</del> the lazy <strong>dog</strong>.</p> <p data-svelte-h="svelte-rzm3sy">Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p> <p data-svelte-h="svelte-1rcwbbl">建格的何另始養離腳合兒現各談花車是都無處與費別、信善行修覺自！壓總談下市率應次司公母兒用什一線送用標地倒直作任老數年白安足個後引使名隊懷持日落異今特族？</p> <p data-svelte-h="svelte-19ezoke">一士我像衣買了人義，計念？</p> <p data-svelte-h="svelte-k1vvek">期老外並中般灣作各現初知強車我的品式企國立市它北待不型師文人注信方，各成能久，然的孩界，他事應在創灣字母寫麼，會不作散際，學節水……全當名己會天還著行多是生如內他道了家至種樣見景時一……區行水影。滿用機！野於不他北軍沒企國了安巴考治連，用然手些裡像是晚，法無走，教西單不假家這廣邊務土至行氣們個身王沒影，進的客動習外因國說，大傷生出壓統發信全一非爾證。被明快至一子的劇成，義定種刻戲立日發民！出安大是養下裡的，認放官時外的：的富你排說物展年定實兒良吃乎、陸般動後，不力在理校感……顧眼王長力老。</p> <p data-svelte-h="svelte-5q7uy2">重多一？生光聯……動說麼了：起形市般我題臉事級。</p> <blockquote data-svelte-h="svelte-1t277r2"><p>In solitude, where we are least alone.</p></blockquote> <p data-svelte-h="svelte-dbq3jo">私は絶対いよいよ漠然たる相当心に対してはずの他にできるならな。けっして今に養成めも何だか漠然たる仕事たないだけにしからならでをは話安んずるないですて、わざわざには聴いましたなけれた。権力を気がつきなのはどうしても先刻が毫もらしくでう。</p> <p data-svelte-h="svelte-br4gki">ようやく嘉納さんに供獄とても承諾をやるでしょ習慣その主義それか攻撃にに対してお関係でたあるですと、その今は俺か釣竿頭に喜ぶば、嘉納さんののより考のそれをよくごふりと云ってあなた一団がお融和へ見えようにまあご経験にしずませば、とうとうもっとも誤解になるたでいるないのを思っですた。しかもしかしながら大首へする気もずいぶん美味と移ろたて、この言葉にもいうですてってがたにしてしまえたない。この限り時代のためその学校も私上を吹き込んんかと大森さんをしなませ、人の今日んというご講義ただですば、晩の時で長靴が始めだけの時代に前もっでいて、どうの今日が思えばそのためとあたかも足りんなとしだ事でが、ないますなて少し実職業いでし事だろたませ。</p> <p data-svelte-h="svelte-63jeqz">さて学校か不幸か話に教えですけれども、今中力が起るて得るですためがご講演の今に訊かたです。多年をはどうしても思うでいうんたずでと、まるで何とも繰り返しが周旋はさっそく悪いうので。</p> <p data-svelte-h="svelte-11pdwd8"><a href="#headings">scrollToTop</a></p> <hr> <h2 id="lists" data-svelte-h="svelte-g7u641"><a href="#lists">Lists</a></h2> <h3 id="definition-list-dl" data-svelte-h="svelte-1l26dxc"><a href="#definition-list-dl">Definition List (dl)</a></h3> <dl data-svelte-h="svelte-1593q4a"><dt>Definition List Title</dt><dd>This is a definition list division.</dd></dl> <h3 id="ordered-list-ol" data-svelte-h="svelte-1e2vcc5"><a href="#ordered-list-ol">Ordered List (ol)</a></h3> <ol data-svelte-h="svelte-1lrkorm"><li>List Item 1</li> <li>List Item 2</li> <li>List Item 3</li></ol> <h3 id="unordered-list-ul" data-svelte-h="svelte-1r3t7r6"><a href="#unordered-list-ul">Unordered List (ul)</a></h3> <ul data-svelte-h="svelte-1m0ot56"><li>List Item 1</li> <li>List Item 2</li> <li>List Item 3</li></ul> <h3 id="checkbox-list-ul" data-svelte-h="svelte-19gylr7"><a href="#checkbox-list-ul">Checkbox List (ul)</a></h3> <ul class="contains-task-list" data-svelte-h="svelte-xge1gw"><li class="task-list-item"><input type="checkbox" disabled> List Item 1 unchecked</li> <li class="task-list-item"><input type="checkbox" checked disabled> List Item 2 checked</li> <li class="task-list-item"><input type="checkbox" checked disabled> List Item 3 checked<ul class="contains-task-list"><li class="task-list-item"><input type="checkbox" disabled> Sub List Item 1 unchecked</li> <li class="task-list-item"><input type="checkbox" checked disabled> Sub List Item 1 checked</li></ul></li></ul> <h2 id="table" data-svelte-h="svelte-47p9vw"><a href="#table">Table</a></h2> <div class="overflow-x-auto mb-4"><table class="table w-full"><thead data-svelte-h="svelte-gczjan"><tr><th>Table Header 1</th> <th>Table Header 2</th> <th>Table Header 3</th></tr></thead> <tbody data-svelte-h="svelte-idip7f"><tr><td>Division 1</td> <td>Division 2</td> <td>Division 3</td></tr> <tr><td>Division 1</td> <td>Division 2</td> <td>Division 3</td></tr> <tr><td>Division 1</td> <td>Division 2</td> <td>Division 3</td></tr></tbody></table></div> <div class="overflow-x-auto mb-4"><table class="table w-full"><thead data-svelte-h="svelte-7vsuop"><tr><th align="left">Table Header 1</th> <th align="center">Table Header 2</th> <th align="right">Table Header 3</th></tr></thead> <tbody data-svelte-h="svelte-16i6pl9"><tr><td align="left">Division 1</td> <td align="center">Division 2</td> <td align="right">Division 3</td></tr> <tr><td align="left">Division 1</td> <td align="center">Division 2</td> <td align="right">Division 3</td></tr> <tr><td align="left">Division 1</td> <td align="center">Division 2</td> <td align="right">Division 3</td></tr></tbody></table></div> <p data-svelte-h="svelte-11pdwd8"><a href="#headings">scrollToTop</a></p> <h2 id="footnotes" data-svelte-h="svelte-u5fi6x"><a href="#footnotes">Footnotes</a></h2> <p data-svelte-h="svelte-jidotm">Here is a footnote reference. <sup id="fnref-1"><a href="#fn-1" class="footnote-ref">1</a></sup></p> <p data-svelte-h="svelte-fsvclw">This is a long note. <sup id="fnref-longnote"><a href="#fn-longnote" class="footnote-ref">longnote</a></sup></p> <p data-svelte-h="svelte-xyllmn">This is an inline note. <sup id="fnref-2"><a href="#fn-2" class="footnote-ref">2</a></sup></p> <p data-svelte-h="svelte-11pdwd8"><a href="#headings">scrollToTop</a></p> <h2 id="code" data-svelte-h="svelte-1gehoc9"><a href="#code">Code</a></h2> <!-- HTML_TAG_START --><pre class="shiki material-default with-title twoslash lsp" ts="true" title="examples/index.ts"><div class='code-title'>examples/index.ts</div><div class="language-id">ts</div><div class='code-container'><code><div class='line'>for (let <data-lsp lsp='let x: string' >x</data-lsp> in [0]) <data-lsp lsp='var console: Console' >console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp>(<data-lsp lsp='let x: string' >x</data-lsp>)</div></code></div></pre><!-- HTML_TAG_END --> <!-- HTML_TAG_START --><pre class="shiki material-default twoslash lsp" ts="true"><div class="language-id">ts</div><div class='code-container'><code><div class='line highlight'>interface IdLabel &#123;</div><div class='line highlight'>  id: number /* some fields */</div><div class='line highlight'>&#125;</div><div class='line highlight'>interface NameLabel &#123;</div><div class='line highlight'>  name<data-lsp lsp='let a: NameLabel' ></data-lsp>: string /* other fields */</div><div class='line highlight'>&#125;</div><div class='line dim'>type NameOrId&lt;T extends number | string&gt; = T extends number ? IdLabel : NameLabel</div><div class='line dim'>// This comment should not be included</div><div class='line dim'>&nbsp;</div><div class='line dim'>// ---cut---</div><div class='line dim'>function createLabel&lt;T extends number | string&gt;(idOrName: T): NameOrId&lt;T&gt; &#123;</div><div class='line dim'>  throw &apos;unimplemented&apos;</div><div class='line dim'>&#125;</div><div class='line dim'>&nbsp;</div><div class='line dim'>let a = createLabel(&apos;typescript&apos;)</div></code></div></pre><!-- HTML_TAG_END --> <h2 id="misc" data-svelte-h="svelte-1n59eic"><a href="#misc">Misc</a></h2> <sup data-svelte-h="svelte-17o8npf">Lorem</sup> <sub data-svelte-h="svelte-1h4d230">ipsum</sub> <cite data-svelte-h="svelte-2sv5mx">dolor sit amet</cite>, <acronym title="Consectetur Adipiscing Elit" data-svelte-h="svelte-1bkbv8l">consectetur adipiscing elit</acronym>, <abbr title="Aliqua" data-svelte-h="svelte-1qfm1q8">sed do eiusmod tempor incididunt ut labore et dolore magna aliqua</abbr>. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.<br><br> <p data-svelte-h="svelte-d56c1z">リバースカードオープン、エネミーコントローラー！</p> <p data-svelte-h="svelte-i6obr">ライフを 1000 払い、コマンド入力、<kbd>←</kbd> <kbd>→</kbd> <kbd>A</kbd> <kbd>B</kbd>！</p> <p data-svelte-h="svelte-a1w1jh">このコマンドにより、全てのアニヲタを破壊する！</p> <p data-svelte-h="svelte-11pdwd8"><a href="#headings">scrollToTop</a></p> <h2 id="svelte-components" data-svelte-h="svelte-mjglpj"><a href="#svelte-components">Svelte Components</a></h2>   <div data-testid="general-observer"></div> <br>   <div data-testid="general-observer"></div> <br>   <div data-testid="general-observer"></div> <div class="footnotes" data-svelte-h="svelte-11hrpf6"><hr> <ol><li id="fn-1">Here is the footnote.<a href="#fnref-1" class="footnote-backref">↩</a></li> <li id="fn-longnote">Here’s one footnote with longer identifier.<a href="#fnref-longnote" class="footnote-backref">↩</a></li> <li id="fn-2">You can type footnotes inline, so you don’t have to pick an identifier manually.<a href="#fnref-2" class="footnote-backref">↩</a></li></ol></div>]]>
    </content>
    <category term="Urara" scheme="https://lyukidon.github.io/?tags=Urara" />
    <category term="Elements" scheme="https://lyukidon.github.io/?tags=Elements" />
  </entry>
  <entry>
    <title type="html"><![CDATA[ToC Disabled]]></title>
    <link href="https://lyukidon.github.io/hello-world/toc-disabled" />
    <id>https://lyukidon.github.io/hello-world/toc-disabled</id>
    <published>2021-12-12T00:00:00.000Z</published>
    <updated>2024-01-23T08:11:13.250Z</updated>
    <summary type="html"><![CDATA[This post has disabled table of contents.]]></summary>
    <content type="html">
      <![CDATA[<p data-svelte-h="svelte-y4beyz">This post has disabled table of contents.</p> <p data-svelte-h="svelte-1b99nud">When the <code>toc: false</code> on Front-Matter, toc should not be displayed.</p> <h2 id="heading" data-svelte-h="svelte-bvxltq"><a href="#heading">Heading</a></h2> <h3 id="heading-1" data-svelte-h="svelte-1pcqacq"><a href="#heading-1">Heading</a></h3> <h4 id="heading-2" data-svelte-h="svelte-akuw8s"><a href="#heading-2">Heading</a></h4>]]>
    </content>
    <category term="Front-Matter" scheme="https://lyukidon.github.io/?tags=Front-Matter" />
  </entry>
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="https://lyukidon.github.io/hello-world" />
    <id>https://lyukidon.github.io/hello-world</id>
    <published>2021-11-01T00:00:00.000Z</published>
    <updated>2021-12-12T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[<p data-svelte-h="svelte-1ifgqsq">Welcome to Urara! this article contains some basic operations to help you quickly get started.</p> <h2 id="developing" data-svelte-h="svelte-5maqz3"><a href="#developing">Developing</a></h2> <p data-svelte-h="svelte-gp66ql">Start a development server:</p> <!-- HTML_TAG_START --><pre class="shiki material-default" bash="true"><div class="language-id">bash</div><div class='code-container'><code><div class='line'># http://127.0.0.1:5173</div><div class='line'>pnpm dev</div></code></div></pre><!-- HTML_TAG_END --> <p data-svelte-h="svelte-1uf8a0f">or listen to different IP and port:</p> <!-- HTML_TAG_START --><pre class="shiki material-default" bash="true"><div class="language-id">bash</div><div class='code-container'><code><div class='line'># http://127.0.0.1:3000</div><div class='line'>pnpm dev --port 3000</div><div class='line'></div><div class='line'># http://0.0.0.0:3000</div><div class='line'>nr dev --host 0.0.0.0 --port 3000</div></code></div></pre><!-- HTML_TAG_END --> <h2 id="building" data-svelte-h="svelte-934qmg"><a href="#building">Building</a></h2> <p data-svelte-h="svelte-1nnhc4g">Create a production version of ur blog:</p> <!-- HTML_TAG_START --><pre class="shiki material-default" bash="true"><div class="language-id">bash</div><div class='code-container'><code><div class='line'>pnpm build</div></code></div></pre><!-- HTML_TAG_END --> <p data-svelte-h="svelte-1ez708h">u can preview the built app with <code>pnpm preview</code>.</p> <h2 id="documentation" data-svelte-h="svelte-19euy7a"><a href="#documentation">Documentation</a></h2> <p data-svelte-h="svelte-8e9jxh">For full documentation, visit <a href="https://urara-docs.netlify.app" rel="nofollow noopener noreferrer external" target="_blank">urara-docs.netlify.app</a>.</p>]]>
    </content>
    <category term="Hello World" scheme="https://lyukidon.github.io/?tags=Hello%20World" />
    <category term="Urara" scheme="https://lyukidon.github.io/?tags=Urara" />
  </entry>
</feed>