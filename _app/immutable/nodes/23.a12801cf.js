import{s as d,h as n,i as c,n as _}from"../chunks/scheduler.dd918b38.js";import{S as m,i as f,r as g,u as h,v as y,d as v,t as $,w as A,g as x,h as T,A as L,a as b,f as F}from"../chunks/index.94d1baeb.js";import{P,g as w,a as u}from"../chunks/post_layout.3594328b.js";function C(s){let t,l="<li>Function.prototype.apply/call/bind메서드에 의한 간접 호출<ul><li>apply<ul><li><code>Function.prototype.apply(thisArg[, argsArray])</code></li> <li>사용법 : <code>foo.apply(thisArg)</code></li> <li>예시 : <code>foo.apply(thisArg, [1, 2, 3, 4])</code></li></ul></li> <li>call<ul><li><code>Function.prototype.apply(thisArg[, arg1[, arg2[, ...]]])</code></li> <li>사용법: <code>foo.apply(thisArg)</code></li> <li>예시 : <code>foo.apply(thisArg, 1, 2, 3, 4)</code></li></ul></li> <li>bind<ul><li>callback 함수의 바인딩을 지정</li></ul></li></ul></li>";return{c(){t=x("ul"),t.innerHTML=l},l(a){t=T(a,"UL",{"data-svelte-h":!0}),L(t)!=="svelte-1ls4uoe"&&(t.innerHTML=l)},m(a,i){b(a,t,i)},p:_,d(a){a&&F(t)}}}function H(s){let t,l;const a=[s[0],p];let i={$$slots:{default:[C]},$$scope:{ctx:s}};for(let e=0;e<a.length;e+=1)i=n(i,a[e]);return t=new P({props:i}),{c(){g(t.$$.fragment)},l(e){h(t.$$.fragment,e)},m(e,o){y(t,e,o),l=!0},p(e,[o]){const r=o&1?w(a,[o&1&&u(e[0]),o&0&&u(p)]):{};o&2&&(r.$$scope={dirty:o,ctx:e}),t.$set(r)},i(e){l||(v(t.$$.fragment,e),l=!0)},o(e){$(t.$$.fragment,e),l=!1},d(e){A(t,e)}}}const p={title:"this를 선택 호출하는 방법",image:"",alt:"",created:"2024-02-27T00:00:00.000Z",updated:"2024-02-27T00:00:00.000Z",tags:["this"],images:[],slug:"/Javascript/TIL/this/간접_호출/+page.md",path:"/Javascript/TIL/this/간접_호출",toc:!1};function I(s,t,l){return s.$$set=a=>{l(0,t=n(n({},t),c(a)))},t=c(t),[t]}class Z extends m{constructor(t){super(),f(this,t,I,H,d,{})}}export{Z as component};
