import{s as D,h as E,i as g,n as R}from"../chunks/scheduler.dd918b38.js";import{S as M,i as O,r as P,u as T,v as $,d as H,t as w,w as L,g as m,s as f,H as S,h as v,A as _,c as C,F as U,k as b,a as d,f as F}from"../chunks/index.94d1baeb.js";import{P as I,g as N,a as k}from"../chunks/post_layout.2e559c88.js";function Y(r){let e,n='<a href="#dockerfile">Dockerfile</a>',o,a,l="Docker image를 생성하는데 필요한 파일",t,i,x=`<pre class="shiki material-default" style="background-color: #263238; color: #EEFFFF" docker="true"><div class="language-id">docker</div><div class='code-container'><code><div class='line'><span style="color: #F78C6C">FROM</span><span style="color: #EEFFFF"> node:18 </span><span style="color: #F78C6C">AS</span><span style="color: #EEFFFF"> development</span></div><div class='line'><span style="color: #F78C6C">WORKDIR</span><span style="color: #EEFFFF"> /usr/src/app</span></div><div class='line'></div><div class='line'><span style="color: #F78C6C">COPY</span><span style="color: #EEFFFF"> package*.json ./</span></div><div class='line'><span style="color: #F78C6C">RUN</span><span style="color: #EEFFFF"> npm install</span></div><div class='line'><span style="color: #F78C6C">COPY</span><span style="color: #EEFFFF"> ./ ./</span></div><div class='line'></div><div class='line'><span style="color: #F78C6C">EXPOSE</span><span style="color: #EEFFFF"> 3000</span></div><div class='line'><span style="color: #F78C6C">CMD</span><span style="color: #EEFFFF"> [</span><span style="color: #C3E88D">"npm"</span><span style="color: #EEFFFF">, </span><span style="color: #C3E88D">"start"</span><span style="color: #EEFFFF">]</span></div></code></div></pre>`,u,c,y="<li><p><code>FROM</code> : base 이미지 기반으로 실행</p></li> <li><p><code>WORKDIR</code> : copy한 file이  root로 들어오는 것을 방지하기 위해 work dir를 분리</p></li> <li><p><code>COPY</code> : local file을 도커로 복사</p></li> <li><p><code>RUN</code> : 코드 실행</p></li> <li><p><code>EXPOSE</code> : 노출 PORT 설정</p></li> <li><p><code>CMD</code> : 코드 실행</p></li> <li><p><code>RUN</code>과 <code>CMD</code>의 차이점</p> <ul><li><code>RUN</code> : 빌드 시 실행되는 코드 (일시적)</li> <li><code>CMD</code> : 컨테이너 실행 시 실행되는 코드 (상시적)</li></ul></li> <li><p>실행방법</p> <ul><li>docker build . -t 이미지_이름</li> <li>docker run -p 3500:3000 -v /usr/src/app/node<em>modules -v $(pwd):/usr/src/app 이미지</em>이름</li></ul></li>";return{c(){e=m("h2"),e.innerHTML=n,o=f(),a=m("p"),a.textContent=l,t=f(),i=new S(!1),u=f(),c=m("ul"),c.innerHTML=y,this.h()},l(s){e=v(s,"H2",{id:!0,"data-svelte-h":!0}),_(e)!=="svelte-71n3v2"&&(e.innerHTML=n),o=C(s),a=v(s,"P",{"data-svelte-h":!0}),_(a)!=="svelte-1ekc7wx"&&(a.textContent=l),t=C(s),i=U(s,!1),u=C(s),c=v(s,"UL",{"data-svelte-h":!0}),_(c)!=="svelte-1ah9a4o"&&(c.innerHTML=y),this.h()},h(){b(e,"id","dockerfile"),i.a=u},m(s,p){d(s,e,p),d(s,o,p),d(s,a,p),d(s,t,p),i.m(x,s,p),d(s,u,p),d(s,c,p)},p:R,d(s){s&&(F(e),F(o),F(a),F(t),i.d(),F(u),F(c))}}}function j(r){let e,n;const o=[r[0],h];let a={$$slots:{default:[Y]},$$scope:{ctx:r}};for(let l=0;l<o.length;l+=1)a=E(a,o[l]);return e=new I({props:a}),{c(){P(e.$$.fragment)},l(l){T(e.$$.fragment,l)},m(l,t){$(e,l,t),n=!0},p(l,[t]){const i=t&1?N(o,[t&1&&k(l[0]),t&0&&k(h)]):{};t&2&&(i.$$scope={dirty:t,ctx:l}),e.$set(i)},i(l){n||(H(e.$$.fragment,l),n=!0)},o(l){w(e.$$.fragment,l),n=!1},d(l){L(e,l)}}}const h={title:"Dockerfile",image:"",alt:"",created:"2024-04-03T00:00:00.000Z",updated:"2024-04-03T00:00:00.000Z",tags:["docker"],images:[],slug:"/Javascript/TIL/docker/files/dockerfile/+page.md",path:"/Javascript/TIL/docker/files/dockerfile",toc:[{depth:2,title:"Dockerfile",slug:"dockerfile"}]};function A(r,e,n){return r.$$set=o=>{n(0,e=E(E({},e),g(o)))},e=g(e),[e]}class X extends M{constructor(e){super(),O(this,e,A,j,D,{})}}export{X as component};
