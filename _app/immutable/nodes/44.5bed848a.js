import{s as v,h as u,i as c,n as h}from"../chunks/scheduler.dd918b38.js";import{S as b,i as S,r as w,u as T,v as x,d as P,t as k,w as I,g as _,s as $,h as m,A as d,c as y,k as C,a as o,f as g}from"../chunks/index.94d1baeb.js";import{P as L,g as A,a as f}from"../chunks/post_layout.3594328b.js";function H(r){let e,i='<a href="#1-signaling-server">1. Signaling Server</a>',n,a,t='<li>참고<ul><li><a href="https://developer.mozilla.org/ko/docs/Web/API/WebRTC_API/Signaling_and_video_calling" rel="nofollow noopener noreferrer external" target="_blank">https://developer.mozilla.org/ko/docs/Web/API/WebRTC_API/Signaling_and_video_calling</a></li> <li><a href="https://doublem.org/webrtc-story-02/" rel="nofollow noopener noreferrer external" target="_blank">https://doublem.org/webrtc-story-02/</a></li></ul></li> <li>Signaling<ul><li>서로 다른 네트워크에 있는 2개의 디바이스들을 서로 위치시키기 위해서는, 각 디바이스들의 위치를 발견하는 방법과 미디어 포맷 협의가 필요한데, 이런 프로세스를 Signaling</li> <li>각 디바이스들을 상호간에 동의된 서버(<a href="http://socket.io/" rel="nofollow noopener noreferrer external" target="_blank">socket.io</a> 혹은 websocket을 이용한 서버)에 연결</li> <li>역할 : 각 디바이스들이 <strong>negotiation</strong>(협의) 메세지들을 교환</li> <li>web socket<ul><li>새로운 유저를 등록하는 것, username을 세팅하는 것, 채팅 메세지를 전송하는 것 등등</li> <li>특정한 유저에게 직접 메세지를 전달</li> <li>동일한 서버를 이용하여 시그널 메시지를 보냄</li></ul></li> </ul><ol><li>SDP 교환<ul><li>데이터 포맷 : JSON<ul><li>type : 메세지 타입 video-offer or video-answer</li> <li>name : 보내는 사람의 username</li> <li>target : 받는 사람의 username</li> <li>sdp : 커넥션의 local정보를 설명</li></ul></li></ul></li> <li>ICE 교환<ul><li>ICE : Interactive Connectivity Establishment 상호 연결 확립</li> <li>STUN과 TURN 프레임워크로 확보된 통신 가능한 여러 IP주소와 포트 넘버를 SDP Offer 와 SDP Answer를 통해(Signaling Server를 통해) 상대방에게 전달</li></ul></li></ol></li>';return{c(){e=_("h2"),e.innerHTML=i,n=$(),a=_("ul"),a.innerHTML=t,this.h()},l(l){e=m(l,"H2",{id:!0,"data-svelte-h":!0}),d(e)!=="svelte-118aqay"&&(e.innerHTML=i),n=y(l),a=m(l,"UL",{"data-svelte-h":!0}),d(a)!=="svelte-1b8u0d8"&&(a.innerHTML=t),this.h()},h(){C(e,"id","1-signaling-server")},m(l,s){o(l,e,s),o(l,n,s),o(l,a,s)},p:h,d(l){l&&(g(e),g(n),g(a))}}}function M(r){let e,i;const n=[r[0],p];let a={$$slots:{default:[H]},$$scope:{ctx:r}};for(let t=0;t<n.length;t+=1)a=u(a,n[t]);return e=new L({props:a}),{c(){w(e.$$.fragment)},l(t){T(e.$$.fragment,t)},m(t,l){x(e,t,l),i=!0},p(t,[l]){const s=l&1?A(n,[l&1&&f(t[0]),l&0&&f(p)]):{};l&2&&(s.$$scope={dirty:l,ctx:t}),e.$set(s)},i(t){i||(P(e.$$.fragment,t),i=!0)},o(t){k(e.$$.fragment,t),i=!1},d(t){I(e,t)}}}const p={title:"Signaling Server",image:"",alt:"",created:"2024-04-01T00:00:00.000Z",updated:"2024-04-01T00:00:00.000Z",tags:["webrtc"],images:[],slug:"/Javascript/TIL/webrtc/signaling_server/+page.md",path:"/Javascript/TIL/webrtc/signaling_server",toc:[{depth:2,title:"1. Signaling Server",slug:"1-signaling-server"}]};function W(r,e,i){return r.$$set=n=>{i(0,e=u(u({},e),c(n)))},e=c(e),[e]}class N extends b{constructor(e){super(),S(this,e,W,M,v,{})}}export{N as component};
